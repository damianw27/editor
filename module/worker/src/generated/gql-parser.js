// Generated from ./tmp/GQLParser.g4 by ANTLR 4.13.1
// jshint ignore: start
import antlr4 from 'antlr4';
import GQLParserListener from './gql-parser-listener';
const serializedATN = [4,1,429,5279,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,
7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,2,92,7,
92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,2,99,7,99,
2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,2,105,7,105,
2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,2,111,7,111,
2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,2,117,7,117,
2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,2,123,7,123,
2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,
2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,
2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,
2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,7,153,
2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,2,159,7,159,
2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,7,164,2,165,7,165,
2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,7,170,2,171,7,171,
2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,7,176,2,177,7,177,
2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,7,182,2,183,7,183,
2,184,7,184,2,185,7,185,2,186,7,186,2,187,7,187,2,188,7,188,2,189,7,189,
2,190,7,190,2,191,7,191,2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,
2,196,7,196,2,197,7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,
2,202,7,202,2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,2,207,7,207,
2,208,7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,2,213,7,213,
2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,2,219,7,219,
2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,7,224,2,225,7,225,
2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,7,230,2,231,7,231,
2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,2,236,7,236,2,237,7,237,
2,238,7,238,2,239,7,239,2,240,7,240,2,241,7,241,2,242,7,242,2,243,7,243,
2,244,7,244,2,245,7,245,2,246,7,246,2,247,7,247,2,248,7,248,2,249,7,249,
2,250,7,250,2,251,7,251,2,252,7,252,2,253,7,253,2,254,7,254,2,255,7,255,
2,256,7,256,2,257,7,257,2,258,7,258,2,259,7,259,2,260,7,260,2,261,7,261,
2,262,7,262,2,263,7,263,2,264,7,264,2,265,7,265,2,266,7,266,2,267,7,267,
2,268,7,268,2,269,7,269,2,270,7,270,2,271,7,271,2,272,7,272,2,273,7,273,
2,274,7,274,2,275,7,275,2,276,7,276,2,277,7,277,2,278,7,278,2,279,7,279,
2,280,7,280,2,281,7,281,2,282,7,282,2,283,7,283,2,284,7,284,2,285,7,285,
2,286,7,286,2,287,7,287,2,288,7,288,2,289,7,289,2,290,7,290,2,291,7,291,
2,292,7,292,2,293,7,293,2,294,7,294,2,295,7,295,2,296,7,296,2,297,7,297,
2,298,7,298,2,299,7,299,2,300,7,300,2,301,7,301,2,302,7,302,2,303,7,303,
2,304,7,304,2,305,7,305,2,306,7,306,2,307,7,307,2,308,7,308,2,309,7,309,
2,310,7,310,2,311,7,311,2,312,7,312,2,313,7,313,2,314,7,314,2,315,7,315,
2,316,7,316,2,317,7,317,2,318,7,318,2,319,7,319,2,320,7,320,2,321,7,321,
2,322,7,322,2,323,7,323,2,324,7,324,2,325,7,325,2,326,7,326,2,327,7,327,
2,328,7,328,2,329,7,329,2,330,7,330,2,331,7,331,2,332,7,332,2,333,7,333,
2,334,7,334,2,335,7,335,2,336,7,336,2,337,7,337,2,338,7,338,2,339,7,339,
2,340,7,340,2,341,7,341,2,342,7,342,2,343,7,343,2,344,7,344,2,345,7,345,
2,346,7,346,2,347,7,347,2,348,7,348,2,349,7,349,2,350,7,350,2,351,7,351,
2,352,7,352,2,353,7,353,2,354,7,354,2,355,7,355,2,356,7,356,2,357,7,357,
2,358,7,358,2,359,7,359,2,360,7,360,2,361,7,361,2,362,7,362,2,363,7,363,
2,364,7,364,2,365,7,365,2,366,7,366,2,367,7,367,2,368,7,368,2,369,7,369,
2,370,7,370,2,371,7,371,2,372,7,372,2,373,7,373,2,374,7,374,2,375,7,375,
2,376,7,376,2,377,7,377,2,378,7,378,2,379,7,379,2,380,7,380,2,381,7,381,
2,382,7,382,2,383,7,383,2,384,7,384,2,385,7,385,2,386,7,386,2,387,7,387,
2,388,7,388,2,389,7,389,2,390,7,390,2,391,7,391,2,392,7,392,2,393,7,393,
2,394,7,394,2,395,7,395,2,396,7,396,2,397,7,397,2,398,7,398,2,399,7,399,
2,400,7,400,2,401,7,401,2,402,7,402,2,403,7,403,2,404,7,404,2,405,7,405,
2,406,7,406,2,407,7,407,2,408,7,408,2,409,7,409,2,410,7,410,2,411,7,411,
2,412,7,412,2,413,7,413,2,414,7,414,2,415,7,415,2,416,7,416,2,417,7,417,
2,418,7,418,2,419,7,419,2,420,7,420,2,421,7,421,2,422,7,422,2,423,7,423,
2,424,7,424,2,425,7,425,2,426,7,426,2,427,7,427,2,428,7,428,2,429,7,429,
2,430,7,430,2,431,7,431,2,432,7,432,2,433,7,433,2,434,7,434,2,435,7,435,
2,436,7,436,2,437,7,437,2,438,7,438,2,439,7,439,2,440,7,440,2,441,7,441,
2,442,7,442,2,443,7,443,2,444,7,444,2,445,7,445,2,446,7,446,2,447,7,447,
2,448,7,448,2,449,7,449,2,450,7,450,2,451,7,451,2,452,7,452,2,453,7,453,
2,454,7,454,2,455,7,455,2,456,7,456,2,457,7,457,2,458,7,458,2,459,7,459,
2,460,7,460,2,461,7,461,2,462,7,462,2,463,7,463,2,464,7,464,2,465,7,465,
2,466,7,466,2,467,7,467,2,468,7,468,2,469,7,469,2,470,7,470,2,471,7,471,
2,472,7,472,2,473,7,473,2,474,7,474,2,475,7,475,2,476,7,476,2,477,7,477,
2,478,7,478,2,479,7,479,2,480,7,480,2,481,7,481,2,482,7,482,2,483,7,483,
2,484,7,484,2,485,7,485,2,486,7,486,2,487,7,487,2,488,7,488,2,489,7,489,
2,490,7,490,2,491,7,491,2,492,7,492,2,493,7,493,2,494,7,494,2,495,7,495,
2,496,7,496,2,497,7,497,2,498,7,498,2,499,7,499,2,500,7,500,2,501,7,501,
2,502,7,502,2,503,7,503,2,504,7,504,2,505,7,505,2,506,7,506,2,507,7,507,
2,508,7,508,2,509,7,509,2,510,7,510,2,511,7,511,2,512,7,512,2,513,7,513,
2,514,7,514,2,515,7,515,2,516,7,516,2,517,7,517,2,518,7,518,2,519,7,519,
2,520,7,520,2,521,7,521,2,522,7,522,2,523,7,523,2,524,7,524,2,525,7,525,
2,526,7,526,2,527,7,527,2,528,7,528,2,529,7,529,2,530,7,530,2,531,7,531,
2,532,7,532,2,533,7,533,2,534,7,534,2,535,7,535,2,536,7,536,2,537,7,537,
2,538,7,538,2,539,7,539,2,540,7,540,2,541,7,541,2,542,7,542,2,543,7,543,
2,544,7,544,2,545,7,545,2,546,7,546,2,547,7,547,2,548,7,548,2,549,7,549,
2,550,7,550,2,551,7,551,2,552,7,552,2,553,7,553,2,554,7,554,2,555,7,555,
2,556,7,556,2,557,7,557,2,558,7,558,2,559,7,559,2,560,7,560,2,561,7,561,
2,562,7,562,2,563,7,563,2,564,7,564,2,565,7,565,2,566,7,566,2,567,7,567,
2,568,7,568,2,569,7,569,2,570,7,570,2,571,7,571,2,572,7,572,2,573,7,573,
2,574,7,574,2,575,7,575,2,576,7,576,2,577,7,577,2,578,7,578,2,579,7,579,
2,580,7,580,2,581,7,581,2,582,7,582,2,583,7,583,2,584,7,584,2,585,7,585,
2,586,7,586,2,587,7,587,2,588,7,588,2,589,7,589,2,590,7,590,2,591,7,591,
2,592,7,592,2,593,7,593,2,594,7,594,2,595,7,595,2,596,7,596,2,597,7,597,
2,598,7,598,2,599,7,599,2,600,7,600,2,601,7,601,2,602,7,602,2,603,7,603,
2,604,7,604,2,605,7,605,2,606,7,606,2,607,7,607,2,608,7,608,2,609,7,609,
2,610,7,610,2,611,7,611,2,612,7,612,2,613,7,613,2,614,7,614,2,615,7,615,
2,616,7,616,2,617,7,617,2,618,7,618,2,619,7,619,2,620,7,620,2,621,7,621,
2,622,7,622,2,623,7,623,2,624,7,624,2,625,7,625,2,626,7,626,2,627,7,627,
2,628,7,628,2,629,7,629,2,630,7,630,2,631,7,631,2,632,7,632,2,633,7,633,
2,634,7,634,2,635,7,635,2,636,7,636,2,637,7,637,2,638,7,638,2,639,7,639,
2,640,7,640,2,641,7,641,2,642,7,642,2,643,7,643,2,644,7,644,2,645,7,645,
2,646,7,646,2,647,7,647,2,648,7,648,2,649,7,649,2,650,7,650,2,651,7,651,
2,652,7,652,2,653,7,653,2,654,7,654,2,655,7,655,2,656,7,656,2,657,7,657,
2,658,7,658,2,659,7,659,2,660,7,660,2,661,7,661,2,662,7,662,2,663,7,663,
2,664,7,664,2,665,7,665,2,666,7,666,2,667,7,667,2,668,7,668,2,669,7,669,
2,670,7,670,1,0,5,0,1344,8,0,10,0,12,0,1347,9,0,1,0,1,0,1,1,1,1,3,1,1353,
8,1,1,2,1,2,3,2,1357,8,2,1,3,1,3,3,3,1361,8,3,1,4,1,4,1,4,1,4,1,4,1,4,3,
4,1369,8,4,1,5,1,5,1,5,1,6,3,6,1375,8,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,8,
1,8,1,9,1,9,1,9,3,9,1389,8,9,1,10,3,10,1392,8,10,1,10,1,10,1,10,1,10,1,11,
3,11,1399,8,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,13,3,13,1410,8,
13,1,13,1,13,1,14,3,14,1415,8,14,1,14,1,14,1,14,1,15,3,15,1421,8,15,1,15,
1,15,1,15,3,15,1426,8,15,1,15,1,15,1,15,1,15,1,15,3,15,1433,8,15,1,16,3,
16,1436,8,16,1,16,1,16,1,17,1,17,1,17,3,17,1443,8,17,3,17,1445,8,17,1,17,
1,17,3,17,1449,8,17,1,17,3,17,1452,8,17,1,18,1,18,1,18,3,18,1457,8,18,1,
19,1,19,1,20,1,20,1,20,4,20,1464,8,20,11,20,12,20,1465,1,21,1,21,3,21,1470,
8,21,1,22,1,22,1,22,1,22,3,22,1476,8,22,1,23,1,23,1,24,1,24,1,24,1,24,1,
25,1,25,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,28,3,28,1495,8,28,1,28,
3,28,1498,8,28,1,28,1,28,1,29,4,29,1503,8,29,11,29,12,29,1504,1,30,1,30,
1,30,3,30,1510,8,30,1,31,1,31,5,31,1514,8,31,10,31,12,31,1517,9,31,1,32,
1,32,1,32,3,32,1522,8,32,1,33,1,33,3,33,1526,8,33,1,33,1,33,1,34,3,34,1531,
8,34,1,34,1,34,1,34,1,34,1,35,3,35,1538,8,35,1,35,3,35,1541,8,35,1,35,1,
35,1,36,1,36,1,36,1,37,3,37,1549,8,37,1,37,1,37,1,37,1,37,1,38,3,38,1556,
8,38,1,38,3,38,1559,8,38,1,38,1,38,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,
41,3,41,1571,8,41,1,41,3,41,1574,8,41,1,41,1,41,1,42,1,42,1,42,1,43,1,43,
1,43,1,43,1,43,3,43,1586,8,43,1,44,1,44,1,45,1,45,1,46,1,46,1,46,1,46,3,
46,1596,8,46,1,47,1,47,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,3,48,
1609,8,48,1,49,4,49,1612,8,49,11,49,12,49,1613,1,50,1,50,3,50,1618,8,50,
1,51,1,51,1,51,1,51,1,51,1,51,3,51,1626,8,51,1,52,1,52,1,52,3,52,1631,8,
52,1,52,1,52,1,53,1,53,1,53,3,53,1638,8,53,1,53,1,53,1,54,1,54,3,54,1644,
8,54,1,55,1,55,3,55,1648,8,55,1,55,1,55,3,55,1652,8,55,1,55,1,55,1,55,3,
55,1657,8,55,1,55,3,55,1660,8,55,1,56,1,56,1,56,1,56,3,56,1666,8,56,1,56,
1,56,1,56,1,56,3,56,1672,8,56,1,56,3,56,1675,8,56,1,57,1,57,3,57,1679,8,
57,1,57,3,57,1682,8,57,1,57,1,57,1,58,1,58,3,58,1688,8,58,1,58,1,58,3,58,
1692,8,58,1,58,3,58,1695,8,58,1,59,1,59,1,59,1,60,1,60,1,60,1,60,1,60,1,
61,1,61,3,61,1707,8,61,1,61,1,61,3,61,1711,8,61,1,61,1,61,1,62,1,62,3,62,
1717,8,62,1,62,1,62,1,62,3,62,1722,8,62,1,62,1,62,1,62,3,62,1727,8,62,1,
62,1,62,3,62,1731,8,62,1,62,1,62,1,62,1,63,3,63,1737,8,63,1,63,1,63,1,63,
3,63,1742,8,63,1,63,3,63,1745,8,63,1,64,1,64,1,64,1,64,3,64,1751,8,64,1,
65,1,65,3,65,1755,8,65,1,65,1,65,1,65,3,65,1760,8,65,1,65,1,65,1,66,1,66,
1,67,1,67,3,67,1768,8,67,1,68,1,68,3,68,1772,8,68,1,69,1,69,1,69,3,69,1777,
8,69,1,70,1,70,1,70,1,71,1,71,3,71,1784,8,71,1,72,1,72,3,72,1788,8,72,1,
73,4,73,1791,8,73,11,73,12,73,1792,1,74,1,74,3,74,1797,8,74,1,75,1,75,3,
75,1801,8,75,1,76,1,76,1,76,1,76,3,76,1807,8,76,1,77,1,77,1,77,1,78,1,78,
1,78,1,79,1,79,1,79,4,79,1818,8,79,11,79,12,79,1819,1,80,1,80,1,80,3,80,
1825,8,80,1,81,1,81,1,81,1,81,1,81,1,81,1,82,1,82,1,82,1,82,3,82,1837,8,
82,1,82,1,82,1,83,1,83,1,83,1,83,1,84,1,84,1,84,5,84,1848,8,84,10,84,12,
84,1851,9,84,1,85,1,85,1,85,1,86,1,86,1,86,4,86,1859,8,86,11,86,12,86,1860,
1,87,1,87,3,87,1865,8,87,1,88,1,88,1,88,1,88,1,89,1,89,1,89,1,89,1,90,1,
90,1,90,1,90,1,91,1,91,1,91,4,91,1882,8,91,11,91,12,91,1883,1,92,1,92,1,
93,1,93,1,94,1,94,1,95,1,95,1,95,1,95,1,95,1,95,1,95,5,95,1899,8,95,10,95,
12,95,1902,9,95,1,96,1,96,3,96,1906,8,96,1,97,1,97,1,97,1,98,1,98,1,99,1,
99,3,99,1915,8,99,1,100,4,100,1918,8,100,11,100,12,100,1919,1,100,1,100,
1,100,1,100,1,100,3,100,1927,8,100,1,101,1,101,1,101,1,102,1,102,1,102,1,
102,1,103,1,103,1,103,1,104,1,104,1,104,1,105,3,105,1943,8,105,1,105,1,105,
3,105,1947,8,105,1,106,1,106,5,106,1951,8,106,10,106,12,106,1954,9,106,1,
107,1,107,3,107,1958,8,107,1,108,1,108,1,108,1,108,1,108,3,108,1965,8,108,
1,109,1,109,3,109,1969,8,109,1,110,1,110,1,110,1,111,1,111,1,111,1,112,1,
112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,3,112,1986,8,112,1,113,4,113,
1989,8,113,11,113,12,113,1990,1,114,1,114,1,115,1,115,1,115,3,115,1998,8,
115,1,116,1,116,1,116,1,117,1,117,1,117,4,117,2006,8,117,11,117,12,117,2007,
1,118,1,118,1,118,1,118,1,118,3,118,2015,8,118,1,119,1,119,1,119,3,119,2020,
8,119,1,120,1,120,1,120,1,121,1,121,1,121,1,122,1,122,1,122,1,122,1,123,
1,123,3,123,2034,8,123,1,123,3,123,2037,8,123,1,123,1,123,3,123,2041,8,123,
1,123,3,123,2044,8,123,1,124,1,124,3,124,2048,8,124,1,124,3,124,2051,8,124,
1,125,1,125,1,125,1,126,3,126,2057,8,126,1,126,1,126,3,126,2061,8,126,1,
126,3,126,2064,8,126,1,126,1,126,3,126,2068,8,126,1,127,1,127,1,127,5,127,
2073,8,127,10,127,12,127,2076,9,127,1,128,1,128,3,128,2080,8,128,1,129,1,
129,1,129,1,130,1,130,3,130,2087,8,130,1,130,1,130,3,130,2091,8,130,1,130,
1,130,3,130,2095,8,130,1,130,3,130,2098,8,130,1,130,3,130,2101,8,130,1,130,
3,130,2104,8,130,1,130,3,130,2107,8,130,1,130,3,130,2110,8,130,3,130,2112,
8,130,1,131,1,131,1,131,4,131,2117,8,131,11,131,12,131,2118,1,132,1,132,
3,132,2123,8,132,1,133,1,133,1,133,1,134,1,134,1,134,1,135,1,135,1,135,3,
135,2134,8,135,1,136,1,136,1,136,5,136,2139,8,136,10,136,12,136,2142,9,136,
1,137,1,137,1,137,1,138,1,138,1,138,1,138,1,138,1,138,3,138,2153,8,138,1,
139,3,139,2156,8,139,1,139,1,139,1,139,1,140,1,140,3,140,2163,8,140,1,141,
3,141,2166,8,141,1,141,1,141,1,142,1,142,3,142,2172,8,142,1,142,1,142,1,
143,1,143,1,143,4,143,2179,8,143,11,143,12,143,2180,1,144,1,144,1,144,3,
144,2186,8,144,1,144,1,144,1,145,1,145,1,145,4,145,2193,8,145,11,145,12,
145,2194,1,146,1,146,1,147,1,147,1,147,1,148,1,148,1,148,1,149,1,149,1,150,
1,150,1,151,1,151,1,152,1,152,1,153,1,153,3,153,2215,8,153,1,154,1,154,1,
154,1,155,1,155,1,155,4,155,2223,8,155,11,155,12,155,2224,1,156,1,156,1,
156,1,157,3,157,2231,8,157,1,157,1,157,3,157,2235,8,157,1,157,3,157,2238,
8,157,1,158,1,158,3,158,2242,8,158,1,159,1,159,1,159,1,160,1,160,1,160,1,
161,1,161,3,161,2252,8,161,1,161,3,161,2255,8,161,1,162,1,162,3,162,2259,
8,162,1,162,3,162,2262,8,162,1,163,1,163,1,163,5,163,2267,8,163,10,163,12,
163,2270,9,163,1,164,3,164,2273,8,164,1,164,3,164,2276,8,164,1,164,4,164,
2279,8,164,11,164,12,164,2280,1,165,1,165,1,165,1,166,1,166,1,166,1,167,
1,167,1,167,1,168,1,168,3,168,2294,8,168,1,169,1,169,3,169,2298,8,169,1,
170,1,170,1,171,1,171,1,171,3,171,2305,8,171,1,172,1,172,3,172,2309,8,172,
1,172,3,172,2312,8,172,1,173,1,173,1,174,1,174,3,174,2318,8,174,1,174,3,
174,2321,8,174,1,174,3,174,2324,8,174,1,175,1,175,1,176,1,176,1,176,1,176,
3,176,2332,8,176,1,177,1,177,1,177,3,177,2337,8,177,1,177,3,177,2340,8,177,
1,178,1,178,1,178,3,178,2345,8,178,1,178,3,178,2348,8,178,1,179,1,179,1,
179,3,179,2353,8,179,1,179,3,179,2356,8,179,1,180,1,180,1,180,3,180,2361,
8,180,1,180,3,180,2364,8,180,1,180,1,180,1,181,1,181,1,182,1,182,1,183,1,
183,1,183,3,183,2375,8,183,1,184,1,184,1,184,5,184,2380,8,184,10,184,12,
184,2383,9,184,1,185,1,185,1,185,5,185,2388,8,185,10,185,12,185,2391,9,185,
1,186,1,186,5,186,2395,8,186,10,186,12,186,2398,9,186,1,187,1,187,1,187,
3,187,2403,8,187,1,188,1,188,1,188,1,189,1,189,1,189,1,190,1,190,1,190,3,
190,2414,8,190,1,191,1,191,3,191,2418,8,191,1,192,1,192,1,192,1,192,1,193,
3,193,2425,8,193,1,193,3,193,2428,8,193,1,193,3,193,2431,8,193,1,194,3,194,
2434,8,194,1,194,1,194,1,195,1,195,1,195,1,196,1,196,3,196,2443,8,196,1,
197,1,197,3,197,2447,8,197,1,198,1,198,1,198,1,199,1,199,1,199,1,199,1,200,
1,200,1,200,5,200,2459,8,200,10,200,12,200,2462,9,200,1,201,1,201,1,201,
1,201,1,202,1,202,3,202,2470,8,202,1,203,1,203,1,203,1,203,1,203,1,203,1,
203,3,203,2479,8,203,1,204,1,204,1,204,1,204,1,205,1,205,1,205,1,205,1,206,
1,206,1,206,1,206,1,207,1,207,1,207,1,207,1,208,1,208,1,208,1,208,1,209,
1,209,1,209,1,209,1,210,1,210,1,210,1,210,1,211,1,211,1,212,1,212,3,212,
2513,8,212,1,212,3,212,2516,8,212,1,212,1,212,3,212,2520,8,212,1,212,1,212,
1,213,1,213,1,213,1,214,1,214,1,214,1,215,1,215,1,216,1,216,1,216,5,216,
2535,8,216,10,216,12,216,2538,9,216,1,217,1,217,1,217,1,217,5,217,2544,8,
217,10,217,12,217,2547,9,217,1,218,1,218,3,218,2551,8,218,1,218,1,218,1,
219,1,219,1,219,3,219,2558,8,219,1,220,1,220,1,220,1,220,1,221,1,221,1,221,
1,221,1,222,1,222,1,222,1,222,1,223,1,223,3,223,2574,8,223,1,223,3,223,2577,
8,223,1,223,3,223,2580,8,223,1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,
224,1,224,1,224,1,224,1,224,1,224,1,224,3,224,2596,8,224,1,225,1,225,1,225,
5,225,2601,8,225,10,225,12,225,2604,9,225,1,226,1,226,1,226,5,226,2609,8,
226,10,226,12,226,2612,9,226,1,227,1,227,3,227,2616,8,227,1,228,1,228,1,
228,1,229,1,229,1,229,3,229,2624,8,229,1,230,1,230,1,231,1,231,1,231,1,231,
1,232,1,232,1,232,1,232,3,232,2636,8,232,1,233,1,233,1,233,1,233,1,234,1,
234,3,234,2644,8,234,1,234,1,234,3,234,2648,8,234,1,234,1,234,1,235,1,235,
1,236,1,236,1,237,1,237,1,237,1,237,1,237,1,237,1,237,3,237,2663,8,237,1,
238,1,238,1,238,1,238,1,239,1,239,1,239,1,239,1,240,1,240,1,240,1,240,1,
241,1,241,1,241,1,241,1,242,1,242,1,242,1,242,1,243,1,243,1,243,1,243,1,
244,1,244,1,244,1,244,1,245,1,245,1,245,3,245,2696,8,245,1,246,1,246,1,246,
5,246,2701,8,246,10,246,12,246,2704,9,246,1,247,1,247,1,247,5,247,2709,8,
247,10,247,12,247,2712,9,247,1,248,1,248,5,248,2716,8,248,10,248,12,248,
2719,9,248,1,249,1,249,1,249,5,249,2724,8,249,10,249,12,249,2727,9,249,1,
250,1,250,1,250,3,250,2732,8,250,1,251,1,251,1,251,1,252,1,252,1,252,1,253,
1,253,3,253,2742,8,253,1,254,1,254,1,254,1,254,1,254,1,254,1,254,3,254,2751,
8,254,1,255,1,255,1,255,1,256,1,256,1,256,1,257,1,257,1,257,1,258,1,258,
1,258,1,259,1,259,1,259,1,259,1,260,1,260,1,260,1,260,1,261,1,261,1,261,
1,262,1,262,3,262,2778,8,262,1,263,1,263,1,263,1,264,1,264,1,264,1,264,1,
264,3,264,2788,8,264,1,265,1,265,1,265,1,266,1,266,1,266,1,267,1,267,1,267,
4,267,2799,8,267,11,267,12,267,2800,1,268,1,268,3,268,2805,8,268,1,269,1,
269,1,270,1,270,1,270,1,271,1,271,1,271,1,271,1,272,1,272,1,272,4,272,2819,
8,272,11,272,12,272,2820,1,272,3,272,2824,8,272,1,273,1,273,1,274,1,274,
1,274,1,275,1,275,1,275,1,275,1,276,1,276,1,276,1,276,1,276,1,276,3,276,
2841,8,276,1,277,1,277,1,277,3,277,2846,8,277,1,277,1,277,1,277,1,278,1,
278,1,279,1,279,1,280,1,280,1,281,3,281,2858,8,281,1,281,1,281,1,282,1,282,
1,283,1,283,1,283,4,283,2867,8,283,11,283,12,283,2868,1,284,1,284,3,284,
2873,8,284,1,284,3,284,2876,8,284,1,285,1,285,1,286,1,286,1,287,1,287,1,
287,1,287,3,287,2886,8,287,1,288,1,288,1,288,1,289,1,289,1,289,1,290,1,290,
1,291,3,291,2897,8,291,1,291,1,291,1,291,1,291,1,292,1,292,1,292,1,292,1,
293,1,293,1,294,1,294,1,294,5,294,2912,8,294,10,294,12,294,2915,9,294,1,
295,1,295,3,295,2919,8,295,1,296,1,296,1,296,1,296,3,296,2925,8,296,1,297,
1,297,1,297,1,297,1,297,1,298,3,298,2933,8,298,1,298,1,298,3,298,2937,8,
298,1,298,3,298,2940,8,298,1,299,1,299,1,300,1,300,1,300,1,300,1,300,3,300,
2949,8,300,1,301,1,301,1,302,1,302,1,303,1,303,3,303,2957,8,303,1,303,1,
303,1,303,3,303,2962,8,303,1,304,1,304,3,304,2966,8,304,1,305,3,305,2969,
8,305,1,305,1,305,1,305,1,305,1,305,1,305,1,305,3,305,2978,8,305,1,306,1,
306,1,307,1,307,1,307,1,307,1,307,3,307,2987,8,307,1,308,1,308,1,309,1,309,
1,310,1,310,1,310,3,310,2996,8,310,1,311,1,311,1,311,1,311,1,312,1,312,1,
312,1,312,1,313,1,313,1,313,1,313,1,314,1,314,1,314,1,314,1,315,1,315,1,
315,1,315,1,316,1,316,1,316,1,316,1,317,1,317,1,317,1,318,1,318,1,318,3,
318,3028,8,318,1,319,1,319,1,319,1,319,1,320,1,320,1,320,1,320,1,321,1,321,
1,321,1,321,1,322,1,322,3,322,3044,8,322,1,323,1,323,1,323,1,323,1,323,1,
323,3,323,3052,8,323,1,323,3,323,3055,8,323,1,324,1,324,1,324,1,324,1,324,
1,324,3,324,3063,8,324,1,324,3,324,3066,8,324,1,325,1,325,1,326,1,326,1,
326,1,327,1,327,1,327,1,327,3,327,3077,8,327,1,328,1,328,1,328,1,328,1,328,
1,328,1,329,1,329,1,329,1,329,1,329,1,329,1,330,1,330,1,330,1,330,1,330,
1,330,1,331,1,331,1,332,1,332,1,333,1,333,1,334,1,334,1,335,1,335,1,336,
1,336,1,336,1,336,1,336,1,336,1,336,1,336,3,336,3115,8,336,1,337,1,337,3,
337,3119,8,337,1,337,1,337,1,338,1,338,1,338,5,338,3126,8,338,10,338,12,
338,3129,9,338,1,339,1,339,3,339,3133,8,339,1,339,1,339,1,340,1,340,1,341,
3,341,3140,8,341,1,341,1,341,1,341,1,342,1,342,1,342,3,342,3148,8,342,1,
343,1,343,3,343,3152,8,343,1,344,1,344,1,344,1,344,1,344,1,344,1,344,3,344,
3161,8,344,1,345,1,345,3,345,3165,8,345,1,346,1,346,1,346,1,346,1,346,3,
346,3172,8,346,1,346,3,346,3175,8,346,1,347,1,347,1,347,1,347,3,347,3181,
8,347,1,347,1,347,1,347,3,347,3186,8,347,1,347,3,347,3189,8,347,1,347,1,
347,1,347,1,347,1,347,3,347,3196,8,347,1,347,3,347,3199,8,347,1,347,1,347,
1,347,1,347,1,347,3,347,3206,8,347,1,347,3,347,3209,8,347,3,347,3211,8,347,
1,348,1,348,1,349,1,349,1,350,1,350,1,351,1,351,3,351,3221,8,351,1,352,1,
352,3,352,3225,8,352,1,353,1,353,3,353,3229,8,353,1,354,1,354,3,354,3233,
8,354,1,354,1,354,3,354,3237,8,354,1,354,1,354,3,354,3241,8,354,1,354,1,
354,3,354,3245,8,354,1,354,1,354,3,354,3249,8,354,1,354,1,354,3,354,3253,
8,354,1,354,1,354,3,354,3257,8,354,1,354,1,354,1,354,1,354,1,354,3,354,3264,
8,354,1,354,3,354,3267,8,354,1,354,1,354,3,354,3271,8,354,1,354,3,354,3274,
8,354,1,354,3,354,3277,8,354,1,355,1,355,3,355,3281,8,355,1,355,1,355,3,
355,3285,8,355,1,355,1,355,3,355,3289,8,355,1,355,1,355,3,355,3293,8,355,
1,355,1,355,3,355,3297,8,355,1,355,1,355,3,355,3301,8,355,1,355,1,355,3,
355,3305,8,355,1,355,1,355,1,355,1,355,1,355,3,355,3312,8,355,1,355,3,355,
3315,8,355,1,355,1,355,3,355,3319,8,355,1,355,1,355,3,355,3323,8,355,1,356,
1,356,3,356,3327,8,356,1,356,1,356,3,356,3331,8,356,1,356,1,356,3,356,3335,
8,356,1,356,1,356,3,356,3339,8,356,1,356,1,356,3,356,3343,8,356,1,356,1,
356,3,356,3347,8,356,1,356,1,356,1,356,3,356,3352,8,356,1,356,1,356,1,356,
1,356,1,356,3,356,3359,8,356,1,356,3,356,3362,8,356,1,356,1,356,1,356,3,
356,3367,8,356,3,356,3369,8,356,1,357,1,357,1,357,1,357,1,357,3,357,3376,
8,357,1,357,1,357,3,357,3380,8,357,1,357,3,357,3383,8,357,1,358,1,358,1,
359,1,359,1,360,1,360,3,360,3391,8,360,1,360,1,360,3,360,3395,8,360,1,360,
1,360,3,360,3399,8,360,1,360,1,360,3,360,3403,8,360,1,360,1,360,3,360,3407,
8,360,1,360,1,360,1,360,1,360,1,360,3,360,3414,8,360,1,360,1,360,3,360,3418,
8,360,1,360,3,360,3421,8,360,1,360,1,360,3,360,3425,8,360,1,360,1,360,3,
360,3429,8,360,1,360,3,360,3432,8,360,1,361,1,361,3,361,3436,8,361,1,362,
1,362,1,362,1,362,1,362,3,362,3443,8,362,1,363,1,363,1,364,1,364,1,364,3,
364,3450,8,364,1,364,1,364,1,364,1,364,3,364,3456,8,364,3,364,3458,8,364,
1,365,1,365,1,365,3,365,3463,8,365,1,365,1,365,1,365,1,365,1,365,3,365,3470,
8,365,3,365,3472,8,365,1,366,1,366,3,366,3476,8,366,1,367,1,367,1,367,3,
367,3481,8,367,1,367,1,367,1,367,1,367,3,367,3487,8,367,3,367,3489,8,367,
1,368,1,368,1,368,3,368,3494,8,368,1,368,1,368,1,368,1,368,3,368,3500,8,
368,3,368,3502,8,368,1,369,1,369,3,369,3506,8,369,1,370,1,370,1,370,1,370,
3,370,3512,8,370,1,371,1,371,3,371,3516,8,371,1,372,1,372,3,372,3520,8,372,
1,372,1,372,3,372,3524,8,372,1,373,1,373,3,373,3528,8,373,1,374,1,374,3,
374,3532,8,374,1,375,1,375,3,375,3536,8,375,1,376,3,376,3539,8,376,1,376,
1,376,3,376,3543,8,376,1,377,1,377,3,377,3547,8,377,1,378,1,378,3,378,3551,
8,378,1,379,3,379,3554,8,379,1,379,1,379,3,379,3558,8,379,1,380,1,380,3,
380,3562,8,380,1,381,1,381,3,381,3566,8,381,1,382,1,382,1,382,1,382,1,382,
1,382,1,382,1,382,3,382,3576,8,382,1,382,3,382,3579,8,382,1,382,1,382,1,
382,1,382,1,382,1,382,3,382,3587,8,382,1,382,3,382,3590,8,382,3,382,3592,
8,382,1,383,3,383,3595,8,383,1,383,1,383,1,384,1,384,1,385,3,385,3602,8,
385,1,385,1,385,3,385,3606,8,385,1,385,3,385,3609,8,385,1,385,1,385,3,385,
3613,8,385,3,385,3615,8,385,1,386,1,386,3,386,3619,8,386,1,386,1,386,1,387,
1,387,1,387,4,387,3626,8,387,11,387,12,387,3627,1,388,1,388,1,388,3,388,
3633,8,388,1,389,1,389,1,390,3,390,3638,8,390,1,390,1,390,1,390,1,391,1,
391,1,391,1,391,1,391,1,392,1,392,1,392,5,392,3651,8,392,10,392,12,392,3654,
9,392,1,393,1,393,1,394,1,394,1,395,1,395,1,395,1,396,1,396,1,396,1,396,
1,397,1,397,1,397,3,397,3670,8,397,1,398,1,398,1,398,1,398,3,398,3676,8,
398,1,399,1,399,1,399,1,400,1,400,1,400,1,400,3,400,3685,8,400,1,401,1,401,
1,402,1,402,3,402,3691,8,402,1,403,1,403,1,403,5,403,3696,8,403,10,403,12,
403,3699,9,403,1,403,1,403,3,403,3703,8,403,3,403,3705,8,403,1,404,1,404,
1,404,4,404,3710,8,404,11,404,12,404,3711,1,405,1,405,1,405,1,405,1,405,
1,405,3,405,3720,8,405,1,406,3,406,3723,8,406,1,406,1,406,1,407,1,407,1,
408,1,408,3,408,3731,8,408,1,409,3,409,3734,8,409,1,409,1,409,1,410,1,410,
1,410,1,410,1,410,3,410,3743,8,410,1,411,3,411,3746,8,411,1,411,1,411,1,
412,1,412,3,412,3752,8,412,1,413,3,413,3755,8,413,1,413,1,413,1,414,1,414,
3,414,3761,8,414,1,414,1,414,1,414,5,414,3766,8,414,10,414,12,414,3769,9,
414,1,414,1,414,1,414,4,414,3774,8,414,11,414,12,414,3775,3,414,3778,8,414,
1,415,1,415,1,416,1,416,1,417,1,417,1,418,1,418,1,418,1,418,1,418,1,418,
1,418,1,418,1,418,1,418,1,418,3,418,3797,8,418,1,419,1,419,1,419,1,420,1,
420,1,420,1,421,1,421,1,421,1,421,1,421,1,421,3,421,3811,8,421,1,422,1,422,
1,423,1,423,1,423,1,424,1,424,1,425,1,425,1,426,1,426,1,426,1,427,1,427,
1,427,1,428,1,428,3,428,3830,8,428,1,429,1,429,1,429,1,429,1,429,1,429,1,
429,1,429,1,429,1,429,1,429,1,429,1,429,1,429,1,429,1,429,1,429,1,429,3,
429,3850,8,429,1,430,1,430,1,430,1,431,1,431,3,431,3857,8,431,1,431,1,431,
1,432,1,432,1,432,1,433,1,433,3,433,3866,8,433,1,433,1,433,1,433,1,434,1,
434,1,434,1,435,1,435,3,435,3876,8,435,1,435,3,435,3879,8,435,1,435,1,435,
1,436,1,436,1,436,1,437,1,437,3,437,3888,8,437,1,437,1,437,1,438,1,438,1,
439,1,439,1,439,1,440,1,440,3,440,3899,8,440,1,440,1,440,3,440,3903,8,440,
1,441,1,441,1,441,1,441,1,441,1,441,3,441,3911,8,441,1,442,1,442,1,443,1,
443,3,443,3917,8,443,1,443,1,443,1,443,1,443,1,444,1,444,3,444,3925,8,444,
1,444,1,444,1,444,1,444,1,445,1,445,1,446,1,446,1,446,1,446,1,446,4,446,
3938,8,446,11,446,12,446,3939,1,446,1,446,1,447,1,447,1,447,1,447,1,447,
4,447,3949,8,447,11,447,12,447,3950,1,447,1,447,1,448,1,448,1,448,1,448,
1,448,1,448,1,448,1,449,1,449,3,449,3964,8,449,1,450,1,450,3,450,3968,8,
450,1,451,1,451,3,451,3972,8,451,1,452,1,452,3,452,3976,8,452,1,453,1,453,
1,454,1,454,3,454,3982,8,454,1,455,1,455,1,455,1,455,1,455,1,455,1,455,1,
455,1,455,3,455,3993,8,455,1,456,1,456,1,456,4,456,3998,8,456,11,456,12,
456,3999,1,457,1,457,1,457,1,457,3,457,4006,8,457,1,458,3,458,4009,8,458,
1,458,1,458,1,458,3,458,4014,8,458,1,459,3,459,4017,8,459,1,459,1,459,1,
459,3,459,4022,8,459,1,460,1,460,1,461,1,461,1,462,1,462,1,463,1,463,1,464,
1,464,1,464,1,464,1,464,1,464,1,464,1,464,1,464,3,464,4041,8,464,1,465,1,
465,1,465,1,465,1,465,1,465,5,465,4049,8,465,10,465,12,465,4052,9,465,1,
466,3,466,4055,8,466,1,466,1,466,1,467,1,467,1,467,3,467,4062,8,467,1,467,
3,467,4065,8,467,1,468,1,468,1,469,1,469,3,469,4071,8,469,1,470,1,470,3,
470,4075,8,470,1,471,1,471,1,471,1,471,1,472,1,472,1,472,1,472,1,472,1,472,
1,472,1,472,1,472,3,472,4090,8,472,1,473,1,473,1,473,1,473,1,473,1,473,1,
473,1,473,1,473,3,473,4101,8,473,1,474,3,474,4104,8,474,1,474,1,474,1,475,
1,475,3,475,4110,8,475,1,476,1,476,3,476,4114,8,476,1,477,1,477,1,477,1,
477,1,478,1,478,3,478,4122,8,478,1,479,1,479,1,479,1,479,1,479,1,479,1,479,
1,479,3,479,4132,8,479,1,480,1,480,1,480,3,480,4137,8,480,1,481,1,481,1,
481,1,481,1,481,1,481,1,481,1,481,1,481,1,481,3,481,4149,8,481,1,482,1,482,
1,482,3,482,4154,8,482,1,483,1,483,1,483,1,483,1,483,1,484,1,484,1,484,1,
484,1,484,1,485,1,485,1,485,1,485,1,485,1,486,1,486,1,486,1,486,1,486,1,
487,1,487,1,487,1,487,1,487,1,487,1,487,1,488,1,488,1,489,1,489,1,490,1,
490,1,490,1,490,1,490,1,491,1,491,1,492,1,492,1,492,3,492,4197,8,492,1,493,
1,493,1,493,1,493,1,493,1,493,1,493,1,494,1,494,1,495,1,495,1,496,1,496,
1,496,1,496,1,496,1,497,1,497,1,497,1,497,1,497,1,498,1,498,1,498,1,498,
1,498,1,499,1,499,1,499,1,499,1,499,1,499,1,499,1,500,1,500,1,501,1,501,
1,502,1,502,1,502,1,502,1,502,1,503,1,503,1,503,1,503,1,503,1,504,1,504,
1,504,1,504,1,504,1,505,1,505,3,505,4253,8,505,1,506,1,506,3,506,4257,8,
506,1,507,1,507,1,507,1,507,1,508,1,508,1,509,1,509,3,509,4267,8,509,1,510,
1,510,3,510,4271,8,510,1,511,1,511,1,512,1,512,3,512,4277,8,512,1,513,1,
513,1,513,1,513,1,514,1,514,3,514,4285,8,514,1,515,1,515,1,515,3,515,4290,
8,515,1,516,1,516,1,516,1,516,1,516,1,517,1,517,3,517,4299,8,517,1,518,1,
518,1,518,1,518,1,518,1,519,1,519,1,519,1,519,1,519,1,519,1,519,1,519,1,
520,3,520,4315,8,520,1,520,3,520,4318,8,520,1,520,3,520,4321,8,520,1,520,
1,520,1,521,1,521,1,522,1,522,1,523,1,523,1,524,1,524,1,524,1,524,1,524,
1,524,1,524,1,524,1,525,1,525,1,526,1,526,1,527,1,527,1,527,1,527,1,527,
1,528,3,528,4349,8,528,1,528,3,528,4352,8,528,1,528,3,528,4355,8,528,1,528,
1,528,1,529,1,529,1,530,1,530,1,531,1,531,1,532,1,532,1,532,1,532,1,532,
1,532,3,532,4371,8,532,1,532,1,532,1,532,1,532,1,532,1,532,5,532,4379,8,
532,10,532,12,532,4382,9,532,1,533,1,533,1,534,1,534,1,535,1,535,3,535,4390,
8,535,1,536,1,536,1,536,1,536,1,536,3,536,4397,8,536,1,537,1,537,1,537,1,
537,3,537,4403,8,537,1,537,3,537,4406,8,537,1,538,1,538,1,538,1,538,3,538,
4412,8,538,1,538,3,538,4415,8,538,1,539,1,539,1,539,3,539,4420,8,539,1,539,
3,539,4423,8,539,1,540,1,540,1,540,1,540,3,540,4429,8,540,1,540,3,540,4432,
8,540,1,541,1,541,1,541,1,541,3,541,4438,8,541,1,541,3,541,4441,8,541,1,
542,1,542,3,542,4445,8,542,1,543,1,543,3,543,4449,8,543,1,544,1,544,3,544,
4453,8,544,1,545,1,545,1,545,3,545,4458,8,545,1,545,1,545,1,545,1,545,1,
545,1,545,5,545,4466,8,545,10,545,12,545,4469,9,545,1,546,1,546,1,546,1,
546,1,546,1,547,1,547,1,547,1,547,1,548,1,548,1,548,1,548,1,548,1,548,3,
548,4486,8,548,1,548,1,548,1,548,1,548,1,548,1,548,5,548,4494,8,548,10,548,
12,548,4497,9,548,1,549,3,549,4500,8,549,1,549,1,549,1,550,1,550,3,550,4506,
8,550,1,551,1,551,1,552,1,552,1,553,1,553,1,554,1,554,1,555,1,555,1,556,
1,556,3,556,4520,8,556,1,557,1,557,1,557,1,557,1,557,1,558,1,558,3,558,4529,
8,558,1,559,1,559,1,559,1,559,1,559,1,560,1,560,3,560,4538,8,560,1,561,1,
561,1,561,1,561,1,562,1,562,3,562,4546,8,562,1,563,1,563,1,563,1,564,1,564,
1,564,1,564,1,564,1,564,1,564,1,565,1,565,1,565,1,565,1,565,1,566,1,566,
1,567,1,567,1,567,1,567,1,567,1,567,1,567,1,568,1,568,1,568,5,568,4575,8,
568,10,568,12,568,4578,9,568,1,569,1,569,1,570,3,570,4583,8,570,1,570,1,
570,1,571,1,571,3,571,4589,8,571,1,571,1,571,1,572,1,572,1,572,5,572,4596,
8,572,10,572,12,572,4599,9,572,1,573,1,573,1,573,1,573,1,574,1,574,3,574,
4607,8,574,1,575,1,575,1,575,1,575,1,576,1,576,1,577,1,577,1,578,1,578,1,
578,1,578,1,578,1,579,1,579,3,579,4624,8,579,1,580,1,580,1,581,1,581,1,581,
1,581,1,581,1,582,1,582,1,582,1,582,1,583,1,583,1,583,3,583,4640,8,583,1,
584,1,584,1,584,1,585,1,585,3,585,4647,8,585,1,586,1,586,1,586,1,586,1,586,
1,586,1,586,1,586,1,586,1,586,1,586,1,586,5,586,4661,8,586,10,586,12,586,
4664,9,586,1,586,1,586,3,586,4668,8,586,1,587,1,587,3,587,4672,8,587,1,588,
1,588,1,588,1,588,3,588,4678,8,588,1,588,1,588,1,589,1,589,1,589,3,589,4685,
8,589,1,589,1,589,1,590,1,590,1,590,1,590,1,590,1,591,1,591,1,591,1,591,
1,591,1,592,1,592,1,592,1,593,1,593,3,593,4704,8,593,1,594,1,594,1,594,5,
594,4709,8,594,10,594,12,594,4712,9,594,1,595,1,595,1,595,1,595,1,595,1,
595,1,595,1,595,3,595,4722,8,595,1,596,1,596,3,596,4726,8,596,1,597,1,597,
1,598,1,598,1,598,1,598,1,598,1,598,1,598,1,599,1,599,1,600,1,600,1,601,
1,601,1,601,1,601,1,601,1,602,1,602,1,602,1,602,1,602,1,602,1,603,1,603,
3,603,4754,8,603,1,604,1,604,1,604,3,604,4759,8,604,1,605,1,605,1,605,1,
605,1,605,1,605,3,605,4767,8,605,1,606,1,606,3,606,4771,8,606,1,607,1,607,
1,608,1,608,1,608,3,608,4778,8,608,1,609,3,609,4781,8,609,1,609,1,609,3,
609,4785,8,609,1,609,3,609,4788,8,609,1,610,3,610,4791,8,610,1,610,1,610,
1,610,5,610,4796,8,610,10,610,12,610,4799,9,610,1,611,3,611,4802,8,611,1,
611,1,611,1,611,5,611,4807,8,611,10,611,12,611,4810,9,611,1,612,3,612,4813,
8,612,1,612,1,612,1,612,5,612,4818,8,612,10,612,12,612,4821,9,612,1,613,
1,613,1,614,1,614,1,615,1,615,1,616,1,616,1,617,1,617,1,617,1,617,3,617,
4835,8,617,1,618,1,618,1,618,1,619,1,619,1,619,1,620,1,620,1,620,1,620,3,
620,4847,8,620,1,621,1,621,1,622,1,622,1,623,1,623,1,624,1,624,1,624,1,624,
1,624,1,624,1,624,1,624,1,624,1,624,1,624,1,624,1,624,1,624,1,624,1,624,
1,624,1,624,1,624,1,624,1,624,1,624,1,624,1,624,1,624,1,624,1,624,1,624,
1,624,1,624,1,624,1,624,1,624,1,624,1,624,1,624,1,624,1,624,1,624,1,624,
1,624,1,624,3,624,4897,8,624,1,625,1,625,1,625,3,625,4902,8,625,1,626,1,
626,1,627,1,627,1,627,1,628,1,628,1,629,1,629,1,630,1,630,1,631,1,631,1,
632,1,632,1,633,1,633,1,634,1,634,1,635,1,635,1,636,1,636,3,636,4927,8,636,
1,637,1,637,1,638,1,638,1,639,1,639,1,640,1,640,3,640,4937,8,640,1,641,1,
641,1,642,1,642,1,643,1,643,1,644,1,644,1,645,1,645,1,646,1,646,1,646,1,
647,1,647,1,647,1,647,1,647,3,647,4957,8,647,1,648,1,648,1,649,1,649,3,649,
4963,8,649,1,650,1,650,3,650,4967,8,650,1,651,1,651,1,652,1,652,1,653,1,
653,1,654,1,654,1,655,1,655,1,656,1,656,1,657,1,657,3,657,4983,8,657,1,658,
1,658,1,658,1,658,1,658,1,658,3,658,4991,8,658,1,659,1,659,3,659,4995,8,
659,1,660,1,660,3,660,4999,8,660,1,661,1,661,1,662,1,662,3,662,5005,8,662,
1,663,1,663,3,663,5009,8,663,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,
664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,
664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,
664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,
664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,
664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,
664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,
664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,
664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,
664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,
664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,
664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,
664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,
664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,
664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,
664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,
664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,
664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,664,1,
664,1,664,1,664,1,664,1,664,1,664,3,664,5228,8,664,1,665,1,665,1,666,1,666,
1,667,1,667,1,667,1,667,1,667,1,667,1,667,1,667,1,667,1,667,1,667,1,667,
1,667,1,667,1,667,1,667,1,667,1,667,1,667,1,667,1,667,1,667,1,667,1,667,
1,667,1,667,1,667,1,667,1,667,1,667,1,667,1,667,1,667,1,667,1,667,1,667,
1,667,3,667,5271,8,667,1,668,1,668,1,669,1,669,1,670,1,670,1,670,0,5,190,
930,1064,1090,1096,671,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,
36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,
84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,
124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,
160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,
196,198,200,202,204,206,208,210,212,214,216,218,220,222,224,226,228,230,
232,234,236,238,240,242,244,246,248,250,252,254,256,258,260,262,264,266,
268,270,272,274,276,278,280,282,284,286,288,290,292,294,296,298,300,302,
304,306,308,310,312,314,316,318,320,322,324,326,328,330,332,334,336,338,
340,342,344,346,348,350,352,354,356,358,360,362,364,366,368,370,372,374,
376,378,380,382,384,386,388,390,392,394,396,398,400,402,404,406,408,410,
412,414,416,418,420,422,424,426,428,430,432,434,436,438,440,442,444,446,
448,450,452,454,456,458,460,462,464,466,468,470,472,474,476,478,480,482,
484,486,488,490,492,494,496,498,500,502,504,506,508,510,512,514,516,518,
520,522,524,526,528,530,532,534,536,538,540,542,544,546,548,550,552,554,
556,558,560,562,564,566,568,570,572,574,576,578,580,582,584,586,588,590,
592,594,596,598,600,602,604,606,608,610,612,614,616,618,620,622,624,626,
628,630,632,634,636,638,640,642,644,646,648,650,652,654,656,658,660,662,
664,666,668,670,672,674,676,678,680,682,684,686,688,690,692,694,696,698,
700,702,704,706,708,710,712,714,716,718,720,722,724,726,728,730,732,734,
736,738,740,742,744,746,748,750,752,754,756,758,760,762,764,766,768,770,
772,774,776,778,780,782,784,786,788,790,792,794,796,798,800,802,804,806,
808,810,812,814,816,818,820,822,824,826,828,830,832,834,836,838,840,842,
844,846,848,850,852,854,856,858,860,862,864,866,868,870,872,874,876,878,
880,882,884,886,888,890,892,894,896,898,900,902,904,906,908,910,912,914,
916,918,920,922,924,926,928,930,932,934,936,938,940,942,944,946,948,950,
952,954,956,958,960,962,964,966,968,970,972,974,976,978,980,982,984,986,
988,990,992,994,996,998,1000,1002,1004,1006,1008,1010,1012,1014,1016,1018,
1020,1022,1024,1026,1028,1030,1032,1034,1036,1038,1040,1042,1044,1046,1048,
1050,1052,1054,1056,1058,1060,1062,1064,1066,1068,1070,1072,1074,1076,1078,
1080,1082,1084,1086,1088,1090,1092,1094,1096,1098,1100,1102,1104,1106,1108,
1110,1112,1114,1116,1118,1120,1122,1124,1126,1128,1130,1132,1134,1136,1138,
1140,1142,1144,1146,1148,1150,1152,1154,1156,1158,1160,1162,1164,1166,1168,
1170,1172,1174,1176,1178,1180,1182,1184,1186,1188,1190,1192,1194,1196,1198,
1200,1202,1204,1206,1208,1210,1212,1214,1216,1218,1220,1222,1224,1226,1228,
1230,1232,1234,1236,1238,1240,1242,1244,1246,1248,1250,1252,1254,1256,1258,
1260,1262,1264,1266,1268,1270,1272,1274,1276,1278,1280,1282,1284,1286,1288,
1290,1292,1294,1296,1298,1300,1302,1304,1306,1308,1310,1312,1314,1316,1318,
1320,1322,1324,1326,1328,1330,1332,1334,1336,1338,1340,0,40,2,0,91,91,204,
204,2,0,95,95,220,220,1,0,103,104,2,0,118,118,189,189,3,0,127,127,165,165,
257,257,2,0,197,197,338,338,4,0,311,311,345,345,351,351,356,356,2,0,205,
205,207,207,2,0,142,142,324,324,6,0,1,2,5,5,10,10,20,20,27,27,50,50,6,0,
73,73,94,94,100,100,183,184,236,237,239,239,2,0,62,62,119,119,1,0,208,209,
2,0,68,69,116,117,2,0,197,197,231,231,2,0,317,317,354,354,2,0,10,10,350,
350,2,0,50,50,350,350,1,0,77,78,2,0,238,238,265,265,1,0,112,113,2,0,66,66,
172,172,3,0,54,54,105,105,146,146,1,0,144,145,3,0,130,130,247,247,258,258,
1,0,89,90,2,0,82,82,195,195,8,0,61,61,70,70,72,72,97,99,114,114,213,213,
229,230,240,241,1,0,87,88,2,0,180,180,260,260,3,0,80,80,181,181,221,221,
3,0,79,79,168,168,245,245,1,0,330,333,1,0,360,363,1,0,396,397,1,0,276,310,
1,0,311,359,2,0,318,318,341,341,2,0,319,319,342,342,2,0,335,335,355,355,
5571,0,1345,1,0,0,0,2,1350,1,0,0,0,4,1356,1,0,0,0,6,1360,1,0,0,0,8,1362,
1,0,0,0,10,1370,1,0,0,0,12,1374,1,0,0,0,14,1379,1,0,0,0,16,1383,1,0,0,0,
18,1388,1,0,0,0,20,1391,1,0,0,0,22,1398,1,0,0,0,24,1404,1,0,0,0,26,1409,
1,0,0,0,28,1414,1,0,0,0,30,1432,1,0,0,0,32,1435,1,0,0,0,34,1451,1,0,0,0,
36,1453,1,0,0,0,38,1458,1,0,0,0,40,1460,1,0,0,0,42,1469,1,0,0,0,44,1475,
1,0,0,0,46,1477,1,0,0,0,48,1479,1,0,0,0,50,1483,1,0,0,0,52,1485,1,0,0,0,
54,1489,1,0,0,0,56,1494,1,0,0,0,58,1502,1,0,0,0,60,1509,1,0,0,0,62,1511,
1,0,0,0,64,1521,1,0,0,0,66,1523,1,0,0,0,68,1530,1,0,0,0,70,1540,1,0,0,0,
72,1544,1,0,0,0,74,1548,1,0,0,0,76,1558,1,0,0,0,78,1562,1,0,0,0,80,1565,
1,0,0,0,82,1573,1,0,0,0,84,1577,1,0,0,0,86,1585,1,0,0,0,88,1587,1,0,0,0,
90,1589,1,0,0,0,92,1595,1,0,0,0,94,1597,1,0,0,0,96,1608,1,0,0,0,98,1611,
1,0,0,0,100,1617,1,0,0,0,102,1625,1,0,0,0,104,1627,1,0,0,0,106,1634,1,0,
0,0,108,1643,1,0,0,0,110,1645,1,0,0,0,112,1661,1,0,0,0,114,1676,1,0,0,0,
116,1694,1,0,0,0,118,1696,1,0,0,0,120,1699,1,0,0,0,122,1704,1,0,0,0,124,
1714,1,0,0,0,126,1744,1,0,0,0,128,1746,1,0,0,0,130,1752,1,0,0,0,132,1763,
1,0,0,0,134,1767,1,0,0,0,136,1771,1,0,0,0,138,1773,1,0,0,0,140,1778,1,0,
0,0,142,1783,1,0,0,0,144,1785,1,0,0,0,146,1790,1,0,0,0,148,1796,1,0,0,0,
150,1800,1,0,0,0,152,1806,1,0,0,0,154,1808,1,0,0,0,156,1811,1,0,0,0,158,
1814,1,0,0,0,160,1824,1,0,0,0,162,1826,1,0,0,0,164,1832,1,0,0,0,166,1840,
1,0,0,0,168,1844,1,0,0,0,170,1852,1,0,0,0,172,1855,1,0,0,0,174,1864,1,0,
0,0,176,1866,1,0,0,0,178,1870,1,0,0,0,180,1874,1,0,0,0,182,1878,1,0,0,0,
184,1885,1,0,0,0,186,1887,1,0,0,0,188,1889,1,0,0,0,190,1891,1,0,0,0,192,
1905,1,0,0,0,194,1907,1,0,0,0,196,1910,1,0,0,0,198,1914,1,0,0,0,200,1926,
1,0,0,0,202,1928,1,0,0,0,204,1931,1,0,0,0,206,1935,1,0,0,0,208,1938,1,0,
0,0,210,1946,1,0,0,0,212,1948,1,0,0,0,214,1957,1,0,0,0,216,1964,1,0,0,0,
218,1968,1,0,0,0,220,1970,1,0,0,0,222,1973,1,0,0,0,224,1985,1,0,0,0,226,
1988,1,0,0,0,228,1992,1,0,0,0,230,1994,1,0,0,0,232,1999,1,0,0,0,234,2002,
1,0,0,0,236,2014,1,0,0,0,238,2016,1,0,0,0,240,2021,1,0,0,0,242,2024,1,0,
0,0,244,2027,1,0,0,0,246,2043,1,0,0,0,248,2050,1,0,0,0,250,2052,1,0,0,0,
252,2067,1,0,0,0,254,2069,1,0,0,0,256,2077,1,0,0,0,258,2081,1,0,0,0,260,
2084,1,0,0,0,262,2113,1,0,0,0,264,2120,1,0,0,0,266,2124,1,0,0,0,268,2127,
1,0,0,0,270,2133,1,0,0,0,272,2135,1,0,0,0,274,2143,1,0,0,0,276,2152,1,0,
0,0,278,2155,1,0,0,0,280,2162,1,0,0,0,282,2165,1,0,0,0,284,2169,1,0,0,0,
286,2175,1,0,0,0,288,2182,1,0,0,0,290,2189,1,0,0,0,292,2196,1,0,0,0,294,
2198,1,0,0,0,296,2201,1,0,0,0,298,2204,1,0,0,0,300,2206,1,0,0,0,302,2208,
1,0,0,0,304,2210,1,0,0,0,306,2212,1,0,0,0,308,2216,1,0,0,0,310,2219,1,0,
0,0,312,2226,1,0,0,0,314,2230,1,0,0,0,316,2241,1,0,0,0,318,2243,1,0,0,0,
320,2246,1,0,0,0,322,2254,1,0,0,0,324,2261,1,0,0,0,326,2263,1,0,0,0,328,
2272,1,0,0,0,330,2282,1,0,0,0,332,2285,1,0,0,0,334,2288,1,0,0,0,336,2293,
1,0,0,0,338,2295,1,0,0,0,340,2299,1,0,0,0,342,2304,1,0,0,0,344,2306,1,0,
0,0,346,2313,1,0,0,0,348,2315,1,0,0,0,350,2325,1,0,0,0,352,2331,1,0,0,0,
354,2333,1,0,0,0,356,2341,1,0,0,0,358,2349,1,0,0,0,360,2357,1,0,0,0,362,
2367,1,0,0,0,364,2369,1,0,0,0,366,2374,1,0,0,0,368,2376,1,0,0,0,370,2384,
1,0,0,0,372,2392,1,0,0,0,374,2402,1,0,0,0,376,2404,1,0,0,0,378,2407,1,0,
0,0,380,2413,1,0,0,0,382,2417,1,0,0,0,384,2419,1,0,0,0,386,2424,1,0,0,0,
388,2433,1,0,0,0,390,2437,1,0,0,0,392,2442,1,0,0,0,394,2446,1,0,0,0,396,
2448,1,0,0,0,398,2451,1,0,0,0,400,2455,1,0,0,0,402,2463,1,0,0,0,404,2469,
1,0,0,0,406,2478,1,0,0,0,408,2480,1,0,0,0,410,2484,1,0,0,0,412,2488,1,0,
0,0,414,2492,1,0,0,0,416,2496,1,0,0,0,418,2500,1,0,0,0,420,2504,1,0,0,0,
422,2508,1,0,0,0,424,2510,1,0,0,0,426,2523,1,0,0,0,428,2526,1,0,0,0,430,
2529,1,0,0,0,432,2531,1,0,0,0,434,2539,1,0,0,0,436,2548,1,0,0,0,438,2557,
1,0,0,0,440,2559,1,0,0,0,442,2563,1,0,0,0,444,2567,1,0,0,0,446,2579,1,0,
0,0,448,2595,1,0,0,0,450,2597,1,0,0,0,452,2605,1,0,0,0,454,2615,1,0,0,0,
456,2617,1,0,0,0,458,2623,1,0,0,0,460,2625,1,0,0,0,462,2627,1,0,0,0,464,
2635,1,0,0,0,466,2637,1,0,0,0,468,2641,1,0,0,0,470,2651,1,0,0,0,472,2653,
1,0,0,0,474,2662,1,0,0,0,476,2664,1,0,0,0,478,2668,1,0,0,0,480,2672,1,0,
0,0,482,2676,1,0,0,0,484,2680,1,0,0,0,486,2684,1,0,0,0,488,2688,1,0,0,0,
490,2695,1,0,0,0,492,2697,1,0,0,0,494,2705,1,0,0,0,496,2713,1,0,0,0,498,
2720,1,0,0,0,500,2731,1,0,0,0,502,2733,1,0,0,0,504,2736,1,0,0,0,506,2741,
1,0,0,0,508,2750,1,0,0,0,510,2752,1,0,0,0,512,2755,1,0,0,0,514,2758,1,0,
0,0,516,2761,1,0,0,0,518,2764,1,0,0,0,520,2768,1,0,0,0,522,2772,1,0,0,0,
524,2777,1,0,0,0,526,2779,1,0,0,0,528,2787,1,0,0,0,530,2789,1,0,0,0,532,
2792,1,0,0,0,534,2795,1,0,0,0,536,2802,1,0,0,0,538,2806,1,0,0,0,540,2808,
1,0,0,0,542,2811,1,0,0,0,544,2823,1,0,0,0,546,2825,1,0,0,0,548,2827,1,0,
0,0,550,2830,1,0,0,0,552,2840,1,0,0,0,554,2842,1,0,0,0,556,2850,1,0,0,0,
558,2852,1,0,0,0,560,2854,1,0,0,0,562,2857,1,0,0,0,564,2861,1,0,0,0,566,
2863,1,0,0,0,568,2870,1,0,0,0,570,2877,1,0,0,0,572,2879,1,0,0,0,574,2885,
1,0,0,0,576,2887,1,0,0,0,578,2890,1,0,0,0,580,2893,1,0,0,0,582,2896,1,0,
0,0,584,2902,1,0,0,0,586,2906,1,0,0,0,588,2908,1,0,0,0,590,2918,1,0,0,0,
592,2924,1,0,0,0,594,2926,1,0,0,0,596,2939,1,0,0,0,598,2941,1,0,0,0,600,
2948,1,0,0,0,602,2950,1,0,0,0,604,2952,1,0,0,0,606,2961,1,0,0,0,608,2965,
1,0,0,0,610,2977,1,0,0,0,612,2979,1,0,0,0,614,2986,1,0,0,0,616,2988,1,0,
0,0,618,2990,1,0,0,0,620,2995,1,0,0,0,622,2997,1,0,0,0,624,3001,1,0,0,0,
626,3005,1,0,0,0,628,3009,1,0,0,0,630,3013,1,0,0,0,632,3017,1,0,0,0,634,
3021,1,0,0,0,636,3027,1,0,0,0,638,3029,1,0,0,0,640,3033,1,0,0,0,642,3037,
1,0,0,0,644,3043,1,0,0,0,646,3054,1,0,0,0,648,3065,1,0,0,0,650,3067,1,0,
0,0,652,3069,1,0,0,0,654,3076,1,0,0,0,656,3078,1,0,0,0,658,3084,1,0,0,0,
660,3090,1,0,0,0,662,3096,1,0,0,0,664,3098,1,0,0,0,666,3100,1,0,0,0,668,
3102,1,0,0,0,670,3104,1,0,0,0,672,3114,1,0,0,0,674,3116,1,0,0,0,676,3122,
1,0,0,0,678,3130,1,0,0,0,680,3136,1,0,0,0,682,3139,1,0,0,0,684,3147,1,0,
0,0,686,3151,1,0,0,0,688,3160,1,0,0,0,690,3162,1,0,0,0,692,3166,1,0,0,0,
694,3210,1,0,0,0,696,3212,1,0,0,0,698,3214,1,0,0,0,700,3216,1,0,0,0,702,
3220,1,0,0,0,704,3224,1,0,0,0,706,3228,1,0,0,0,708,3276,1,0,0,0,710,3322,
1,0,0,0,712,3368,1,0,0,0,714,3370,1,0,0,0,716,3384,1,0,0,0,718,3386,1,0,
0,0,720,3431,1,0,0,0,722,3435,1,0,0,0,724,3442,1,0,0,0,726,3444,1,0,0,0,
728,3457,1,0,0,0,730,3471,1,0,0,0,732,3473,1,0,0,0,734,3488,1,0,0,0,736,
3501,1,0,0,0,738,3503,1,0,0,0,740,3511,1,0,0,0,742,3515,1,0,0,0,744,3517,
1,0,0,0,746,3525,1,0,0,0,748,3529,1,0,0,0,750,3535,1,0,0,0,752,3538,1,0,
0,0,754,3544,1,0,0,0,756,3550,1,0,0,0,758,3553,1,0,0,0,760,3559,1,0,0,0,
762,3565,1,0,0,0,764,3591,1,0,0,0,766,3594,1,0,0,0,768,3598,1,0,0,0,770,
3614,1,0,0,0,772,3616,1,0,0,0,774,3622,1,0,0,0,776,3632,1,0,0,0,778,3634,
1,0,0,0,780,3637,1,0,0,0,782,3642,1,0,0,0,784,3647,1,0,0,0,786,3655,1,0,
0,0,788,3657,1,0,0,0,790,3659,1,0,0,0,792,3662,1,0,0,0,794,3669,1,0,0,0,
796,3675,1,0,0,0,798,3677,1,0,0,0,800,3684,1,0,0,0,802,3686,1,0,0,0,804,
3688,1,0,0,0,806,3692,1,0,0,0,808,3709,1,0,0,0,810,3719,1,0,0,0,812,3722,
1,0,0,0,814,3726,1,0,0,0,816,3730,1,0,0,0,818,3733,1,0,0,0,820,3742,1,0,
0,0,822,3745,1,0,0,0,824,3751,1,0,0,0,826,3754,1,0,0,0,828,3777,1,0,0,0,
830,3779,1,0,0,0,832,3781,1,0,0,0,834,3783,1,0,0,0,836,3796,1,0,0,0,838,
3798,1,0,0,0,840,3801,1,0,0,0,842,3810,1,0,0,0,844,3812,1,0,0,0,846,3814,
1,0,0,0,848,3817,1,0,0,0,850,3819,1,0,0,0,852,3821,1,0,0,0,854,3824,1,0,
0,0,856,3829,1,0,0,0,858,3831,1,0,0,0,860,3851,1,0,0,0,862,3854,1,0,0,0,
864,3860,1,0,0,0,866,3863,1,0,0,0,868,3870,1,0,0,0,870,3873,1,0,0,0,872,
3882,1,0,0,0,874,3885,1,0,0,0,876,3891,1,0,0,0,878,3893,1,0,0,0,880,3902,
1,0,0,0,882,3910,1,0,0,0,884,3912,1,0,0,0,886,3914,1,0,0,0,888,3922,1,0,
0,0,890,3930,1,0,0,0,892,3932,1,0,0,0,894,3943,1,0,0,0,896,3954,1,0,0,0,
898,3963,1,0,0,0,900,3967,1,0,0,0,902,3971,1,0,0,0,904,3975,1,0,0,0,906,
3977,1,0,0,0,908,3981,1,0,0,0,910,3992,1,0,0,0,912,3994,1,0,0,0,914,4005,
1,0,0,0,916,4013,1,0,0,0,918,4021,1,0,0,0,920,4023,1,0,0,0,922,4025,1,0,
0,0,924,4027,1,0,0,0,926,4029,1,0,0,0,928,4040,1,0,0,0,930,4042,1,0,0,0,
932,4054,1,0,0,0,934,4058,1,0,0,0,936,4066,1,0,0,0,938,4070,1,0,0,0,940,
4074,1,0,0,0,942,4076,1,0,0,0,944,4089,1,0,0,0,946,4100,1,0,0,0,948,4103,
1,0,0,0,950,4109,1,0,0,0,952,4113,1,0,0,0,954,4115,1,0,0,0,956,4121,1,0,
0,0,958,4131,1,0,0,0,960,4136,1,0,0,0,962,4148,1,0,0,0,964,4153,1,0,0,0,
966,4155,1,0,0,0,968,4160,1,0,0,0,970,4165,1,0,0,0,972,4170,1,0,0,0,974,
4175,1,0,0,0,976,4182,1,0,0,0,978,4184,1,0,0,0,980,4186,1,0,0,0,982,4191,
1,0,0,0,984,4196,1,0,0,0,986,4198,1,0,0,0,988,4205,1,0,0,0,990,4207,1,0,
0,0,992,4209,1,0,0,0,994,4214,1,0,0,0,996,4219,1,0,0,0,998,4224,1,0,0,0,
1000,4231,1,0,0,0,1002,4233,1,0,0,0,1004,4235,1,0,0,0,1006,4240,1,0,0,0,
1008,4245,1,0,0,0,1010,4252,1,0,0,0,1012,4256,1,0,0,0,1014,4258,1,0,0,0,
1016,4262,1,0,0,0,1018,4266,1,0,0,0,1020,4270,1,0,0,0,1022,4272,1,0,0,0,
1024,4276,1,0,0,0,1026,4278,1,0,0,0,1028,4284,1,0,0,0,1030,4289,1,0,0,0,
1032,4291,1,0,0,0,1034,4298,1,0,0,0,1036,4300,1,0,0,0,1038,4305,1,0,0,0,
1040,4320,1,0,0,0,1042,4324,1,0,0,0,1044,4326,1,0,0,0,1046,4328,1,0,0,0,
1048,4330,1,0,0,0,1050,4338,1,0,0,0,1052,4340,1,0,0,0,1054,4342,1,0,0,0,
1056,4354,1,0,0,0,1058,4358,1,0,0,0,1060,4360,1,0,0,0,1062,4362,1,0,0,0,
1064,4370,1,0,0,0,1066,4383,1,0,0,0,1068,4385,1,0,0,0,1070,4389,1,0,0,0,
1072,4396,1,0,0,0,1074,4405,1,0,0,0,1076,4414,1,0,0,0,1078,4416,1,0,0,0,
1080,4431,1,0,0,0,1082,4440,1,0,0,0,1084,4444,1,0,0,0,1086,4448,1,0,0,0,
1088,4452,1,0,0,0,1090,4457,1,0,0,0,1092,4470,1,0,0,0,1094,4475,1,0,0,0,
1096,4485,1,0,0,0,1098,4499,1,0,0,0,1100,4505,1,0,0,0,1102,4507,1,0,0,0,
1104,4509,1,0,0,0,1106,4511,1,0,0,0,1108,4513,1,0,0,0,1110,4515,1,0,0,0,
1112,4519,1,0,0,0,1114,4521,1,0,0,0,1116,4528,1,0,0,0,1118,4530,1,0,0,0,
1120,4537,1,0,0,0,1122,4539,1,0,0,0,1124,4545,1,0,0,0,1126,4547,1,0,0,0,
1128,4550,1,0,0,0,1130,4557,1,0,0,0,1132,4562,1,0,0,0,1134,4564,1,0,0,0,
1136,4571,1,0,0,0,1138,4579,1,0,0,0,1140,4582,1,0,0,0,1142,4586,1,0,0,0,
1144,4592,1,0,0,0,1146,4600,1,0,0,0,1148,4606,1,0,0,0,1150,4608,1,0,0,0,
1152,4612,1,0,0,0,1154,4614,1,0,0,0,1156,4616,1,0,0,0,1158,4621,1,0,0,0,
1160,4625,1,0,0,0,1162,4627,1,0,0,0,1164,4632,1,0,0,0,1166,4639,1,0,0,0,
1168,4641,1,0,0,0,1170,4646,1,0,0,0,1172,4667,1,0,0,0,1174,4671,1,0,0,0,
1176,4673,1,0,0,0,1178,4681,1,0,0,0,1180,4688,1,0,0,0,1182,4693,1,0,0,0,
1184,4698,1,0,0,0,1186,4703,1,0,0,0,1188,4705,1,0,0,0,1190,4721,1,0,0,0,
1192,4725,1,0,0,0,1194,4727,1,0,0,0,1196,4729,1,0,0,0,1198,4736,1,0,0,0,
1200,4738,1,0,0,0,1202,4740,1,0,0,0,1204,4745,1,0,0,0,1206,4753,1,0,0,0,
1208,4758,1,0,0,0,1210,4766,1,0,0,0,1212,4770,1,0,0,0,1214,4772,1,0,0,0,
1216,4777,1,0,0,0,1218,4787,1,0,0,0,1220,4790,1,0,0,0,1222,4801,1,0,0,0,
1224,4812,1,0,0,0,1226,4822,1,0,0,0,1228,4824,1,0,0,0,1230,4826,1,0,0,0,
1232,4828,1,0,0,0,1234,4834,1,0,0,0,1236,4836,1,0,0,0,1238,4839,1,0,0,0,
1240,4846,1,0,0,0,1242,4848,1,0,0,0,1244,4850,1,0,0,0,1246,4852,1,0,0,0,
1248,4896,1,0,0,0,1250,4901,1,0,0,0,1252,4903,1,0,0,0,1254,4905,1,0,0,0,
1256,4908,1,0,0,0,1258,4910,1,0,0,0,1260,4912,1,0,0,0,1262,4914,1,0,0,0,
1264,4916,1,0,0,0,1266,4918,1,0,0,0,1268,4920,1,0,0,0,1270,4922,1,0,0,0,
1272,4926,1,0,0,0,1274,4928,1,0,0,0,1276,4930,1,0,0,0,1278,4932,1,0,0,0,
1280,4936,1,0,0,0,1282,4938,1,0,0,0,1284,4940,1,0,0,0,1286,4942,1,0,0,0,
1288,4944,1,0,0,0,1290,4946,1,0,0,0,1292,4948,1,0,0,0,1294,4956,1,0,0,0,
1296,4958,1,0,0,0,1298,4962,1,0,0,0,1300,4966,1,0,0,0,1302,4968,1,0,0,0,
1304,4970,1,0,0,0,1306,4972,1,0,0,0,1308,4974,1,0,0,0,1310,4976,1,0,0,0,
1312,4978,1,0,0,0,1314,4982,1,0,0,0,1316,4990,1,0,0,0,1318,4994,1,0,0,0,
1320,4998,1,0,0,0,1322,5000,1,0,0,0,1324,5004,1,0,0,0,1326,5008,1,0,0,0,
1328,5227,1,0,0,0,1330,5229,1,0,0,0,1332,5231,1,0,0,0,1334,5270,1,0,0,0,
1336,5272,1,0,0,0,1338,5274,1,0,0,0,1340,5276,1,0,0,0,1342,1344,3,2,1,0,
1343,1342,1,0,0,0,1344,1347,1,0,0,0,1345,1343,1,0,0,0,1345,1346,1,0,0,0,
1346,1348,1,0,0,0,1347,1345,1,0,0,0,1348,1349,5,0,0,1,1349,1,1,0,0,0,1350,
1352,3,4,2,0,1351,1353,3,32,16,0,1352,1351,1,0,0,0,1352,1353,1,0,0,0,1353,
3,1,0,0,0,1354,1357,3,6,3,0,1355,1357,3,34,17,0,1356,1354,1,0,0,0,1356,1355,
1,0,0,0,1357,5,1,0,0,0,1358,1361,3,8,4,0,1359,1361,3,28,14,0,1360,1358,1,
0,0,0,1360,1359,1,0,0,0,1361,7,1,0,0,0,1362,1363,5,226,0,0,1363,1368,5,227,
0,0,1364,1369,3,10,5,0,1365,1369,3,12,6,0,1366,1369,3,14,7,0,1367,1369,3,
18,9,0,1368,1364,1,0,0,0,1368,1365,1,0,0,0,1368,1366,1,0,0,0,1368,1367,1,
0,0,0,1369,9,1,0,0,0,1370,1371,5,223,0,0,1371,1372,3,794,397,0,1372,11,1,
0,0,0,1373,1375,5,339,0,0,1374,1373,1,0,0,0,1374,1375,1,0,0,0,1375,1376,
1,0,0,0,1376,1377,5,323,0,0,1377,1378,3,86,43,0,1378,13,1,0,0,0,1379,1380,
5,243,0,0,1380,1381,5,359,0,0,1381,1382,3,16,8,0,1382,15,1,0,0,0,1383,1384,
3,1010,505,0,1384,17,1,0,0,0,1385,1389,3,20,10,0,1386,1389,3,22,11,0,1387,
1389,3,24,12,0,1388,1385,1,0,0,0,1388,1386,1,0,0,0,1388,1387,1,0,0,0,1389,
19,1,0,0,0,1390,1392,5,339,0,0,1391,1390,1,0,0,0,1391,1392,1,0,0,0,1392,
1393,1,0,0,0,1393,1394,5,323,0,0,1394,1395,3,26,13,0,1395,1396,3,70,35,0,
1396,21,1,0,0,0,1397,1399,5,312,0,0,1398,1397,1,0,0,0,1398,1399,1,0,0,0,
1399,1400,1,0,0,0,1400,1401,5,347,0,0,1401,1402,3,26,13,0,1402,1403,3,76,
38,0,1403,23,1,0,0,0,1404,1405,5,263,0,0,1405,1406,3,26,13,0,1406,1407,3,
82,41,0,1407,25,1,0,0,0,1408,1410,5,364,0,0,1409,1408,1,0,0,0,1409,1410,
1,0,0,0,1410,1411,1,0,0,0,1411,1412,3,1292,646,0,1412,27,1,0,0,0,1413,1415,
5,226,0,0,1414,1413,1,0,0,0,1414,1415,1,0,0,0,1415,1416,1,0,0,0,1416,1417,
5,218,0,0,1417,1418,3,30,15,0,1418,29,1,0,0,0,1419,1421,5,62,0,0,1420,1419,
1,0,0,0,1420,1421,1,0,0,0,1421,1422,1,0,0,0,1422,1433,7,0,0,0,1423,1433,
5,223,0,0,1424,1426,5,339,0,0,1425,1424,1,0,0,0,1425,1426,1,0,0,0,1426,1427,
1,0,0,0,1427,1433,5,323,0,0,1428,1429,5,243,0,0,1429,1433,5,359,0,0,1430,
1431,5,203,0,0,1431,1433,3,1292,646,0,1432,1420,1,0,0,0,1432,1423,1,0,0,
0,1432,1425,1,0,0,0,1432,1428,1,0,0,0,1432,1430,1,0,0,0,1433,31,1,0,0,0,
1434,1436,5,226,0,0,1435,1434,1,0,0,0,1435,1436,1,0,0,0,1436,1437,1,0,0,
0,1437,1438,5,92,0,0,1438,33,1,0,0,0,1439,1444,3,36,18,0,1440,1442,3,50,
25,0,1441,1443,3,38,19,0,1442,1441,1,0,0,0,1442,1443,1,0,0,0,1443,1445,1,
0,0,0,1444,1440,1,0,0,0,1444,1445,1,0,0,0,1445,1452,1,0,0,0,1446,1448,3,
50,25,0,1447,1449,3,38,19,0,1448,1447,1,0,0,0,1448,1449,1,0,0,0,1449,1452,
1,0,0,0,1450,1452,3,38,19,0,1451,1439,1,0,0,0,1451,1446,1,0,0,0,1451,1450,
1,0,0,0,1452,35,1,0,0,0,1453,1454,5,235,0,0,1454,1456,5,352,0,0,1455,1457,
3,40,20,0,1456,1455,1,0,0,0,1456,1457,1,0,0,0,1457,37,1,0,0,0,1458,1459,
7,1,0,0,1459,39,1,0,0,0,1460,1463,3,42,21,0,1461,1462,5,34,0,0,1462,1464,
3,42,21,0,1463,1461,1,0,0,0,1464,1465,1,0,0,0,1465,1463,1,0,0,0,1465,1466,
1,0,0,0,1466,41,1,0,0,0,1467,1470,3,44,22,0,1468,1470,3,46,23,0,1469,1467,
1,0,0,0,1469,1468,1,0,0,0,1470,43,1,0,0,0,1471,1472,5,340,0,0,1472,1476,
5,337,0,0,1473,1474,5,340,0,0,1474,1476,5,358,0,0,1475,1471,1,0,0,0,1475,
1473,1,0,0,0,1476,45,1,0,0,0,1477,1478,1,0,0,0,1478,47,1,0,0,0,1479,1480,
5,40,0,0,1480,1481,3,50,25,0,1481,1482,5,41,0,0,1482,49,1,0,0,0,1483,1484,
3,56,28,0,1484,51,1,0,0,0,1485,1486,5,40,0,0,1486,1487,3,56,28,0,1487,1488,
5,41,0,0,1488,53,1,0,0,0,1489,1490,5,40,0,0,1490,1491,3,56,28,0,1491,1492,
5,41,0,0,1492,55,1,0,0,0,1493,1495,3,296,148,0,1494,1493,1,0,0,0,1494,1495,
1,0,0,0,1495,1497,1,0,0,0,1496,1498,3,58,29,0,1497,1496,1,0,0,0,1497,1498,
1,0,0,0,1498,1499,1,0,0,0,1499,1500,3,62,31,0,1500,57,1,0,0,0,1501,1503,
3,60,30,0,1502,1501,1,0,0,0,1503,1504,1,0,0,0,1504,1502,1,0,0,0,1504,1505,
1,0,0,0,1505,59,1,0,0,0,1506,1510,3,68,34,0,1507,1510,3,74,37,0,1508,1510,
3,80,40,0,1509,1506,1,0,0,0,1509,1507,1,0,0,0,1509,1508,1,0,0,0,1510,61,
1,0,0,0,1511,1515,3,64,32,0,1512,1514,3,66,33,0,1513,1512,1,0,0,0,1514,1517,
1,0,0,0,1515,1513,1,0,0,0,1515,1516,1,0,0,0,1516,63,1,0,0,0,1517,1515,1,
0,0,0,1518,1522,3,98,49,0,1519,1522,3,134,67,0,1520,1522,3,188,94,0,1521,
1518,1,0,0,0,1521,1519,1,0,0,0,1521,1520,1,0,0,0,1522,65,1,0,0,0,1523,1525,
5,188,0,0,1524,1526,3,532,266,0,1525,1524,1,0,0,0,1525,1526,1,0,0,0,1526,
1527,1,0,0,0,1527,1528,3,64,32,0,1528,67,1,0,0,0,1529,1531,5,339,0,0,1530,
1529,1,0,0,0,1530,1531,1,0,0,0,1531,1532,1,0,0,0,1532,1533,5,323,0,0,1533,
1534,3,1296,648,0,1534,1535,3,70,35,0,1535,69,1,0,0,0,1536,1538,3,686,343,
0,1537,1536,1,0,0,0,1537,1538,1,0,0,0,1538,1539,1,0,0,0,1539,1541,3,742,
371,0,1540,1537,1,0,0,0,1540,1541,1,0,0,0,1541,1542,1,0,0,0,1542,1543,3,
72,36,0,1543,71,1,0,0,0,1544,1545,5,36,0,0,1545,1546,3,86,43,0,1546,73,1,
0,0,0,1547,1549,5,312,0,0,1548,1547,1,0,0,0,1548,1549,1,0,0,0,1549,1550,
1,0,0,0,1550,1551,5,347,0,0,1551,1552,3,1308,654,0,1552,1553,3,76,38,0,1553,
75,1,0,0,0,1554,1556,3,686,343,0,1555,1554,1,0,0,0,1555,1556,1,0,0,0,1556,
1557,1,0,0,0,1557,1559,3,748,374,0,1558,1555,1,0,0,0,1558,1559,1,0,0,0,1559,
1560,1,0,0,0,1560,1561,3,78,39,0,1561,77,1,0,0,0,1562,1563,5,36,0,0,1563,
1564,3,92,46,0,1564,79,1,0,0,0,1565,1566,5,263,0,0,1566,1567,3,1310,655,
0,1567,1568,3,82,41,0,1568,81,1,0,0,0,1569,1571,3,686,343,0,1570,1569,1,
0,0,0,1570,1571,1,0,0,0,1571,1572,1,0,0,0,1572,1574,3,684,342,0,1573,1570,
1,0,0,0,1573,1574,1,0,0,0,1574,1575,1,0,0,0,1575,1576,3,84,42,0,1576,83,
1,0,0,0,1577,1578,5,36,0,0,1578,1579,3,908,454,0,1579,85,1,0,0,0,1580,1586,
3,90,45,0,1581,1586,3,96,48,0,1582,1586,3,810,405,0,1583,1586,3,1266,633,
0,1584,1586,3,88,44,0,1585,1580,1,0,0,0,1585,1581,1,0,0,0,1585,1582,1,0,
0,0,1585,1583,1,0,0,0,1585,1584,1,0,0,0,1586,87,1,0,0,0,1587,1588,7,2,0,
0,1588,89,1,0,0,0,1589,1590,3,54,27,0,1590,91,1,0,0,0,1591,1596,3,94,47,
0,1592,1596,3,96,48,0,1593,1596,3,820,410,0,1594,1596,3,1266,633,0,1595,
1591,1,0,0,0,1595,1592,1,0,0,0,1595,1593,1,0,0,0,1595,1594,1,0,0,0,1596,
93,1,0,0,0,1597,1598,3,54,27,0,1598,95,1,0,0,0,1599,1600,5,266,0,0,1600,
1609,3,952,476,0,1601,1609,3,954,477,0,1602,1609,3,1164,582,0,1603,1609,
3,900,450,0,1604,1609,3,552,276,0,1605,1609,3,960,480,0,1606,1609,3,1168,
584,0,1607,1609,3,1170,585,0,1608,1599,1,0,0,0,1608,1601,1,0,0,0,1608,1602,
1,0,0,0,1608,1603,1,0,0,0,1608,1604,1,0,0,0,1608,1605,1,0,0,0,1608,1606,
1,0,0,0,1608,1607,1,0,0,0,1609,97,1,0,0,0,1610,1612,3,100,50,0,1611,1610,
1,0,0,0,1612,1613,1,0,0,0,1613,1611,1,0,0,0,1613,1614,1,0,0,0,1614,99,1,
0,0,0,1615,1618,3,102,51,0,1616,1618,3,132,66,0,1617,1615,1,0,0,0,1617,1616,
1,0,0,0,1618,101,1,0,0,0,1619,1626,3,104,52,0,1620,1626,3,108,54,0,1621,
1626,3,124,62,0,1622,1626,3,106,53,0,1623,1626,3,122,61,0,1624,1626,3,130,
65,0,1625,1619,1,0,0,0,1625,1620,1,0,0,0,1625,1621,1,0,0,0,1625,1622,1,0,
0,0,1625,1623,1,0,0,0,1625,1624,1,0,0,0,1626,103,1,0,0,0,1627,1628,5,101,
0,0,1628,1630,5,223,0,0,1629,1631,5,364,0,0,1630,1629,1,0,0,0,1630,1631,
1,0,0,0,1631,1632,1,0,0,0,1632,1633,3,798,399,0,1633,105,1,0,0,0,1634,1635,
5,121,0,0,1635,1637,5,223,0,0,1636,1638,5,365,0,0,1637,1636,1,0,0,0,1637,
1638,1,0,0,0,1638,1639,1,0,0,0,1639,1640,3,798,399,0,1640,107,1,0,0,0,1641,
1644,3,110,55,0,1642,1644,3,112,56,0,1643,1641,1,0,0,0,1643,1642,1,0,0,0,
1644,109,1,0,0,0,1645,1647,5,101,0,0,1646,1648,5,339,0,0,1647,1646,1,0,0,
0,1647,1648,1,0,0,0,1648,1649,1,0,0,0,1649,1651,5,323,0,0,1650,1652,5,364,
0,0,1651,1650,1,0,0,0,1651,1652,1,0,0,0,1652,1653,1,0,0,0,1653,1656,3,812,
406,0,1654,1657,3,114,57,0,1655,1657,3,116,58,0,1656,1654,1,0,0,0,1656,1655,
1,0,0,0,1657,1659,1,0,0,0,1658,1660,3,120,60,0,1659,1658,1,0,0,0,1659,1660,
1,0,0,0,1660,111,1,0,0,0,1661,1662,5,101,0,0,1662,1663,5,200,0,0,1663,1665,
5,217,0,0,1664,1666,5,339,0,0,1665,1664,1,0,0,0,1665,1666,1,0,0,0,1666,1667,
1,0,0,0,1667,1668,5,323,0,0,1668,1671,3,812,406,0,1669,1672,3,114,57,0,1670,
1672,3,116,58,0,1671,1669,1,0,0,0,1671,1670,1,0,0,0,1672,1674,1,0,0,0,1673,
1675,3,120,60,0,1674,1673,1,0,0,0,1674,1675,1,0,0,0,1675,113,1,0,0,0,1676,
1681,5,198,0,0,1677,1679,5,339,0,0,1678,1677,1,0,0,0,1678,1679,1,0,0,0,1679,
1680,1,0,0,0,1680,1682,5,323,0,0,1681,1678,1,0,0,0,1681,1682,1,0,0,0,1682,
1683,1,0,0,0,1683,1684,5,353,0,0,1684,115,1,0,0,0,1685,1695,3,118,59,0,1686,
1688,3,686,343,0,1687,1686,1,0,0,0,1687,1688,1,0,0,0,1688,1689,1,0,0,0,1689,
1695,3,816,408,0,1690,1692,3,686,343,0,1691,1690,1,0,0,0,1691,1692,1,0,0,
0,1692,1693,1,0,0,0,1693,1695,3,584,292,0,1694,1685,1,0,0,0,1694,1687,1,
0,0,0,1694,1691,1,0,0,0,1695,117,1,0,0,0,1696,1697,5,170,0,0,1697,1698,3,
86,43,0,1698,119,1,0,0,0,1699,1700,5,67,0,0,1700,1701,5,96,0,0,1701,1702,
5,196,0,0,1702,1703,3,86,43,0,1703,121,1,0,0,0,1704,1706,5,121,0,0,1705,
1707,5,339,0,0,1706,1705,1,0,0,0,1706,1707,1,0,0,0,1707,1708,1,0,0,0,1708,
1710,5,323,0,0,1709,1711,5,365,0,0,1710,1709,1,0,0,0,1710,1711,1,0,0,0,1711,
1712,1,0,0,0,1712,1713,3,812,406,0,1713,123,1,0,0,0,1714,1730,5,101,0,0,
1715,1717,5,339,0,0,1716,1715,1,0,0,0,1716,1717,1,0,0,0,1717,1718,1,0,0,
0,1718,1719,5,323,0,0,1719,1721,5,353,0,0,1720,1722,5,364,0,0,1721,1720,
1,0,0,0,1721,1722,1,0,0,0,1722,1731,1,0,0,0,1723,1724,5,200,0,0,1724,1726,
5,217,0,0,1725,1727,5,339,0,0,1726,1725,1,0,0,0,1726,1727,1,0,0,0,1727,1728,
1,0,0,0,1728,1729,5,323,0,0,1729,1731,5,353,0,0,1730,1716,1,0,0,0,1730,1723,
1,0,0,0,1731,1732,1,0,0,0,1732,1733,3,818,409,0,1733,1734,3,126,63,0,1734,
125,1,0,0,0,1735,1737,5,67,0,0,1736,1735,1,0,0,0,1736,1737,1,0,0,0,1737,
1738,1,0,0,0,1738,1745,3,128,64,0,1739,1745,3,118,59,0,1740,1742,5,67,0,
0,1741,1740,1,0,0,0,1741,1742,1,0,0,0,1742,1743,1,0,0,0,1743,1745,3,584,
292,0,1744,1736,1,0,0,0,1744,1739,1,0,0,0,1744,1741,1,0,0,0,1745,127,1,0,
0,0,1746,1747,5,96,0,0,1747,1750,5,196,0,0,1748,1751,3,816,408,0,1749,1751,
3,832,416,0,1750,1748,1,0,0,0,1750,1749,1,0,0,0,1751,129,1,0,0,0,1752,1754,
5,121,0,0,1753,1755,5,339,0,0,1754,1753,1,0,0,0,1754,1755,1,0,0,0,1755,1756,
1,0,0,0,1756,1757,5,323,0,0,1757,1759,5,353,0,0,1758,1760,5,365,0,0,1759,
1758,1,0,0,0,1759,1760,1,0,0,0,1760,1761,1,0,0,0,1761,1762,3,818,409,0,1762,
131,1,0,0,0,1763,1764,3,278,139,0,1764,133,1,0,0,0,1765,1768,3,136,68,0,
1766,1768,3,142,71,0,1767,1765,1,0,0,0,1767,1766,1,0,0,0,1768,135,1,0,0,
0,1769,1772,3,138,69,0,1770,1772,3,140,70,0,1771,1769,1,0,0,0,1771,1770,
1,0,0,0,1772,137,1,0,0,0,1773,1774,3,294,147,0,1774,1776,3,146,73,0,1775,
1777,3,248,124,0,1776,1775,1,0,0,0,1776,1777,1,0,0,0,1777,139,1,0,0,0,1778,
1779,3,294,147,0,1779,1780,3,52,26,0,1780,141,1,0,0,0,1781,1784,3,144,72,
0,1782,1784,3,52,26,0,1783,1781,1,0,0,0,1783,1782,1,0,0,0,1784,143,1,0,0,
0,1785,1787,3,146,73,0,1786,1788,3,248,124,0,1787,1786,1,0,0,0,1787,1788,
1,0,0,0,1788,145,1,0,0,0,1789,1791,3,148,74,0,1790,1789,1,0,0,0,1791,1792,
1,0,0,0,1792,1790,1,0,0,0,1792,1793,1,0,0,0,1793,147,1,0,0,0,1794,1797,3,
214,107,0,1795,1797,3,150,75,0,1796,1794,1,0,0,0,1796,1795,1,0,0,0,1797,
149,1,0,0,0,1798,1801,3,152,76,0,1799,1801,3,186,93,0,1800,1798,1,0,0,0,
1800,1799,1,0,0,0,1801,151,1,0,0,0,1802,1807,3,154,77,0,1803,1807,3,156,
78,0,1804,1807,3,170,85,0,1805,1807,3,180,90,0,1806,1802,1,0,0,0,1806,1803,
1,0,0,0,1806,1804,1,0,0,0,1806,1805,1,0,0,0,1807,153,1,0,0,0,1808,1809,5,
150,0,0,1809,1810,3,430,215,0,1810,155,1,0,0,0,1811,1812,5,227,0,0,1812,
1813,3,158,79,0,1813,157,1,0,0,0,1814,1817,3,160,80,0,1815,1816,5,34,0,0,
1816,1818,3,160,80,0,1817,1815,1,0,0,0,1818,1819,1,0,0,0,1819,1817,1,0,0,
0,1819,1820,1,0,0,0,1820,159,1,0,0,0,1821,1825,3,162,81,0,1822,1825,3,164,
82,0,1823,1825,3,166,83,0,1824,1821,1,0,0,0,1824,1822,1,0,0,0,1824,1823,
1,0,0,0,1825,161,1,0,0,0,1826,1827,3,298,149,0,1827,1828,5,54,0,0,1828,1829,
3,1288,644,0,1829,1830,5,36,0,0,1830,1831,3,908,454,0,1831,163,1,0,0,0,1832,
1833,3,298,149,0,1833,1834,5,36,0,0,1834,1836,5,40,0,0,1835,1837,3,400,200,
0,1836,1835,1,0,0,0,1836,1837,1,0,0,0,1837,1838,1,0,0,0,1838,1839,5,41,0,
0,1839,165,1,0,0,0,1840,1841,3,298,149,0,1841,1842,3,392,196,0,1842,1843,
3,168,84,0,1843,167,1,0,0,0,1844,1849,3,1286,643,0,1845,1846,5,29,0,0,1846,
1848,3,1286,643,0,1847,1845,1,0,0,0,1848,1851,1,0,0,0,1849,1847,1,0,0,0,
1849,1850,1,0,0,0,1850,169,1,0,0,0,1851,1849,1,0,0,0,1852,1853,5,216,0,0,
1853,1854,3,172,86,0,1854,171,1,0,0,0,1855,1858,3,174,87,0,1856,1857,5,34,
0,0,1857,1859,3,174,87,0,1858,1856,1,0,0,0,1859,1860,1,0,0,0,1860,1858,1,
0,0,0,1860,1861,1,0,0,0,1861,173,1,0,0,0,1862,1865,3,176,88,0,1863,1865,
3,178,89,0,1864,1862,1,0,0,0,1864,1863,1,0,0,0,1865,175,1,0,0,0,1866,1867,
3,298,149,0,1867,1868,5,54,0,0,1868,1869,3,1288,644,0,1869,177,1,0,0,0,1870,
1871,3,298,149,0,1871,1872,3,392,196,0,1872,1873,3,168,84,0,1873,179,1,0,
0,0,1874,1875,7,3,0,0,1875,1876,5,115,0,0,1876,1877,3,182,91,0,1877,181,
1,0,0,0,1878,1881,3,184,92,0,1879,1880,5,34,0,0,1880,1882,3,184,92,0,1881,
1879,1,0,0,0,1882,1883,1,0,0,0,1883,1881,1,0,0,0,1883,1884,1,0,0,0,1884,
183,1,0,0,0,1885,1886,3,908,454,0,1886,185,1,0,0,0,1887,1888,3,278,139,0,
1888,187,1,0,0,0,1889,1890,3,190,95,0,1890,189,1,0,0,0,1891,1892,6,95,-1,
0,1892,1893,3,196,98,0,1893,1900,1,0,0,0,1894,1895,10,2,0,0,1895,1896,3,
192,96,0,1896,1897,3,196,98,0,1897,1899,1,0,0,0,1898,1894,1,0,0,0,1899,1902,
1,0,0,0,1900,1898,1,0,0,0,1900,1901,1,0,0,0,1901,191,1,0,0,0,1902,1900,1,
0,0,0,1903,1906,3,194,97,0,1904,1906,5,202,0,0,1905,1903,1,0,0,0,1905,1904,
1,0,0,0,1906,193,1,0,0,0,1907,1908,7,4,0,0,1908,1909,3,558,279,0,1909,195,
1,0,0,0,1910,1911,3,198,99,0,1911,197,1,0,0,0,1912,1915,3,200,100,0,1913,
1915,3,210,105,0,1914,1912,1,0,0,0,1914,1913,1,0,0,0,1915,199,1,0,0,0,1916,
1918,3,202,101,0,1917,1916,1,0,0,0,1918,1919,1,0,0,0,1919,1917,1,0,0,0,1919,
1920,1,0,0,0,1920,1921,1,0,0,0,1921,1922,3,204,102,0,1922,1927,1,0,0,0,1923,
1927,3,206,103,0,1924,1927,3,208,104,0,1925,1927,3,260,130,0,1926,1917,1,
0,0,0,1926,1923,1,0,0,0,1926,1924,1,0,0,0,1926,1925,1,0,0,0,1927,201,1,0,
0,0,1928,1929,3,294,147,0,1929,1930,3,212,106,0,1930,203,1,0,0,0,1931,1932,
3,294,147,0,1932,1933,3,212,106,0,1933,1934,3,248,124,0,1934,205,1,0,0,0,
1935,1936,3,294,147,0,1936,1937,3,248,124,0,1937,207,1,0,0,0,1938,1939,3,
294,147,0,1939,1940,3,54,27,0,1940,209,1,0,0,0,1941,1943,3,212,106,0,1942,
1941,1,0,0,0,1942,1943,1,0,0,0,1943,1944,1,0,0,0,1944,1947,3,248,124,0,1945,
1947,3,54,27,0,1946,1942,1,0,0,0,1946,1945,1,0,0,0,1947,211,1,0,0,0,1948,
1952,3,214,107,0,1949,1951,3,214,107,0,1950,1949,1,0,0,0,1951,1954,1,0,0,
0,1952,1950,1,0,0,0,1952,1953,1,0,0,0,1953,213,1,0,0,0,1954,1952,1,0,0,0,
1955,1958,3,216,108,0,1956,1958,3,228,114,0,1957,1955,1,0,0,0,1957,1956,
1,0,0,0,1958,215,1,0,0,0,1959,1965,3,218,109,0,1960,1965,3,232,116,0,1961,
1965,3,238,119,0,1962,1965,3,230,115,0,1963,1965,3,246,123,0,1964,1959,1,
0,0,0,1964,1960,1,0,0,0,1964,1961,1,0,0,0,1964,1962,1,0,0,0,1964,1963,1,
0,0,0,1965,217,1,0,0,0,1966,1969,3,220,110,0,1967,1969,3,222,111,0,1968,
1966,1,0,0,0,1968,1967,1,0,0,0,1969,219,1,0,0,0,1970,1971,5,182,0,0,1971,
1972,3,306,153,0,1972,221,1,0,0,0,1973,1974,5,199,0,0,1974,1975,3,224,112,
0,1975,223,1,0,0,0,1976,1986,3,220,110,0,1977,1978,5,40,0,0,1978,1979,3,
226,113,0,1979,1980,5,41,0,0,1980,1986,1,0,0,0,1981,1982,5,44,0,0,1982,1983,
3,226,113,0,1983,1984,5,45,0,0,1984,1986,1,0,0,0,1985,1976,1,0,0,0,1985,
1977,1,0,0,0,1985,1981,1,0,0,0,1986,225,1,0,0,0,1987,1989,3,218,109,0,1988,
1987,1,0,0,0,1989,1990,1,0,0,0,1990,1988,1,0,0,0,1990,1991,1,0,0,0,1991,
227,1,0,0,0,1992,1993,3,278,139,0,1993,229,1,0,0,0,1994,1997,5,131,0,0,1995,
1998,3,530,265,0,1996,1998,3,834,417,0,1997,1995,1,0,0,0,1997,1996,1,0,0,
0,1998,231,1,0,0,0,1999,2000,5,169,0,0,2000,2001,3,234,117,0,2001,233,1,
0,0,0,2002,2005,3,236,118,0,2003,2004,5,34,0,0,2004,2006,3,236,118,0,2005,
2003,1,0,0,0,2006,2007,1,0,0,0,2007,2005,1,0,0,0,2007,2008,1,0,0,0,2008,
235,1,0,0,0,2009,2015,3,80,40,0,2010,2011,3,1310,655,0,2011,2012,5,36,0,
0,2012,2013,3,908,454,0,2013,2015,1,0,0,0,2014,2009,1,0,0,0,2014,2010,1,
0,0,0,2015,237,1,0,0,0,2016,2017,5,140,0,0,2017,2019,3,240,120,0,2018,2020,
3,244,122,0,2019,2018,1,0,0,0,2019,2020,1,0,0,0,2020,239,1,0,0,0,2021,2022,
3,242,121,0,2022,2023,3,1120,560,0,2023,241,1,0,0,0,2024,2025,3,1318,659,
0,2025,2026,5,149,0,0,2026,243,1,0,0,0,2027,2028,5,269,0,0,2028,2029,7,5,
0,0,2029,2030,3,1318,659,0,2030,245,1,0,0,0,2031,2033,3,550,275,0,2032,2034,
3,578,289,0,2033,2032,1,0,0,0,2033,2034,1,0,0,0,2034,2036,1,0,0,0,2035,2037,
3,576,288,0,2036,2035,1,0,0,0,2036,2037,1,0,0,0,2037,2044,1,0,0,0,2038,2040,
3,578,289,0,2039,2041,3,576,288,0,2040,2039,1,0,0,0,2040,2041,1,0,0,0,2041,
2044,1,0,0,0,2042,2044,3,576,288,0,2043,2031,1,0,0,0,2043,2038,1,0,0,0,2043,
2042,1,0,0,0,2044,247,1,0,0,0,2045,2047,3,250,125,0,2046,2048,3,246,123,
0,2047,2046,1,0,0,0,2047,2048,1,0,0,0,2048,2051,1,0,0,0,2049,2051,5,132,
0,0,2050,2045,1,0,0,0,2050,2049,1,0,0,0,2051,249,1,0,0,0,2052,2053,5,219,
0,0,2053,2054,3,252,126,0,2054,251,1,0,0,0,2055,2057,3,558,279,0,2056,2055,
1,0,0,0,2056,2057,1,0,0,0,2057,2060,1,0,0,0,2058,2061,5,30,0,0,2059,2061,
3,254,127,0,2060,2058,1,0,0,0,2060,2059,1,0,0,0,2061,2063,1,0,0,0,2062,2064,
3,542,271,0,2063,2062,1,0,0,0,2063,2064,1,0,0,0,2064,2068,1,0,0,0,2065,2066,
5,334,0,0,2066,2068,5,313,0,0,2067,2056,1,0,0,0,2067,2065,1,0,0,0,2068,253,
1,0,0,0,2069,2074,3,256,128,0,2070,2071,5,34,0,0,2071,2073,3,256,128,0,2072,
2070,1,0,0,0,2073,2076,1,0,0,0,2074,2072,1,0,0,0,2074,2075,1,0,0,0,2075,
255,1,0,0,0,2076,2074,1,0,0,0,2077,2079,3,926,463,0,2078,2080,3,258,129,
0,2079,2078,1,0,0,0,2079,2080,1,0,0,0,2080,257,1,0,0,0,2081,2082,5,67,0,
0,2082,2083,3,1318,659,0,2083,259,1,0,0,0,2084,2086,5,225,0,0,2085,2087,
3,558,279,0,2086,2085,1,0,0,0,2086,2087,1,0,0,0,2087,2090,1,0,0,0,2088,2091,
3,262,131,0,2089,2091,5,30,0,0,2090,2088,1,0,0,0,2090,2089,1,0,0,0,2091,
2111,1,0,0,0,2092,2094,3,270,135,0,2093,2095,3,530,265,0,2094,2093,1,0,0,
0,2094,2095,1,0,0,0,2095,2097,1,0,0,0,2096,2098,3,542,271,0,2097,2096,1,
0,0,0,2097,2098,1,0,0,0,2098,2100,1,0,0,0,2099,2101,3,268,134,0,2100,2099,
1,0,0,0,2100,2101,1,0,0,0,2101,2103,1,0,0,0,2102,2104,3,550,275,0,2103,2102,
1,0,0,0,2103,2104,1,0,0,0,2104,2106,1,0,0,0,2105,2107,3,578,289,0,2106,2105,
1,0,0,0,2106,2107,1,0,0,0,2107,2109,1,0,0,0,2108,2110,3,576,288,0,2109,2108,
1,0,0,0,2109,2110,1,0,0,0,2110,2112,1,0,0,0,2111,2092,1,0,0,0,2111,2112,
1,0,0,0,2112,261,1,0,0,0,2113,2116,3,264,132,0,2114,2115,5,34,0,0,2115,2117,
3,264,132,0,2116,2114,1,0,0,0,2117,2118,1,0,0,0,2118,2116,1,0,0,0,2118,2119,
1,0,0,0,2119,263,1,0,0,0,2120,2122,3,926,463,0,2121,2123,3,266,133,0,2122,
2121,1,0,0,0,2122,2123,1,0,0,0,2123,265,1,0,0,0,2124,2125,5,67,0,0,2125,
2126,3,1318,659,0,2126,267,1,0,0,0,2127,2128,5,143,0,0,2128,2129,3,834,417,
0,2129,269,1,0,0,0,2130,2131,5,141,0,0,2131,2134,3,272,136,0,2132,2134,3,
276,138,0,2133,2130,1,0,0,0,2133,2132,1,0,0,0,2134,271,1,0,0,0,2135,2140,
3,274,137,0,2136,2137,5,34,0,0,2137,2139,3,274,137,0,2138,2136,1,0,0,0,2139,
2142,1,0,0,0,2140,2138,1,0,0,0,2140,2141,1,0,0,0,2141,273,1,0,0,0,2142,2140,
1,0,0,0,2143,2144,3,86,43,0,2144,2145,3,218,109,0,2145,275,1,0,0,0,2146,
2147,5,141,0,0,2147,2153,3,54,27,0,2148,2149,5,141,0,0,2149,2150,3,86,43,
0,2150,2151,3,54,27,0,2151,2153,1,0,0,0,2152,2146,1,0,0,0,2152,2148,1,0,
0,0,2153,277,1,0,0,0,2154,2156,5,199,0,0,2155,2154,1,0,0,0,2155,2156,1,0,
0,0,2156,2157,1,0,0,0,2157,2158,5,84,0,0,2158,2159,3,280,140,0,2159,279,
1,0,0,0,2160,2163,3,282,141,0,2161,2163,3,288,144,0,2162,2160,1,0,0,0,2162,
2161,1,0,0,0,2163,281,1,0,0,0,2164,2166,3,284,142,0,2165,2164,1,0,0,0,2165,
2166,1,0,0,0,2166,2167,1,0,0,0,2167,2168,3,48,24,0,2168,283,1,0,0,0,2169,
2171,5,44,0,0,2170,2172,3,286,143,0,2171,2170,1,0,0,0,2171,2172,1,0,0,0,
2172,2173,1,0,0,0,2173,2174,5,45,0,0,2174,285,1,0,0,0,2175,2178,3,298,149,
0,2176,2177,5,34,0,0,2177,2179,3,298,149,0,2178,2176,1,0,0,0,2179,2180,1,
0,0,0,2180,2178,1,0,0,0,2180,2181,1,0,0,0,2181,287,1,0,0,0,2182,2183,3,824,
412,0,2183,2185,5,44,0,0,2184,2186,3,290,145,0,2185,2184,1,0,0,0,2185,2186,
1,0,0,0,2186,2187,1,0,0,0,2187,2188,5,45,0,0,2188,289,1,0,0,0,2189,2192,
3,292,146,0,2190,2191,5,34,0,0,2191,2193,3,292,146,0,2192,2190,1,0,0,0,2193,
2194,1,0,0,0,2194,2192,1,0,0,0,2194,2195,1,0,0,0,2195,291,1,0,0,0,2196,2197,
3,908,454,0,2197,293,1,0,0,0,2198,2199,5,261,0,0,2199,2200,3,86,43,0,2200,
295,1,0,0,0,2201,2202,5,71,0,0,2202,2203,3,794,397,0,2203,297,1,0,0,0,2204,
2205,3,1312,656,0,2205,299,1,0,0,0,2206,2207,3,298,149,0,2207,301,1,0,0,
0,2208,2209,3,298,149,0,2209,303,1,0,0,0,2210,2211,3,1292,646,0,2211,305,
1,0,0,0,2212,2214,3,314,157,0,2213,2215,3,308,154,0,2214,2213,1,0,0,0,2214,
2215,1,0,0,0,2215,307,1,0,0,0,2216,2217,5,272,0,0,2217,2218,3,310,155,0,
2218,309,1,0,0,0,2219,2222,3,312,156,0,2220,2221,5,34,0,0,2221,2223,3,312,
156,0,2222,2220,1,0,0,0,2223,2224,1,0,0,0,2224,2222,1,0,0,0,2224,2225,1,
0,0,0,2225,311,1,0,0,0,2226,2227,3,300,150,0,2227,2228,3,302,151,0,2228,
313,1,0,0,0,2229,2231,3,316,158,0,2230,2229,1,0,0,0,2230,2231,1,0,0,0,2231,
2232,1,0,0,0,2232,2234,3,326,163,0,2233,2235,3,332,166,0,2234,2233,1,0,0,
0,2234,2235,1,0,0,0,2235,2237,1,0,0,0,2236,2238,3,334,167,0,2237,2236,1,
0,0,0,2237,2238,1,0,0,0,2238,315,1,0,0,0,2239,2242,3,318,159,0,2240,2242,
3,320,160,0,2241,2239,1,0,0,0,2241,2240,1,0,0,0,2242,317,1,0,0,0,2243,2244,
5,343,0,0,2244,2245,3,322,161,0,2245,319,1,0,0,0,2246,2247,5,316,0,0,2247,
2248,3,324,162,0,2248,321,1,0,0,0,2249,2251,5,320,0,0,2250,2252,5,313,0,
0,2251,2250,1,0,0,0,2251,2252,1,0,0,0,2252,2255,1,0,0,0,2253,2255,5,321,
0,0,2254,2249,1,0,0,0,2254,2253,1,0,0,0,2255,323,1,0,0,0,2256,2258,3,1336,
668,0,2257,2259,5,313,0,0,2258,2257,1,0,0,0,2258,2259,1,0,0,0,2259,2262,
1,0,0,0,2260,2262,3,1338,669,0,2261,2256,1,0,0,0,2261,2260,1,0,0,0,2262,
325,1,0,0,0,2263,2268,3,328,164,0,2264,2265,5,34,0,0,2265,2267,3,328,164,
0,2266,2264,1,0,0,0,2267,2270,1,0,0,0,2268,2266,1,0,0,0,2268,2269,1,0,0,
0,2269,327,1,0,0,0,2270,2268,1,0,0,0,2271,2273,3,330,165,0,2272,2271,1,0,
0,0,2272,2273,1,0,0,0,2273,2275,1,0,0,0,2274,2276,3,336,168,0,2275,2274,
1,0,0,0,2275,2276,1,0,0,0,2276,2278,1,0,0,0,2277,2279,3,366,183,0,2278,2277,
1,0,0,0,2279,2280,1,0,0,0,2280,2278,1,0,0,0,2280,2281,1,0,0,0,2281,329,1,
0,0,0,2282,2283,3,1304,652,0,2283,2284,5,36,0,0,2284,331,1,0,0,0,2285,2286,
5,325,0,0,2286,2287,3,336,168,0,2287,333,1,0,0,0,2288,2289,5,268,0,0,2289,
2290,3,834,417,0,2290,335,1,0,0,0,2291,2294,3,338,169,0,2292,2294,3,342,
171,0,2293,2291,1,0,0,0,2293,2292,1,0,0,0,2294,337,1,0,0,0,2295,2297,3,340,
170,0,2296,2298,3,346,173,0,2297,2296,1,0,0,0,2297,2298,1,0,0,0,2298,339,
1,0,0,0,2299,2300,7,6,0,0,2300,341,1,0,0,0,2301,2305,3,344,172,0,2302,2305,
3,348,174,0,2303,2305,3,352,176,0,2304,2301,1,0,0,0,2304,2302,1,0,0,0,2304,
2303,1,0,0,0,2305,343,1,0,0,0,2306,2308,5,62,0,0,2307,2309,3,340,170,0,2308,
2307,1,0,0,0,2308,2309,1,0,0,0,2309,2311,1,0,0,0,2310,2312,3,346,173,0,2311,
2310,1,0,0,0,2311,2312,1,0,0,0,2312,345,1,0,0,0,2313,2314,7,7,0,0,2314,347,
1,0,0,0,2315,2317,5,65,0,0,2316,2318,3,350,175,0,2317,2316,1,0,0,0,2317,
2318,1,0,0,0,2318,2320,1,0,0,0,2319,2321,3,340,170,0,2320,2319,1,0,0,0,2320,
2321,1,0,0,0,2321,2323,1,0,0,0,2322,2324,3,346,173,0,2323,2322,1,0,0,0,2323,
2324,1,0,0,0,2324,349,1,0,0,0,2325,2326,3,902,451,0,2326,351,1,0,0,0,2327,
2332,3,354,177,0,2328,2332,3,356,178,0,2329,2332,3,358,179,0,2330,2332,3,
360,180,0,2331,2327,1,0,0,0,2331,2328,1,0,0,0,2331,2329,1,0,0,0,2331,2330,
1,0,0,0,2332,353,1,0,0,0,2333,2334,5,62,0,0,2334,2336,5,344,0,0,2335,2337,
3,340,170,0,2336,2335,1,0,0,0,2336,2337,1,0,0,0,2337,2339,1,0,0,0,2338,2340,
3,346,173,0,2339,2338,1,0,0,0,2339,2340,1,0,0,0,2340,355,1,0,0,0,2341,2342,
5,65,0,0,2342,2344,5,344,0,0,2343,2345,3,340,170,0,2344,2343,1,0,0,0,2344,
2345,1,0,0,0,2345,2347,1,0,0,0,2346,2348,3,346,173,0,2347,2346,1,0,0,0,2347,
2348,1,0,0,0,2348,357,1,0,0,0,2349,2350,5,344,0,0,2350,2352,3,350,175,0,
2351,2353,3,340,170,0,2352,2351,1,0,0,0,2352,2353,1,0,0,0,2353,2355,1,0,
0,0,2354,2356,3,346,173,0,2355,2354,1,0,0,0,2355,2356,1,0,0,0,2356,359,1,
0,0,0,2357,2358,5,344,0,0,2358,2360,3,364,182,0,2359,2361,3,340,170,0,2360,
2359,1,0,0,0,2360,2361,1,0,0,0,2361,2363,1,0,0,0,2362,2364,3,346,173,0,2363,
2362,1,0,0,0,2363,2364,1,0,0,0,2364,2365,1,0,0,0,2365,2366,3,362,181,0,2366,
361,1,0,0,0,2367,2368,7,8,0,0,2368,363,1,0,0,0,2369,2370,3,902,451,0,2370,
365,1,0,0,0,2371,2375,3,372,186,0,2372,2375,3,368,184,0,2373,2375,3,370,
185,0,2374,2371,1,0,0,0,2374,2372,1,0,0,0,2374,2373,1,0,0,0,2375,367,1,0,
0,0,2376,2381,3,372,186,0,2377,2378,5,58,0,0,2378,2380,3,372,186,0,2379,
2377,1,0,0,0,2380,2383,1,0,0,0,2381,2379,1,0,0,0,2381,2382,1,0,0,0,2382,
369,1,0,0,0,2383,2381,1,0,0,0,2384,2389,3,372,186,0,2385,2386,5,52,0,0,2386,
2388,3,372,186,0,2387,2385,1,0,0,0,2388,2391,1,0,0,0,2389,2387,1,0,0,0,2389,
2390,1,0,0,0,2390,371,1,0,0,0,2391,2389,1,0,0,0,2392,2396,3,374,187,0,2393,
2395,3,374,187,0,2394,2393,1,0,0,0,2395,2398,1,0,0,0,2396,2394,1,0,0,0,2396,
2397,1,0,0,0,2397,373,1,0,0,0,2398,2396,1,0,0,0,2399,2403,3,380,190,0,2400,
2403,3,376,188,0,2401,2403,3,378,189,0,2402,2399,1,0,0,0,2402,2400,1,0,0,
0,2402,2401,1,0,0,0,2403,375,1,0,0,0,2404,2405,3,380,190,0,2405,2406,3,464,
232,0,2406,377,1,0,0,0,2407,2408,3,380,190,0,2408,2409,5,46,0,0,2409,379,
1,0,0,0,2410,2414,3,382,191,0,2411,2414,3,424,212,0,2412,2414,3,474,237,
0,2413,2410,1,0,0,0,2413,2411,1,0,0,0,2413,2412,1,0,0,0,2414,381,1,0,0,0,
2415,2418,3,384,192,0,2416,2418,3,404,202,0,2417,2415,1,0,0,0,2417,2416,
1,0,0,0,2418,383,1,0,0,0,2419,2420,5,44,0,0,2420,2421,3,386,193,0,2421,2422,
5,45,0,0,2422,385,1,0,0,0,2423,2425,3,388,194,0,2424,2423,1,0,0,0,2424,2425,
1,0,0,0,2425,2427,1,0,0,0,2426,2428,3,390,195,0,2427,2426,1,0,0,0,2427,2428,
1,0,0,0,2428,2430,1,0,0,0,2429,2431,3,394,197,0,2430,2429,1,0,0,0,2430,2431,
1,0,0,0,2431,387,1,0,0,0,2432,2434,5,348,0,0,2433,2432,1,0,0,0,2433,2434,
1,0,0,0,2434,2435,1,0,0,0,2435,2436,3,1302,651,0,2436,389,1,0,0,0,2437,2438,
3,392,196,0,2438,2439,3,450,225,0,2439,391,1,0,0,0,2440,2443,5,167,0,0,2441,
2443,5,32,0,0,2442,2440,1,0,0,0,2442,2441,1,0,0,0,2443,393,1,0,0,0,2444,
2447,3,396,198,0,2445,2447,3,398,199,0,2446,2444,1,0,0,0,2446,2445,1,0,0,
0,2447,395,1,0,0,0,2448,2449,5,268,0,0,2449,2450,3,834,417,0,2450,397,1,
0,0,0,2451,2452,5,40,0,0,2452,2453,3,400,200,0,2453,2454,5,41,0,0,2454,399,
1,0,0,0,2455,2460,3,402,201,0,2456,2457,5,34,0,0,2457,2459,3,402,201,0,2458,
2456,1,0,0,0,2459,2462,1,0,0,0,2460,2458,1,0,0,0,2460,2461,1,0,0,0,2461,
401,1,0,0,0,2462,2460,1,0,0,0,2463,2464,3,1288,644,0,2464,2465,5,32,0,0,
2465,2466,3,908,454,0,2466,403,1,0,0,0,2467,2470,3,406,203,0,2468,2470,3,
422,211,0,2469,2467,1,0,0,0,2469,2468,1,0,0,0,2470,405,1,0,0,0,2471,2479,
3,408,204,0,2472,2479,3,410,205,0,2473,2479,3,412,206,0,2474,2479,3,414,
207,0,2475,2479,3,416,208,0,2476,2479,3,418,209,0,2477,2479,3,420,210,0,
2478,2471,1,0,0,0,2478,2472,1,0,0,0,2478,2473,1,0,0,0,2478,2474,1,0,0,0,
2478,2475,1,0,0,0,2478,2476,1,0,0,0,2478,2477,1,0,0,0,2479,407,1,0,0,0,2480,
2481,5,3,0,0,2481,2482,3,386,193,0,2482,2483,5,11,0,0,2483,409,1,0,0,0,2484,
2485,5,19,0,0,2485,2486,3,386,193,0,2486,2487,5,12,0,0,2487,411,1,0,0,0,
2488,2489,5,8,0,0,2489,2490,3,386,193,0,2490,2491,5,13,0,0,2491,413,1,0,
0,0,2492,2493,5,4,0,0,2493,2494,3,386,193,0,2494,2495,5,12,0,0,2495,415,
1,0,0,0,2496,2497,5,19,0,0,2497,2498,3,386,193,0,2498,2499,5,13,0,0,2499,
417,1,0,0,0,2500,2501,5,3,0,0,2501,2502,3,386,193,0,2502,2503,5,13,0,0,2503,
419,1,0,0,0,2504,2505,5,8,0,0,2505,2506,3,386,193,0,2506,2507,5,11,0,0,2507,
421,1,0,0,0,2508,2509,7,9,0,0,2509,423,1,0,0,0,2510,2512,5,44,0,0,2511,2513,
3,426,213,0,2512,2511,1,0,0,0,2512,2513,1,0,0,0,2513,2515,1,0,0,0,2514,2516,
3,338,169,0,2515,2514,1,0,0,0,2515,2516,1,0,0,0,2516,2517,1,0,0,0,2517,2519,
3,366,183,0,2518,2520,3,428,214,0,2519,2518,1,0,0,0,2519,2520,1,0,0,0,2520,
2521,1,0,0,0,2521,2522,5,45,0,0,2522,425,1,0,0,0,2523,2524,3,1306,653,0,
2524,2525,5,36,0,0,2525,427,1,0,0,0,2526,2527,5,268,0,0,2527,2528,3,834,
417,0,2528,429,1,0,0,0,2529,2530,3,432,216,0,2530,431,1,0,0,0,2531,2536,
3,434,217,0,2532,2533,5,34,0,0,2533,2535,3,434,217,0,2534,2532,1,0,0,0,2535,
2538,1,0,0,0,2536,2534,1,0,0,0,2536,2537,1,0,0,0,2537,433,1,0,0,0,2538,2536,
1,0,0,0,2539,2545,3,436,218,0,2540,2541,3,438,219,0,2541,2542,3,436,218,
0,2542,2544,1,0,0,0,2543,2540,1,0,0,0,2544,2547,1,0,0,0,2545,2543,1,0,0,
0,2545,2546,1,0,0,0,2546,435,1,0,0,0,2547,2545,1,0,0,0,2548,2550,5,44,0,
0,2549,2551,3,446,223,0,2550,2549,1,0,0,0,2550,2551,1,0,0,0,2551,2552,1,
0,0,0,2552,2553,5,45,0,0,2553,437,1,0,0,0,2554,2558,3,440,220,0,2555,2558,
3,442,221,0,2556,2558,3,444,222,0,2557,2554,1,0,0,0,2557,2555,1,0,0,0,2557,
2556,1,0,0,0,2558,439,1,0,0,0,2559,2560,5,3,0,0,2560,2561,3,446,223,0,2561,
2562,5,11,0,0,2562,441,1,0,0,0,2563,2564,5,8,0,0,2564,2565,3,446,223,0,2565,
2566,5,13,0,0,2566,443,1,0,0,0,2567,2568,5,19,0,0,2568,2569,3,446,223,0,
2569,2570,5,12,0,0,2570,445,1,0,0,0,2571,2573,3,388,194,0,2572,2574,3,448,
224,0,2573,2572,1,0,0,0,2573,2574,1,0,0,0,2574,2580,1,0,0,0,2575,2577,3,
388,194,0,2576,2575,1,0,0,0,2576,2577,1,0,0,0,2577,2578,1,0,0,0,2578,2580,
3,448,224,0,2579,2571,1,0,0,0,2579,2576,1,0,0,0,2580,447,1,0,0,0,2581,2582,
3,392,196,0,2582,2583,3,168,84,0,2583,2596,1,0,0,0,2584,2585,3,392,196,0,
2585,2586,3,168,84,0,2586,2587,3,398,199,0,2587,2596,1,0,0,0,2588,2589,3,
392,196,0,2589,2590,3,398,199,0,2590,2596,1,0,0,0,2591,2592,3,392,196,0,
2592,2593,3,168,84,0,2593,2594,3,398,199,0,2594,2596,1,0,0,0,2595,2581,1,
0,0,0,2595,2584,1,0,0,0,2595,2588,1,0,0,0,2595,2591,1,0,0,0,2596,449,1,0,
0,0,2597,2602,3,452,226,0,2598,2599,5,52,0,0,2599,2601,3,452,226,0,2600,
2598,1,0,0,0,2601,2604,1,0,0,0,2602,2600,1,0,0,0,2602,2603,1,0,0,0,2603,
451,1,0,0,0,2604,2602,1,0,0,0,2605,2610,3,454,227,0,2606,2607,5,29,0,0,2607,
2609,3,454,227,0,2608,2606,1,0,0,0,2609,2612,1,0,0,0,2610,2608,1,0,0,0,2610,
2611,1,0,0,0,2611,453,1,0,0,0,2612,2610,1,0,0,0,2613,2616,3,458,229,0,2614,
2616,3,456,228,0,2615,2613,1,0,0,0,2615,2614,1,0,0,0,2616,455,1,0,0,0,2617,
2618,5,37,0,0,2618,2619,3,458,229,0,2619,457,1,0,0,0,2620,2624,3,1286,643,
0,2621,2624,3,460,230,0,2622,2624,3,462,231,0,2623,2620,1,0,0,0,2623,2621,
1,0,0,0,2623,2622,1,0,0,0,2624,459,1,0,0,0,2625,2626,5,53,0,0,2626,461,1,
0,0,0,2627,2628,5,44,0,0,2628,2629,3,450,225,0,2629,2630,5,45,0,0,2630,463,
1,0,0,0,2631,2636,5,30,0,0,2632,2636,5,26,0,0,2633,2636,3,466,233,0,2634,
2636,3,468,234,0,2635,2631,1,0,0,0,2635,2632,1,0,0,0,2635,2633,1,0,0,0,2635,
2634,1,0,0,0,2636,465,1,0,0,0,2637,2638,5,40,0,0,2638,2639,5,379,0,0,2639,
2640,5,41,0,0,2640,467,1,0,0,0,2641,2643,5,40,0,0,2642,2644,3,470,235,0,
2643,2642,1,0,0,0,2643,2644,1,0,0,0,2644,2645,1,0,0,0,2645,2647,5,34,0,0,
2646,2648,3,472,236,0,2647,2646,1,0,0,0,2647,2648,1,0,0,0,2648,2649,1,0,
0,0,2649,2650,5,41,0,0,2650,469,1,0,0,0,2651,2652,5,379,0,0,2652,471,1,0,
0,0,2653,2654,5,379,0,0,2654,473,1,0,0,0,2655,2663,3,476,238,0,2656,2663,
3,478,239,0,2657,2663,3,480,240,0,2658,2663,3,482,241,0,2659,2663,3,484,
242,0,2660,2663,3,486,243,0,2661,2663,3,488,244,0,2662,2655,1,0,0,0,2662,
2656,1,0,0,0,2662,2657,1,0,0,0,2662,2658,1,0,0,0,2662,2659,1,0,0,0,2662,
2660,1,0,0,0,2662,2661,1,0,0,0,2663,475,1,0,0,0,2664,2665,5,6,0,0,2665,2666,
3,490,245,0,2666,2667,5,15,0,0,2667,477,1,0,0,0,2668,2669,5,21,0,0,2669,
2670,3,490,245,0,2670,2671,5,17,0,0,2671,479,1,0,0,0,2672,2673,5,9,0,0,2673,
2674,3,490,245,0,2674,2675,5,16,0,0,2675,481,1,0,0,0,2676,2677,5,7,0,0,2677,
2678,3,490,245,0,2678,2679,5,17,0,0,2679,483,1,0,0,0,2680,2681,5,21,0,0,
2681,2682,3,490,245,0,2682,2683,5,18,0,0,2683,485,1,0,0,0,2684,2685,5,6,
0,0,2685,2686,3,490,245,0,2686,2687,5,16,0,0,2687,487,1,0,0,0,2688,2689,
5,9,0,0,2689,2690,3,490,245,0,2690,2691,5,15,0,0,2691,489,1,0,0,0,2692,2696,
3,496,248,0,2693,2696,3,492,246,0,2694,2696,3,494,247,0,2695,2692,1,0,0,
0,2695,2693,1,0,0,0,2695,2694,1,0,0,0,2696,491,1,0,0,0,2697,2702,3,496,248,
0,2698,2699,5,52,0,0,2699,2701,3,496,248,0,2700,2698,1,0,0,0,2701,2704,1,
0,0,0,2702,2700,1,0,0,0,2702,2703,1,0,0,0,2703,493,1,0,0,0,2704,2702,1,0,
0,0,2705,2710,3,496,248,0,2706,2707,5,58,0,0,2707,2709,3,496,248,0,2708,
2706,1,0,0,0,2709,2712,1,0,0,0,2710,2708,1,0,0,0,2710,2711,1,0,0,0,2711,
495,1,0,0,0,2712,2710,1,0,0,0,2713,2717,3,498,249,0,2714,2716,3,498,249,
0,2715,2714,1,0,0,0,2716,2719,1,0,0,0,2717,2715,1,0,0,0,2717,2718,1,0,0,
0,2718,497,1,0,0,0,2719,2717,1,0,0,0,2720,2725,3,500,250,0,2721,2722,5,29,
0,0,2722,2724,3,500,250,0,2723,2721,1,0,0,0,2724,2727,1,0,0,0,2725,2723,
1,0,0,0,2725,2726,1,0,0,0,2726,499,1,0,0,0,2727,2725,1,0,0,0,2728,2732,3,
506,253,0,2729,2732,3,502,251,0,2730,2732,3,504,252,0,2731,2728,1,0,0,0,
2731,2729,1,0,0,0,2731,2730,1,0,0,0,2732,501,1,0,0,0,2733,2734,3,506,253,
0,2734,2735,3,464,232,0,2735,503,1,0,0,0,2736,2737,3,506,253,0,2737,2738,
5,46,0,0,2738,505,1,0,0,0,2739,2742,3,508,254,0,2740,2742,3,524,262,0,2741,
2739,1,0,0,0,2741,2740,1,0,0,0,2742,507,1,0,0,0,2743,2751,3,510,255,0,2744,
2751,3,512,256,0,2745,2751,3,514,257,0,2746,2751,3,516,258,0,2747,2751,3,
518,259,0,2748,2751,3,520,260,0,2749,2751,3,522,261,0,2750,2743,1,0,0,0,
2750,2744,1,0,0,0,2750,2745,1,0,0,0,2750,2746,1,0,0,0,2750,2747,1,0,0,0,
2750,2748,1,0,0,0,2750,2749,1,0,0,0,2751,509,1,0,0,0,2752,2753,5,38,0,0,
2753,2754,3,524,262,0,2754,511,1,0,0,0,2755,2756,5,50,0,0,2756,2757,3,524,
262,0,2757,513,1,0,0,0,2758,2759,3,524,262,0,2759,2760,5,39,0,0,2760,515,
1,0,0,0,2761,2762,5,2,0,0,2762,2763,3,524,262,0,2763,517,1,0,0,0,2764,2765,
5,50,0,0,2765,2766,3,524,262,0,2766,2767,5,39,0,0,2767,519,1,0,0,0,2768,
2769,5,38,0,0,2769,2770,3,524,262,0,2770,2771,5,39,0,0,2771,521,1,0,0,0,
2772,2773,5,27,0,0,2773,2774,3,524,262,0,2774,523,1,0,0,0,2775,2778,3,528,
264,0,2776,2778,3,526,263,0,2777,2775,1,0,0,0,2777,2776,1,0,0,0,2778,525,
1,0,0,0,2779,2780,5,37,0,0,2780,2781,3,528,264,0,2781,527,1,0,0,0,2782,2788,
3,1286,643,0,2783,2784,5,44,0,0,2784,2785,3,490,245,0,2785,2786,5,45,0,0,
2786,2788,1,0,0,0,2787,2782,1,0,0,0,2787,2783,1,0,0,0,2788,529,1,0,0,0,2789,
2790,5,268,0,0,2790,2791,3,834,417,0,2791,531,1,0,0,0,2792,2793,5,272,0,
0,2793,2794,3,534,267,0,2794,533,1,0,0,0,2795,2798,3,536,268,0,2796,2797,
5,34,0,0,2797,2799,3,536,268,0,2798,2796,1,0,0,0,2799,2800,1,0,0,0,2800,
2798,1,0,0,0,2800,2801,1,0,0,0,2801,535,1,0,0,0,2802,2804,3,538,269,0,2803,
2805,3,540,270,0,2804,2803,1,0,0,0,2804,2805,1,0,0,0,2805,537,1,0,0,0,2806,
2807,3,1290,645,0,2807,539,1,0,0,0,2808,2809,5,67,0,0,2809,2810,3,1312,656,
0,2810,541,1,0,0,0,2811,2812,5,142,0,0,2812,2813,5,81,0,0,2813,2814,3,544,
272,0,2814,543,1,0,0,0,2815,2818,3,546,273,0,2816,2817,5,34,0,0,2817,2819,
3,546,273,0,2818,2816,1,0,0,0,2819,2820,1,0,0,0,2820,2818,1,0,0,0,2820,2821,
1,0,0,0,2821,2824,1,0,0,0,2822,2824,3,548,274,0,2823,2815,1,0,0,0,2823,2822,
1,0,0,0,2824,545,1,0,0,0,2825,2826,3,298,149,0,2826,547,1,0,0,0,2827,2828,
5,44,0,0,2828,2829,5,45,0,0,2829,549,1,0,0,0,2830,2831,5,201,0,0,2831,2832,
5,81,0,0,2832,2833,3,566,283,0,2833,551,1,0,0,0,2834,2835,5,100,0,0,2835,
2836,5,44,0,0,2836,2837,5,30,0,0,2837,2841,5,45,0,0,2838,2841,3,554,277,
0,2839,2841,3,560,280,0,2840,2834,1,0,0,0,2840,2838,1,0,0,0,2840,2839,1,
0,0,0,2841,553,1,0,0,0,2842,2843,3,556,278,0,2843,2845,5,44,0,0,2844,2846,
3,558,279,0,2845,2844,1,0,0,0,2845,2846,1,0,0,0,2846,2847,1,0,0,0,2847,2848,
3,908,454,0,2848,2849,5,45,0,0,2849,555,1,0,0,0,2850,2851,7,10,0,0,2851,
557,1,0,0,0,2852,2853,7,11,0,0,2853,559,1,0,0,0,2854,2855,7,12,0,0,2855,
561,1,0,0,0,2856,2858,3,558,279,0,2857,2856,1,0,0,0,2857,2858,1,0,0,0,2858,
2859,1,0,0,0,2859,2860,3,944,472,0,2860,563,1,0,0,0,2861,2862,3,944,472,
0,2862,565,1,0,0,0,2863,2866,3,568,284,0,2864,2865,5,34,0,0,2865,2867,3,
568,284,0,2866,2864,1,0,0,0,2867,2868,1,0,0,0,2868,2866,1,0,0,0,2868,2869,
1,0,0,0,2869,567,1,0,0,0,2870,2872,3,570,285,0,2871,2873,3,572,286,0,2872,
2871,1,0,0,0,2872,2873,1,0,0,0,2873,2875,1,0,0,0,2874,2876,3,574,287,0,2875,
2874,1,0,0,0,2875,2876,1,0,0,0,2876,569,1,0,0,0,2877,2878,3,926,463,0,2878,
571,1,0,0,0,2879,2880,7,13,0,0,2880,573,1,0,0,0,2881,2882,5,193,0,0,2882,
2886,5,322,0,0,2883,2884,5,193,0,0,2884,2886,5,329,0,0,2885,2881,1,0,0,0,
2885,2883,1,0,0,0,2886,575,1,0,0,0,2887,2888,5,171,0,0,2888,2889,3,902,451,
0,2889,577,1,0,0,0,2890,2891,3,580,290,0,2891,2892,3,902,451,0,2892,579,
1,0,0,0,2893,2894,7,14,0,0,2894,581,1,0,0,0,2895,2897,5,339,0,0,2896,2895,
1,0,0,0,2896,2897,1,0,0,0,2897,2898,1,0,0,0,2898,2899,5,323,0,0,2899,2900,
5,353,0,0,2900,2901,3,584,292,0,2901,583,1,0,0,0,2902,2903,5,40,0,0,2903,
2904,3,586,293,0,2904,2905,5,41,0,0,2905,585,1,0,0,0,2906,2907,3,588,294,
0,2907,587,1,0,0,0,2908,2913,3,590,295,0,2909,2910,5,34,0,0,2910,2912,3,
590,295,0,2911,2909,1,0,0,0,2912,2915,1,0,0,0,2913,2911,1,0,0,0,2913,2914,
1,0,0,0,2914,589,1,0,0,0,2915,2913,1,0,0,0,2916,2919,3,592,296,0,2917,2919,
3,606,303,0,2918,2916,1,0,0,0,2918,2917,1,0,0,0,2919,591,1,0,0,0,2920,2925,
3,594,297,0,2921,2922,3,1340,670,0,2922,2923,3,596,298,0,2923,2925,1,0,0,
0,2924,2920,1,0,0,0,2924,2921,1,0,0,0,2925,593,1,0,0,0,2926,2927,5,44,0,
0,2927,2928,3,598,299,0,2928,2929,3,600,300,0,2929,2930,5,45,0,0,2930,595,
1,0,0,0,2931,2933,5,353,0,0,2932,2931,1,0,0,0,2932,2933,1,0,0,0,2933,2934,
1,0,0,0,2934,2936,3,598,299,0,2935,2937,3,600,300,0,2936,2935,1,0,0,0,2936,
2937,1,0,0,0,2937,2940,1,0,0,0,2938,2940,3,600,300,0,2939,2932,1,0,0,0,2939,
2938,1,0,0,0,2940,597,1,0,0,0,2941,2942,3,1278,639,0,2942,599,1,0,0,0,2943,
2949,3,602,301,0,2944,2949,3,604,302,0,2945,2946,3,602,301,0,2946,2947,3,
604,302,0,2947,2949,1,0,0,0,2948,2943,1,0,0,0,2948,2944,1,0,0,0,2948,2945,
1,0,0,0,2949,601,1,0,0,0,2950,2951,3,672,336,0,2951,603,1,0,0,0,2952,2953,
3,674,337,0,2953,605,1,0,0,0,2954,2962,3,608,304,0,2955,2957,3,650,325,0,
2956,2955,1,0,0,0,2956,2957,1,0,0,0,2957,2958,1,0,0,0,2958,2959,3,1336,668,
0,2959,2960,3,610,305,0,2960,2962,1,0,0,0,2961,2954,1,0,0,0,2961,2956,1,
0,0,0,2962,607,1,0,0,0,2963,2966,3,620,310,0,2964,2966,3,636,318,0,2965,
2963,1,0,0,0,2965,2964,1,0,0,0,2966,609,1,0,0,0,2967,2969,5,353,0,0,2968,
2967,1,0,0,0,2968,2969,1,0,0,0,2969,2970,1,0,0,0,2970,2971,3,612,306,0,2971,
2972,3,614,307,0,2972,2973,3,652,326,0,2973,2978,1,0,0,0,2974,2975,3,614,
307,0,2975,2976,3,652,326,0,2976,2978,1,0,0,0,2977,2968,1,0,0,0,2977,2974,
1,0,0,0,2978,611,1,0,0,0,2979,2980,3,1278,639,0,2980,613,1,0,0,0,2981,2987,
3,616,308,0,2982,2987,3,618,309,0,2983,2984,3,616,308,0,2984,2985,3,618,
309,0,2985,2987,1,0,0,0,2986,2981,1,0,0,0,2986,2982,1,0,0,0,2986,2983,1,
0,0,0,2987,615,1,0,0,0,2988,2989,3,672,336,0,2989,617,1,0,0,0,2990,2991,
3,674,337,0,2991,619,1,0,0,0,2992,2996,3,622,311,0,2993,2996,3,624,312,0,
2994,2996,3,626,313,0,2995,2992,1,0,0,0,2995,2993,1,0,0,0,2995,2994,1,0,
0,0,2996,621,1,0,0,0,2997,2998,3,646,323,0,2998,2999,3,628,314,0,2999,3000,
3,648,324,0,3000,623,1,0,0,0,3001,3002,3,648,324,0,3002,3003,3,630,315,0,
3003,3004,3,646,323,0,3004,625,1,0,0,0,3005,3006,3,646,323,0,3006,3007,3,
632,316,0,3007,3008,3,648,324,0,3008,627,1,0,0,0,3009,3010,5,8,0,0,3010,
3011,3,634,317,0,3011,3012,5,13,0,0,3012,629,1,0,0,0,3013,3014,5,3,0,0,3014,
3015,3,634,317,0,3015,3016,5,11,0,0,3016,631,1,0,0,0,3017,3018,5,19,0,0,
3018,3019,3,634,317,0,3019,3020,5,12,0,0,3020,633,1,0,0,0,3021,3022,3,612,
306,0,3022,3023,3,614,307,0,3023,635,1,0,0,0,3024,3028,3,638,319,0,3025,
3028,3,640,320,0,3026,3028,3,642,321,0,3027,3024,1,0,0,0,3027,3025,1,0,0,
0,3027,3026,1,0,0,0,3028,637,1,0,0,0,3029,3030,3,646,323,0,3030,3031,5,10,
0,0,3031,3032,3,648,324,0,3032,639,1,0,0,0,3033,3034,3,648,324,0,3034,3035,
5,1,0,0,3035,3036,3,646,323,0,3036,641,1,0,0,0,3037,3038,3,646,323,0,3038,
3039,5,50,0,0,3039,3040,3,648,324,0,3040,643,1,0,0,0,3041,3044,3,646,323,
0,3042,3044,3,648,324,0,3043,3041,1,0,0,0,3043,3042,1,0,0,0,3044,645,1,0,
0,0,3045,3046,5,44,0,0,3046,3047,3,668,334,0,3047,3048,5,45,0,0,3048,3055,
1,0,0,0,3049,3051,5,44,0,0,3050,3052,3,600,300,0,3051,3050,1,0,0,0,3051,
3052,1,0,0,0,3052,3053,1,0,0,0,3053,3055,5,45,0,0,3054,3045,1,0,0,0,3054,
3049,1,0,0,0,3055,647,1,0,0,0,3056,3057,5,44,0,0,3057,3058,3,670,335,0,3058,
3059,5,45,0,0,3059,3066,1,0,0,0,3060,3062,5,44,0,0,3061,3063,3,600,300,0,
3062,3061,1,0,0,0,3062,3063,1,0,0,0,3063,3064,1,0,0,0,3064,3066,5,45,0,0,
3065,3056,1,0,0,0,3065,3060,1,0,0,0,3066,649,1,0,0,0,3067,3068,7,15,0,0,
3068,651,1,0,0,0,3069,3070,5,314,0,0,3070,3071,3,654,327,0,3071,653,1,0,
0,0,3072,3077,3,656,328,0,3073,3077,3,658,329,0,3074,3077,3,660,330,0,3075,
3077,3,636,318,0,3076,3072,1,0,0,0,3076,3073,1,0,0,0,3076,3074,1,0,0,0,3076,
3075,1,0,0,0,3077,655,1,0,0,0,3078,3079,5,44,0,0,3079,3080,3,668,334,0,3080,
3081,3,662,331,0,3081,3082,3,670,335,0,3082,3083,5,45,0,0,3083,657,1,0,0,
0,3084,3085,5,44,0,0,3085,3086,3,670,335,0,3086,3087,3,664,332,0,3087,3088,
3,668,334,0,3088,3089,5,45,0,0,3089,659,1,0,0,0,3090,3091,5,44,0,0,3091,
3092,3,668,334,0,3092,3093,3,666,333,0,3093,3094,3,670,335,0,3094,3095,5,
45,0,0,3095,661,1,0,0,0,3096,3097,7,16,0,0,3097,663,1,0,0,0,3098,3099,5,
1,0,0,3099,665,1,0,0,0,3100,3101,7,17,0,0,3101,667,1,0,0,0,3102,3103,3,1278,
639,0,3103,669,1,0,0,0,3104,3105,3,1278,639,0,3105,671,1,0,0,0,3106,3107,
5,326,0,0,3107,3115,3,1286,643,0,3108,3109,5,328,0,0,3109,3115,3,168,84,
0,3110,3111,5,167,0,0,3111,3115,3,168,84,0,3112,3113,5,32,0,0,3113,3115,
3,168,84,0,3114,3106,1,0,0,0,3114,3108,1,0,0,0,3114,3110,1,0,0,0,3114,3112,
1,0,0,0,3115,673,1,0,0,0,3116,3118,5,40,0,0,3117,3119,3,676,338,0,3118,3117,
1,0,0,0,3118,3119,1,0,0,0,3119,3120,1,0,0,0,3120,3121,5,41,0,0,3121,675,
1,0,0,0,3122,3127,3,678,339,0,3123,3124,5,34,0,0,3124,3126,3,678,339,0,3125,
3123,1,0,0,0,3126,3129,1,0,0,0,3127,3125,1,0,0,0,3127,3128,1,0,0,0,3128,
677,1,0,0,0,3129,3127,1,0,0,0,3130,3132,3,1288,644,0,3131,3133,3,686,343,
0,3132,3131,1,0,0,0,3132,3133,1,0,0,0,3133,3134,1,0,0,0,3134,3135,3,680,
340,0,3135,679,1,0,0,0,3136,3137,3,684,342,0,3137,681,1,0,0,0,3138,3140,
5,312,0,0,3139,3138,1,0,0,0,3139,3140,1,0,0,0,3140,3141,1,0,0,0,3141,3142,
5,347,0,0,3142,3143,3,772,386,0,3143,683,1,0,0,0,3144,3148,3,688,344,0,3145,
3148,3,762,381,0,3146,3148,3,776,388,0,3147,3144,1,0,0,0,3147,3145,1,0,0,
0,3147,3146,1,0,0,0,3148,685,1,0,0,0,3149,3152,5,33,0,0,3150,3152,5,248,
0,0,3151,3149,1,0,0,0,3151,3150,1,0,0,0,3152,687,1,0,0,0,3153,3161,3,690,
345,0,3154,3161,3,692,346,0,3155,3161,3,694,347,0,3156,3161,3,702,351,0,
3157,3161,3,722,361,0,3158,3161,3,740,370,0,3159,3161,3,788,394,0,3160,3153,
1,0,0,0,3160,3154,1,0,0,0,3160,3155,1,0,0,0,3160,3156,1,0,0,0,3160,3157,
1,0,0,0,3160,3158,1,0,0,0,3160,3159,1,0,0,0,3161,689,1,0,0,0,3162,3164,7,
18,0,0,3163,3165,3,790,395,0,3164,3163,1,0,0,0,3164,3165,1,0,0,0,3165,691,
1,0,0,0,3166,3171,7,19,0,0,3167,3168,5,44,0,0,3168,3169,3,698,349,0,3169,
3170,5,45,0,0,3170,3172,1,0,0,0,3171,3167,1,0,0,0,3171,3172,1,0,0,0,3172,
3174,1,0,0,0,3173,3175,3,790,395,0,3174,3173,1,0,0,0,3174,3175,1,0,0,0,3175,
693,1,0,0,0,3176,3185,5,83,0,0,3177,3178,5,44,0,0,3178,3180,3,696,348,0,
3179,3181,5,34,0,0,3180,3179,1,0,0,0,3180,3181,1,0,0,0,3181,3182,1,0,0,0,
3182,3183,3,698,349,0,3183,3184,5,45,0,0,3184,3186,1,0,0,0,3185,3177,1,0,
0,0,3185,3186,1,0,0,0,3186,3188,1,0,0,0,3187,3189,3,790,395,0,3188,3187,
1,0,0,0,3188,3189,1,0,0,0,3189,3211,1,0,0,0,3190,3195,5,76,0,0,3191,3192,
5,44,0,0,3192,3193,3,700,350,0,3193,3194,5,45,0,0,3194,3196,1,0,0,0,3195,
3191,1,0,0,0,3195,3196,1,0,0,0,3196,3198,1,0,0,0,3197,3199,3,790,395,0,3198,
3197,1,0,0,0,3198,3199,1,0,0,0,3199,3211,1,0,0,0,3200,3205,5,264,0,0,3201,
3202,5,44,0,0,3202,3203,3,698,349,0,3203,3204,5,45,0,0,3204,3206,1,0,0,0,
3205,3201,1,0,0,0,3205,3206,1,0,0,0,3206,3208,1,0,0,0,3207,3209,3,790,395,
0,3208,3207,1,0,0,0,3208,3209,1,0,0,0,3209,3211,1,0,0,0,3210,3176,1,0,0,
0,3210,3190,1,0,0,0,3210,3200,1,0,0,0,3211,695,1,0,0,0,3212,3213,5,379,0,
0,3213,697,1,0,0,0,3214,3215,5,379,0,0,3215,699,1,0,0,0,3216,3217,5,379,
0,0,3217,701,1,0,0,0,3218,3221,3,704,352,0,3219,3221,3,720,360,0,3220,3218,
1,0,0,0,3220,3219,1,0,0,0,3221,703,1,0,0,0,3222,3225,3,706,353,0,3223,3225,
3,714,357,0,3224,3222,1,0,0,0,3224,3223,1,0,0,0,3225,705,1,0,0,0,3226,3229,
3,708,354,0,3227,3229,3,710,355,0,3228,3226,1,0,0,0,3228,3227,1,0,0,0,3229,
707,1,0,0,0,3230,3232,5,153,0,0,3231,3233,3,790,395,0,3232,3231,1,0,0,0,
3232,3233,1,0,0,0,3233,3277,1,0,0,0,3234,3236,5,155,0,0,3235,3237,3,790,
395,0,3236,3235,1,0,0,0,3236,3237,1,0,0,0,3237,3277,1,0,0,0,3238,3240,5,
157,0,0,3239,3241,3,790,395,0,3240,3239,1,0,0,0,3240,3241,1,0,0,0,3241,3277,
1,0,0,0,3242,3244,5,159,0,0,3243,3245,3,790,395,0,3244,3243,1,0,0,0,3244,
3245,1,0,0,0,3245,3277,1,0,0,0,3246,3248,5,161,0,0,3247,3249,3,790,395,0,
3248,3247,1,0,0,0,3248,3249,1,0,0,0,3249,3277,1,0,0,0,3250,3252,5,163,0,
0,3251,3253,3,790,395,0,3252,3251,1,0,0,0,3252,3253,1,0,0,0,3253,3277,1,
0,0,0,3254,3256,5,233,0,0,3255,3257,3,790,395,0,3256,3255,1,0,0,0,3256,3257,
1,0,0,0,3257,3277,1,0,0,0,3258,3263,5,151,0,0,3259,3260,5,44,0,0,3260,3261,
3,716,358,0,3261,3262,5,45,0,0,3262,3264,1,0,0,0,3263,3259,1,0,0,0,3263,
3264,1,0,0,0,3264,3266,1,0,0,0,3265,3267,3,790,395,0,3266,3265,1,0,0,0,3266,
3267,1,0,0,0,3267,3277,1,0,0,0,3268,3270,5,75,0,0,3269,3271,3,790,395,0,
3270,3269,1,0,0,0,3270,3271,1,0,0,0,3271,3277,1,0,0,0,3272,3274,5,228,0,
0,3273,3272,1,0,0,0,3273,3274,1,0,0,0,3274,3275,1,0,0,0,3275,3277,3,712,
356,0,3276,3230,1,0,0,0,3276,3234,1,0,0,0,3276,3238,1,0,0,0,3276,3242,1,
0,0,0,3276,3246,1,0,0,0,3276,3250,1,0,0,0,3276,3254,1,0,0,0,3276,3258,1,
0,0,0,3276,3268,1,0,0,0,3276,3273,1,0,0,0,3277,709,1,0,0,0,3278,3280,5,251,
0,0,3279,3281,3,790,395,0,3280,3279,1,0,0,0,3280,3281,1,0,0,0,3281,3323,
1,0,0,0,3282,3284,5,252,0,0,3283,3285,3,790,395,0,3284,3283,1,0,0,0,3284,
3285,1,0,0,0,3285,3323,1,0,0,0,3286,3288,5,253,0,0,3287,3289,3,790,395,0,
3288,3287,1,0,0,0,3288,3289,1,0,0,0,3289,3323,1,0,0,0,3290,3292,5,254,0,
0,3291,3293,3,790,395,0,3292,3291,1,0,0,0,3292,3293,1,0,0,0,3293,3323,1,
0,0,0,3294,3296,5,255,0,0,3295,3297,3,790,395,0,3296,3295,1,0,0,0,3296,3297,
1,0,0,0,3297,3323,1,0,0,0,3298,3300,5,256,0,0,3299,3301,3,790,395,0,3300,
3299,1,0,0,0,3300,3301,1,0,0,0,3301,3323,1,0,0,0,3302,3304,5,262,0,0,3303,
3305,3,790,395,0,3304,3303,1,0,0,0,3304,3305,1,0,0,0,3305,3323,1,0,0,0,3306,
3311,5,250,0,0,3307,3308,5,44,0,0,3308,3309,3,716,358,0,3309,3310,5,45,0,
0,3310,3312,1,0,0,0,3311,3307,1,0,0,0,3311,3312,1,0,0,0,3312,3314,1,0,0,
0,3313,3315,3,790,395,0,3314,3313,1,0,0,0,3314,3315,1,0,0,0,3315,3323,1,
0,0,0,3316,3318,5,249,0,0,3317,3319,3,790,395,0,3318,3317,1,0,0,0,3318,3319,
1,0,0,0,3319,3323,1,0,0,0,3320,3321,5,259,0,0,3321,3323,3,712,356,0,3322,
3278,1,0,0,0,3322,3282,1,0,0,0,3322,3286,1,0,0,0,3322,3290,1,0,0,0,3322,
3294,1,0,0,0,3322,3298,1,0,0,0,3322,3302,1,0,0,0,3322,3306,1,0,0,0,3322,
3316,1,0,0,0,3322,3320,1,0,0,0,3323,711,1,0,0,0,3324,3326,5,154,0,0,3325,
3327,3,790,395,0,3326,3325,1,0,0,0,3326,3327,1,0,0,0,3327,3369,1,0,0,0,3328,
3330,5,156,0,0,3329,3331,3,790,395,0,3330,3329,1,0,0,0,3330,3331,1,0,0,0,
3331,3369,1,0,0,0,3332,3334,5,158,0,0,3333,3335,3,790,395,0,3334,3333,1,
0,0,0,3334,3335,1,0,0,0,3335,3369,1,0,0,0,3336,3338,5,160,0,0,3337,3339,
3,790,395,0,3338,3337,1,0,0,0,3338,3339,1,0,0,0,3339,3369,1,0,0,0,3340,3342,
5,162,0,0,3341,3343,3,790,395,0,3342,3341,1,0,0,0,3342,3343,1,0,0,0,3343,
3369,1,0,0,0,3344,3346,5,164,0,0,3345,3347,3,790,395,0,3346,3345,1,0,0,0,
3346,3347,1,0,0,0,3347,3369,1,0,0,0,3348,3349,5,232,0,0,3349,3351,5,152,
0,0,3350,3352,3,790,395,0,3351,3350,1,0,0,0,3351,3352,1,0,0,0,3352,3369,
1,0,0,0,3353,3358,5,152,0,0,3354,3355,5,44,0,0,3355,3356,3,716,358,0,3356,
3357,5,45,0,0,3357,3359,1,0,0,0,3358,3354,1,0,0,0,3358,3359,1,0,0,0,3359,
3361,1,0,0,0,3360,3362,3,790,395,0,3361,3360,1,0,0,0,3361,3362,1,0,0,0,3362,
3369,1,0,0,0,3363,3364,5,74,0,0,3364,3366,5,152,0,0,3365,3367,3,790,395,
0,3366,3365,1,0,0,0,3366,3367,1,0,0,0,3367,3369,1,0,0,0,3368,3324,1,0,0,
0,3368,3328,1,0,0,0,3368,3332,1,0,0,0,3368,3336,1,0,0,0,3368,3340,1,0,0,
0,3368,3344,1,0,0,0,3368,3348,1,0,0,0,3368,3353,1,0,0,0,3368,3363,1,0,0,
0,3369,713,1,0,0,0,3370,3379,7,20,0,0,3371,3372,5,44,0,0,3372,3373,3,716,
358,0,3373,3375,5,34,0,0,3374,3376,3,718,359,0,3375,3374,1,0,0,0,3375,3376,
1,0,0,0,3376,3377,1,0,0,0,3377,3378,5,45,0,0,3378,3380,1,0,0,0,3379,3371,
1,0,0,0,3379,3380,1,0,0,0,3380,3382,1,0,0,0,3381,3383,3,790,395,0,3382,3381,
1,0,0,0,3382,3383,1,0,0,0,3383,715,1,0,0,0,3384,3385,5,380,0,0,3385,717,
1,0,0,0,3386,3387,5,380,0,0,3387,719,1,0,0,0,3388,3390,5,134,0,0,3389,3391,
3,790,395,0,3390,3389,1,0,0,0,3390,3391,1,0,0,0,3391,3432,1,0,0,0,3392,3394,
5,135,0,0,3393,3395,3,790,395,0,3394,3393,1,0,0,0,3394,3395,1,0,0,0,3395,
3432,1,0,0,0,3396,3398,5,136,0,0,3397,3399,3,790,395,0,3398,3397,1,0,0,0,
3398,3399,1,0,0,0,3399,3432,1,0,0,0,3400,3402,5,137,0,0,3401,3403,3,790,
395,0,3402,3401,1,0,0,0,3402,3403,1,0,0,0,3403,3432,1,0,0,0,3404,3406,5,
138,0,0,3405,3407,3,790,395,0,3406,3405,1,0,0,0,3406,3407,1,0,0,0,3407,3432,
1,0,0,0,3408,3417,5,133,0,0,3409,3410,5,44,0,0,3410,3411,3,716,358,0,3411,
3413,5,34,0,0,3412,3414,3,718,359,0,3413,3412,1,0,0,0,3413,3414,1,0,0,0,
3414,3415,1,0,0,0,3415,3416,5,45,0,0,3416,3418,1,0,0,0,3417,3409,1,0,0,0,
3417,3418,1,0,0,0,3418,3420,1,0,0,0,3419,3421,3,790,395,0,3420,3419,1,0,
0,0,3420,3421,1,0,0,0,3421,3432,1,0,0,0,3422,3424,5,214,0,0,3423,3425,3,
790,395,0,3424,3423,1,0,0,0,3424,3425,1,0,0,0,3425,3432,1,0,0,0,3426,3428,
5,120,0,0,3427,3429,5,211,0,0,3428,3427,1,0,0,0,3428,3429,1,0,0,0,3429,3430,
1,0,0,0,3430,3432,3,790,395,0,3431,3388,1,0,0,0,3431,3392,1,0,0,0,3431,3396,
1,0,0,0,3431,3400,1,0,0,0,3431,3404,1,0,0,0,3431,3408,1,0,0,0,3431,3422,
1,0,0,0,3431,3426,1,0,0,0,3432,721,1,0,0,0,3433,3436,3,724,362,0,3434,3436,
3,726,363,0,3435,3433,1,0,0,0,3435,3434,1,0,0,0,3436,723,1,0,0,0,3437,3443,
3,728,364,0,3438,3443,3,730,365,0,3439,3443,3,732,366,0,3440,3443,3,734,
367,0,3441,3443,3,736,368,0,3442,3437,1,0,0,0,3442,3438,1,0,0,0,3442,3439,
1,0,0,0,3442,3440,1,0,0,0,3442,3441,1,0,0,0,3443,725,1,0,0,0,3444,3445,3,
738,369,0,3445,727,1,0,0,0,3446,3447,5,273,0,0,3447,3449,5,110,0,0,3448,
3450,3,790,395,0,3449,3448,1,0,0,0,3449,3450,1,0,0,0,3450,3458,1,0,0,0,3451,
3452,5,244,0,0,3452,3453,5,269,0,0,3453,3455,5,349,0,0,3454,3456,3,790,395,
0,3455,3454,1,0,0,0,3455,3456,1,0,0,0,3456,3458,1,0,0,0,3457,3446,1,0,0,
0,3457,3451,1,0,0,0,3458,729,1,0,0,0,3459,3460,5,174,0,0,3460,3462,5,110,
0,0,3461,3463,3,790,395,0,3462,3461,1,0,0,0,3462,3463,1,0,0,0,3463,3472,
1,0,0,0,3464,3465,5,244,0,0,3465,3466,5,357,0,0,3466,3467,5,349,0,0,3467,
3469,1,0,0,0,3468,3470,3,790,395,0,3469,3468,1,0,0,0,3469,3470,1,0,0,0,3470,
3472,1,0,0,0,3471,3459,1,0,0,0,3471,3464,1,0,0,0,3472,731,1,0,0,0,3473,3475,
5,109,0,0,3474,3476,3,790,395,0,3475,3474,1,0,0,0,3475,3476,1,0,0,0,3476,
733,1,0,0,0,3477,3478,5,273,0,0,3478,3480,5,243,0,0,3479,3481,3,790,395,
0,3480,3479,1,0,0,0,3480,3481,1,0,0,0,3481,3489,1,0,0,0,3482,3483,5,243,
0,0,3483,3484,5,269,0,0,3484,3486,5,349,0,0,3485,3487,3,790,395,0,3486,3485,
1,0,0,0,3486,3487,1,0,0,0,3487,3489,1,0,0,0,3488,3477,1,0,0,0,3488,3482,
1,0,0,0,3489,735,1,0,0,0,3490,3491,5,174,0,0,3491,3493,5,243,0,0,3492,3494,
3,790,395,0,3493,3492,1,0,0,0,3493,3494,1,0,0,0,3494,3502,1,0,0,0,3495,3496,
5,243,0,0,3496,3497,5,357,0,0,3497,3499,5,349,0,0,3498,3500,3,790,395,0,
3499,3498,1,0,0,0,3499,3500,1,0,0,0,3500,3502,1,0,0,0,3501,3490,1,0,0,0,
3501,3495,1,0,0,0,3502,737,1,0,0,0,3503,3505,5,122,0,0,3504,3506,3,790,395,
0,3505,3504,1,0,0,0,3505,3506,1,0,0,0,3506,739,1,0,0,0,3507,3512,3,742,371,
0,3508,3512,3,748,374,0,3509,3512,3,750,375,0,3510,3512,3,756,378,0,3511,
3507,1,0,0,0,3511,3508,1,0,0,0,3511,3509,1,0,0,0,3511,3510,1,0,0,0,3512,
741,1,0,0,0,3513,3516,3,744,372,0,3514,3516,3,746,373,0,3515,3513,1,0,0,
0,3515,3514,1,0,0,0,3516,743,1,0,0,0,3517,3519,5,198,0,0,3518,3520,5,339,
0,0,3519,3518,1,0,0,0,3519,3520,1,0,0,0,3520,3521,1,0,0,0,3521,3523,5,323,
0,0,3522,3524,3,790,395,0,3523,3522,1,0,0,0,3523,3524,1,0,0,0,3524,745,1,
0,0,0,3525,3527,3,582,291,0,3526,3528,3,790,395,0,3527,3526,1,0,0,0,3527,
3528,1,0,0,0,3528,747,1,0,0,0,3529,3531,3,682,341,0,3530,3532,3,790,395,
0,3531,3530,1,0,0,0,3531,3532,1,0,0,0,3532,749,1,0,0,0,3533,3536,3,752,376,
0,3534,3536,3,754,377,0,3535,3533,1,0,0,0,3535,3534,1,0,0,0,3536,751,1,0,
0,0,3537,3539,5,198,0,0,3538,3537,1,0,0,0,3538,3539,1,0,0,0,3539,3540,1,
0,0,0,3540,3542,3,1340,670,0,3541,3543,3,790,395,0,3542,3541,1,0,0,0,3542,
3543,1,0,0,0,3543,753,1,0,0,0,3544,3546,3,606,303,0,3545,3547,3,790,395,
0,3546,3545,1,0,0,0,3546,3547,1,0,0,0,3547,755,1,0,0,0,3548,3551,3,758,379,
0,3549,3551,3,760,380,0,3550,3548,1,0,0,0,3550,3549,1,0,0,0,3551,757,1,0,
0,0,3552,3554,5,198,0,0,3553,3552,1,0,0,0,3553,3554,1,0,0,0,3554,3555,1,
0,0,0,3555,3557,3,1336,668,0,3556,3558,3,790,395,0,3557,3556,1,0,0,0,3557,
3558,1,0,0,0,3558,759,1,0,0,0,3559,3561,3,606,303,0,3560,3562,3,790,395,
0,3561,3560,1,0,0,0,3561,3562,1,0,0,0,3562,761,1,0,0,0,3563,3566,3,764,382,
0,3564,3566,3,770,385,0,3565,3563,1,0,0,0,3565,3564,1,0,0,0,3566,763,1,0,
0,0,3567,3568,3,766,383,0,3568,3569,5,38,0,0,3569,3570,3,688,344,0,3570,
3575,5,39,0,0,3571,3572,5,42,0,0,3572,3573,3,698,349,0,3573,3574,5,43,0,
0,3574,3576,1,0,0,0,3575,3571,1,0,0,0,3575,3576,1,0,0,0,3576,3578,1,0,0,
0,3577,3579,3,790,395,0,3578,3577,1,0,0,0,3578,3579,1,0,0,0,3579,3592,1,
0,0,0,3580,3581,3,688,344,0,3581,3586,3,766,383,0,3582,3583,5,42,0,0,3583,
3584,3,698,349,0,3584,3585,5,43,0,0,3585,3587,1,0,0,0,3586,3582,1,0,0,0,
3586,3587,1,0,0,0,3587,3589,1,0,0,0,3588,3590,3,790,395,0,3589,3588,1,0,
0,0,3589,3590,1,0,0,0,3590,3592,1,0,0,0,3591,3567,1,0,0,0,3591,3580,1,0,
0,0,3592,765,1,0,0,0,3593,3595,5,142,0,0,3594,3593,1,0,0,0,3594,3595,1,0,
0,0,3595,3596,1,0,0,0,3596,3597,3,768,384,0,3597,767,1,0,0,0,3598,3599,7,
21,0,0,3599,769,1,0,0,0,3600,3602,5,198,0,0,3601,3600,1,0,0,0,3601,3602,
1,0,0,0,3602,3603,1,0,0,0,3603,3605,5,215,0,0,3604,3606,3,790,395,0,3605,
3604,1,0,0,0,3605,3606,1,0,0,0,3606,3615,1,0,0,0,3607,3609,5,215,0,0,3608,
3607,1,0,0,0,3608,3609,1,0,0,0,3609,3610,1,0,0,0,3610,3612,3,772,386,0,3611,
3613,3,790,395,0,3612,3611,1,0,0,0,3612,3613,1,0,0,0,3613,3615,1,0,0,0,3614,
3601,1,0,0,0,3614,3608,1,0,0,0,3615,771,1,0,0,0,3616,3618,5,40,0,0,3617,
3619,3,774,387,0,3618,3617,1,0,0,0,3618,3619,1,0,0,0,3619,3620,1,0,0,0,3620,
3621,5,41,0,0,3621,773,1,0,0,0,3622,3625,3,792,396,0,3623,3624,5,34,0,0,
3624,3626,3,792,396,0,3625,3623,1,0,0,0,3626,3627,1,0,0,0,3627,3625,1,0,
0,0,3627,3628,1,0,0,0,3628,775,1,0,0,0,3629,3633,3,778,389,0,3630,3633,3,
780,390,0,3631,3633,3,782,391,0,3632,3629,1,0,0,0,3632,3630,1,0,0,0,3632,
3631,1,0,0,0,3633,777,1,0,0,0,3634,3635,5,65,0,0,3635,779,1,0,0,0,3636,3638,
5,65,0,0,3637,3636,1,0,0,0,3637,3638,1,0,0,0,3638,3639,1,0,0,0,3639,3640,
5,339,0,0,3640,3641,5,263,0,0,3641,781,1,0,0,0,3642,3643,5,65,0,0,3643,3644,
5,38,0,0,3644,3645,3,784,392,0,3645,3646,5,39,0,0,3646,783,1,0,0,0,3647,
3652,3,786,393,0,3648,3649,5,52,0,0,3649,3651,3,786,393,0,3650,3648,1,0,
0,0,3651,3654,1,0,0,0,3652,3650,1,0,0,0,3652,3653,1,0,0,0,3653,785,1,0,0,
0,3654,3652,1,0,0,0,3655,3656,3,684,342,0,3656,787,1,0,0,0,3657,3658,5,205,
0,0,3658,789,1,0,0,0,3659,3660,5,191,0,0,3660,3661,5,192,0,0,3661,791,1,
0,0,0,3662,3663,3,1290,645,0,3663,3664,3,686,343,0,3664,3665,3,684,342,0,
3665,793,1,0,0,0,3666,3670,3,796,398,0,3667,3670,3,800,400,0,3668,3670,3,
830,415,0,3669,3666,1,0,0,0,3669,3667,1,0,0,0,3669,3668,1,0,0,0,3670,795,
1,0,0,0,3671,3676,5,48,0,0,3672,3673,3,804,402,0,3673,3674,3,1270,635,0,
3674,3676,1,0,0,0,3675,3671,1,0,0,0,3675,3672,1,0,0,0,3676,797,1,0,0,0,3677,
3678,3,804,402,0,3678,3679,3,1270,635,0,3679,799,1,0,0,0,3680,3685,3,802,
401,0,3681,3682,3,806,403,0,3682,3683,3,1270,635,0,3683,3685,1,0,0,0,3684,
3680,1,0,0,0,3684,3681,1,0,0,0,3685,801,1,0,0,0,3686,3687,7,22,0,0,3687,
803,1,0,0,0,3688,3690,5,48,0,0,3689,3691,3,808,404,0,3690,3689,1,0,0,0,3690,
3691,1,0,0,0,3691,805,1,0,0,0,3692,3704,5,55,0,0,3693,3694,5,48,0,0,3694,
3696,5,55,0,0,3695,3693,1,0,0,0,3696,3699,1,0,0,0,3697,3695,1,0,0,0,3697,
3698,1,0,0,0,3698,3700,1,0,0,0,3699,3697,1,0,0,0,3700,3702,5,48,0,0,3701,
3703,3,808,404,0,3702,3701,1,0,0,0,3702,3703,1,0,0,0,3703,3705,1,0,0,0,3704,
3697,1,0,0,0,3704,3705,1,0,0,0,3705,807,1,0,0,0,3706,3707,3,1268,634,0,3707,
3708,5,48,0,0,3708,3710,1,0,0,0,3709,3706,1,0,0,0,3710,3711,1,0,0,0,3711,
3709,1,0,0,0,3711,3712,1,0,0,0,3712,809,1,0,0,0,3713,3714,3,828,414,0,3714,
3715,3,1272,636,0,3715,3720,1,0,0,0,3716,3720,3,1274,637,0,3717,3720,3,814,
407,0,3718,3720,3,830,415,0,3719,3713,1,0,0,0,3719,3716,1,0,0,0,3719,3717,
1,0,0,0,3719,3718,1,0,0,0,3720,811,1,0,0,0,3721,3723,3,828,414,0,3722,3721,
1,0,0,0,3722,3723,1,0,0,0,3723,3724,1,0,0,0,3724,3725,3,1272,636,0,3725,
813,1,0,0,0,3726,3727,7,23,0,0,3727,815,1,0,0,0,3728,3731,3,818,409,0,3729,
3731,3,830,415,0,3730,3728,1,0,0,0,3730,3729,1,0,0,0,3731,817,1,0,0,0,3732,
3734,3,828,414,0,3733,3732,1,0,0,0,3733,3734,1,0,0,0,3734,3735,1,0,0,0,3735,
3736,3,1276,638,0,3736,819,1,0,0,0,3737,3738,3,828,414,0,3738,3739,3,1280,
640,0,3739,3743,1,0,0,0,3740,3743,3,1282,641,0,3741,3743,3,830,415,0,3742,
3737,1,0,0,0,3742,3740,1,0,0,0,3742,3741,1,0,0,0,3743,821,1,0,0,0,3744,3746,
3,828,414,0,3745,3744,1,0,0,0,3745,3746,1,0,0,0,3746,3747,1,0,0,0,3747,3748,
3,1280,640,0,3748,823,1,0,0,0,3749,3752,3,826,413,0,3750,3752,3,830,415,
0,3751,3749,1,0,0,0,3751,3750,1,0,0,0,3752,825,1,0,0,0,3753,3755,3,828,414,
0,3754,3753,1,0,0,0,3754,3755,1,0,0,0,3755,3756,1,0,0,0,3756,3757,3,1284,
642,0,3757,827,1,0,0,0,3758,3760,3,794,397,0,3759,3761,5,48,0,0,3760,3759,
1,0,0,0,3760,3761,1,0,0,0,3761,3767,1,0,0,0,3762,3763,3,1264,632,0,3763,
3764,5,54,0,0,3764,3766,1,0,0,0,3765,3762,1,0,0,0,3766,3769,1,0,0,0,3767,
3765,1,0,0,0,3767,3768,1,0,0,0,3768,3778,1,0,0,0,3769,3767,1,0,0,0,3770,
3771,3,1264,632,0,3771,3772,5,54,0,0,3772,3774,1,0,0,0,3773,3770,1,0,0,0,
3774,3775,1,0,0,0,3775,3773,1,0,0,0,3775,3776,1,0,0,0,3776,3778,1,0,0,0,
3777,3758,1,0,0,0,3777,3773,1,0,0,0,3778,829,1,0,0,0,3779,3780,3,304,152,
0,3780,831,1,0,0,0,3781,3782,1,0,0,0,3782,833,1,0,0,0,3783,3784,3,928,464,
0,3784,835,1,0,0,0,3785,3797,3,838,419,0,3786,3797,3,858,429,0,3787,3797,
3,860,430,0,3788,3797,3,864,432,0,3789,3797,3,868,434,0,3790,3797,3,872,
436,0,3791,3797,3,876,438,0,3792,3797,3,882,441,0,3793,3797,3,892,446,0,
3794,3797,3,894,447,0,3795,3797,3,896,448,0,3796,3785,1,0,0,0,3796,3786,
1,0,0,0,3796,3787,1,0,0,0,3796,3788,1,0,0,0,3796,3789,1,0,0,0,3796,3790,
1,0,0,0,3796,3791,1,0,0,0,3796,3792,1,0,0,0,3796,3793,1,0,0,0,3796,3794,
1,0,0,0,3796,3795,1,0,0,0,3797,837,1,0,0,0,3798,3799,3,856,428,0,3799,3800,
3,840,420,0,3800,839,1,0,0,0,3801,3802,3,842,421,0,3802,3803,3,856,428,0,
3803,841,1,0,0,0,3804,3811,3,844,422,0,3805,3811,3,846,423,0,3806,3811,3,
848,424,0,3807,3811,3,850,425,0,3808,3811,3,852,426,0,3809,3811,3,854,427,
0,3810,3804,1,0,0,0,3810,3805,1,0,0,0,3810,3806,1,0,0,0,3810,3807,1,0,0,
0,3810,3808,1,0,0,0,3810,3809,1,0,0,0,3811,843,1,0,0,0,3812,3813,5,36,0,
0,3813,845,1,0,0,0,3814,3815,5,38,0,0,3815,3816,5,39,0,0,3816,847,1,0,0,
0,3817,3818,5,38,0,0,3818,849,1,0,0,0,3819,3820,5,39,0,0,3820,851,1,0,0,
0,3821,3822,5,38,0,0,3822,3823,5,36,0,0,3823,853,1,0,0,0,3824,3825,5,39,
0,0,3825,3826,5,36,0,0,3826,855,1,0,0,0,3827,3830,3,910,455,0,3828,3830,
3,940,470,0,3829,3827,1,0,0,0,3829,3828,1,0,0,0,3830,857,1,0,0,0,3831,3849,
5,128,0,0,3832,3833,5,40,0,0,3833,3834,3,314,157,0,3834,3835,5,41,0,0,3835,
3850,1,0,0,0,3836,3837,5,44,0,0,3837,3838,3,314,157,0,3838,3839,5,45,0,0,
3839,3850,1,0,0,0,3840,3841,5,40,0,0,3841,3842,3,226,113,0,3842,3843,5,41,
0,0,3843,3850,1,0,0,0,3844,3845,5,44,0,0,3845,3846,3,226,113,0,3846,3847,
5,45,0,0,3847,3850,1,0,0,0,3848,3850,3,54,27,0,3849,3832,1,0,0,0,3849,3836,
1,0,0,0,3849,3840,1,0,0,0,3849,3844,1,0,0,0,3849,3848,1,0,0,0,3850,859,1,
0,0,0,3851,3852,3,952,476,0,3852,3853,3,862,431,0,3853,861,1,0,0,0,3854,
3856,5,167,0,0,3855,3857,5,191,0,0,3856,3855,1,0,0,0,3856,3857,1,0,0,0,3857,
3858,1,0,0,0,3858,3859,5,192,0,0,3859,863,1,0,0,0,3860,3861,3,952,476,0,
3861,3862,3,866,433,0,3862,865,1,0,0,0,3863,3865,5,167,0,0,3864,3866,5,191,
0,0,3865,3864,1,0,0,0,3865,3866,1,0,0,0,3866,3867,1,0,0,0,3867,3868,3,686,
343,0,3868,3869,3,684,342,0,3869,867,1,0,0,0,3870,3871,3,1010,505,0,3871,
3872,3,870,435,0,3872,869,1,0,0,0,3873,3875,5,167,0,0,3874,3876,5,191,0,
0,3875,3874,1,0,0,0,3875,3876,1,0,0,0,3876,3878,1,0,0,0,3877,3879,3,1050,
525,0,3878,3877,1,0,0,0,3878,3879,1,0,0,0,3879,3880,1,0,0,0,3880,3881,5,
336,0,0,3881,871,1,0,0,0,3882,3883,3,300,150,0,3883,3884,3,872,436,0,3884,
873,1,0,0,0,3885,3887,5,167,0,0,3886,3888,5,191,0,0,3887,3886,1,0,0,0,3887,
3888,1,0,0,0,3888,3889,1,0,0,0,3889,3890,5,317,0,0,3890,875,1,0,0,0,3891,
3892,3,300,150,0,3892,877,1,0,0,0,3893,3894,3,880,440,0,3894,3895,3,450,
225,0,3895,879,1,0,0,0,3896,3898,5,167,0,0,3897,3899,5,191,0,0,3898,3897,
1,0,0,0,3898,3899,1,0,0,0,3899,3900,1,0,0,0,3900,3903,5,327,0,0,3901,3903,
5,32,0,0,3902,3896,1,0,0,0,3902,3901,1,0,0,0,3903,881,1,0,0,0,3904,3905,
3,884,442,0,3905,3906,3,886,443,0,3906,3911,1,0,0,0,3907,3908,3,884,442,
0,3908,3909,3,888,444,0,3909,3911,1,0,0,0,3910,3904,1,0,0,0,3910,3907,1,
0,0,0,3911,883,1,0,0,0,3912,3913,3,300,150,0,3913,885,1,0,0,0,3914,3916,
5,167,0,0,3915,3917,5,191,0,0,3916,3915,1,0,0,0,3916,3917,1,0,0,0,3917,3918,
1,0,0,0,3918,3919,5,346,0,0,3919,3920,5,196,0,0,3920,3921,3,890,445,0,3921,
887,1,0,0,0,3922,3924,5,167,0,0,3923,3925,5,191,0,0,3924,3923,1,0,0,0,3924,
3925,1,0,0,0,3925,3926,1,0,0,0,3926,3927,5,315,0,0,3927,3928,5,196,0,0,3928,
3929,3,890,445,0,3929,889,1,0,0,0,3930,3931,3,300,150,0,3931,891,1,0,0,0,
3932,3933,5,63,0,0,3933,3934,5,44,0,0,3934,3937,3,300,150,0,3935,3936,5,
34,0,0,3936,3938,3,300,150,0,3937,3935,1,0,0,0,3938,3939,1,0,0,0,3939,3937,
1,0,0,0,3939,3940,1,0,0,0,3940,3941,1,0,0,0,3941,3942,5,45,0,0,3942,893,
1,0,0,0,3943,3944,5,222,0,0,3944,3945,5,44,0,0,3945,3948,3,300,150,0,3946,
3947,5,34,0,0,3947,3949,3,300,150,0,3948,3946,1,0,0,0,3949,3950,1,0,0,0,
3950,3948,1,0,0,0,3950,3951,1,0,0,0,3951,3952,1,0,0,0,3952,3953,5,45,0,0,
3953,895,1,0,0,0,3954,3955,5,212,0,0,3955,3956,5,44,0,0,3956,3957,3,300,
150,0,3957,3958,5,34,0,0,3958,3959,3,1288,644,0,3959,3960,5,45,0,0,3960,
897,1,0,0,0,3961,3964,3,1206,603,0,3962,3964,3,904,452,0,3963,3961,1,0,0,
0,3963,3962,1,0,0,0,3964,899,1,0,0,0,3965,3968,3,1212,606,0,3966,3968,3,
904,452,0,3967,3965,1,0,0,0,3967,3966,1,0,0,0,3968,901,1,0,0,0,3969,3972,
5,379,0,0,3970,3972,3,304,152,0,3971,3969,1,0,0,0,3971,3970,1,0,0,0,3972,
903,1,0,0,0,3973,3976,3,304,152,0,3974,3976,3,906,453,0,3975,3973,1,0,0,
0,3975,3974,1,0,0,0,3976,905,1,0,0,0,3977,3978,5,108,0,0,3978,907,1,0,0,
0,3979,3982,3,910,455,0,3980,3982,3,928,464,0,3981,3979,1,0,0,0,3981,3980,
1,0,0,0,3982,909,1,0,0,0,3983,3993,3,944,472,0,3984,3993,3,1010,505,0,3985,
3993,3,1064,532,0,3986,3993,3,1090,545,0,3987,3993,3,1120,560,0,3988,3993,
3,924,462,0,3989,3993,3,1148,574,0,3990,3993,3,914,457,0,3991,3993,3,912,
456,0,3992,3983,1,0,0,0,3992,3984,1,0,0,0,3992,3985,1,0,0,0,3992,3986,1,
0,0,0,3992,3987,1,0,0,0,3992,3988,1,0,0,0,3992,3989,1,0,0,0,3992,3990,1,
0,0,0,3992,3991,1,0,0,0,3993,911,1,0,0,0,3994,3997,3,1288,644,0,3995,3996,
5,54,0,0,3996,3998,3,1288,644,0,3997,3995,1,0,0,0,3998,3999,1,0,0,0,3999,
3997,1,0,0,0,3999,4000,1,0,0,0,4000,913,1,0,0,0,4001,4006,3,916,458,0,4002,
4006,3,918,459,0,4003,4006,3,920,460,0,4004,4006,3,922,461,0,4005,4001,1,
0,0,0,4005,4002,1,0,0,0,4005,4003,1,0,0,0,4005,4004,1,0,0,0,4006,915,1,0,
0,0,4007,4009,5,339,0,0,4008,4007,1,0,0,0,4008,4009,1,0,0,0,4009,4010,1,
0,0,0,4010,4011,5,323,0,0,4011,4014,3,86,43,0,4012,4014,3,952,476,0,4013,
4008,1,0,0,0,4013,4012,1,0,0,0,4014,917,1,0,0,0,4015,4017,5,312,0,0,4016,
4015,1,0,0,0,4016,4017,1,0,0,0,4017,4018,1,0,0,0,4018,4019,5,347,0,0,4019,
4022,3,92,46,0,4020,4022,3,952,476,0,4021,4016,1,0,0,0,4021,4020,1,0,0,0,
4022,919,1,0,0,0,4023,4024,3,952,476,0,4024,921,1,0,0,0,4025,4026,3,952,
476,0,4026,923,1,0,0,0,4027,4028,3,952,476,0,4028,925,1,0,0,0,4029,4030,
3,908,454,0,4030,927,1,0,0,0,4031,4041,3,930,465,0,4032,4033,3,930,465,0,
4033,4034,5,200,0,0,4034,4035,3,928,464,0,4035,4041,1,0,0,0,4036,4037,3,
930,465,0,4037,4038,5,270,0,0,4038,4039,3,928,464,0,4039,4041,1,0,0,0,4040,
4031,1,0,0,0,4040,4032,1,0,0,0,4040,4036,1,0,0,0,4041,929,1,0,0,0,4042,4043,
6,465,-1,0,4043,4044,3,932,466,0,4044,4050,1,0,0,0,4045,4046,10,1,0,0,4046,
4047,5,64,0,0,4047,4049,3,932,466,0,4048,4045,1,0,0,0,4049,4052,1,0,0,0,
4050,4048,1,0,0,0,4050,4051,1,0,0,0,4051,931,1,0,0,0,4052,4050,1,0,0,0,4053,
4055,5,191,0,0,4054,4053,1,0,0,0,4054,4055,1,0,0,0,4055,4056,1,0,0,0,4056,
4057,3,934,467,0,4057,933,1,0,0,0,4058,4064,3,938,469,0,4059,4061,5,167,
0,0,4060,4062,5,191,0,0,4061,4060,1,0,0,0,4061,4062,1,0,0,0,4062,4063,1,
0,0,0,4063,4065,3,936,468,0,4064,4059,1,0,0,0,4064,4065,1,0,0,0,4065,935,
1,0,0,0,4066,4067,7,24,0,0,4067,937,1,0,0,0,4068,4071,3,836,418,0,4069,4071,
3,940,470,0,4070,4068,1,0,0,0,4070,4069,1,0,0,0,4071,939,1,0,0,0,4072,4075,
3,942,471,0,4073,4075,3,956,478,0,4074,4072,1,0,0,0,4074,4073,1,0,0,0,4075,
941,1,0,0,0,4076,4077,5,44,0,0,4077,4078,3,928,464,0,4078,4079,5,45,0,0,
4079,943,1,0,0,0,4080,4090,3,946,473,0,4081,4082,3,946,473,0,4082,4083,5,
26,0,0,4083,4084,3,944,472,0,4084,4090,1,0,0,0,4085,4086,3,946,473,0,4086,
4087,5,27,0,0,4087,4088,3,944,472,0,4088,4090,1,0,0,0,4089,4080,1,0,0,0,
4089,4081,1,0,0,0,4089,4085,1,0,0,0,4090,945,1,0,0,0,4091,4101,3,948,474,
0,4092,4093,3,948,474,0,4093,4094,5,30,0,0,4094,4095,3,946,473,0,4095,4101,
1,0,0,0,4096,4097,3,948,474,0,4097,4098,5,48,0,0,4098,4099,3,946,473,0,4099,
4101,1,0,0,0,4100,4091,1,0,0,0,4100,4092,1,0,0,0,4100,4096,1,0,0,0,4101,
947,1,0,0,0,4102,4104,5,368,0,0,4103,4102,1,0,0,0,4103,4104,1,0,0,0,4104,
4105,1,0,0,0,4105,4106,3,950,475,0,4106,949,1,0,0,0,4107,4110,3,952,476,
0,4108,4110,3,962,481,0,4109,4107,1,0,0,0,4109,4108,1,0,0,0,4110,951,1,0,
0,0,4111,4114,3,954,477,0,4112,4114,3,956,478,0,4113,4111,1,0,0,0,4113,4112,
1,0,0,0,4114,953,1,0,0,0,4115,4116,5,44,0,0,4116,4117,3,908,454,0,4117,4118,
5,45,0,0,4118,955,1,0,0,0,4119,4122,3,958,479,0,4120,4122,3,298,149,0,4121,
4119,1,0,0,0,4121,4120,1,0,0,0,4122,957,1,0,0,0,4123,4132,3,900,450,0,4124,
4132,3,552,276,0,4125,4132,3,960,480,0,4126,4132,3,1168,584,0,4127,4132,
3,1170,585,0,4128,4132,3,1204,602,0,4129,4132,3,1196,598,0,4130,4132,3,1202,
601,0,4131,4123,1,0,0,0,4131,4124,1,0,0,0,4131,4125,1,0,0,0,4131,4126,1,
0,0,0,4131,4127,1,0,0,0,4131,4128,1,0,0,0,4131,4129,1,0,0,0,4131,4130,1,
0,0,0,4132,959,1,0,0,0,4133,4137,3,1132,566,0,4134,4137,3,1140,570,0,4135,
4137,3,1154,577,0,4136,4133,1,0,0,0,4136,4134,1,0,0,0,4136,4135,1,0,0,0,
4137,961,1,0,0,0,4138,4149,3,964,482,0,4139,4149,3,972,486,0,4140,4149,3,
974,487,0,4141,4149,3,980,490,0,4142,4149,3,984,492,0,4143,4149,3,996,498,
0,4144,4149,3,998,499,0,4145,4149,3,1004,502,0,4146,4149,3,1006,503,0,4147,
4149,3,1008,504,0,4148,4138,1,0,0,0,4148,4139,1,0,0,0,4148,4140,1,0,0,0,
4148,4141,1,0,0,0,4148,4142,1,0,0,0,4148,4143,1,0,0,0,4148,4144,1,0,0,0,
4148,4145,1,0,0,0,4148,4146,1,0,0,0,4148,4147,1,0,0,0,4149,963,1,0,0,0,4150,
4154,3,966,483,0,4151,4154,3,968,484,0,4152,4154,3,970,485,0,4153,4150,1,
0,0,0,4153,4151,1,0,0,0,4153,4152,1,0,0,0,4154,965,1,0,0,0,4155,4156,7,25,
0,0,4156,4157,5,44,0,0,4157,4158,3,1012,506,0,4158,4159,5,45,0,0,4159,967,
1,0,0,0,4160,4161,7,26,0,0,4161,4162,5,44,0,0,4162,4163,3,1020,510,0,4163,
4164,5,45,0,0,4164,969,1,0,0,0,4165,4166,5,206,0,0,4166,4167,5,44,0,0,4167,
4168,3,1148,574,0,4168,4169,5,45,0,0,4169,971,1,0,0,0,4170,4171,5,60,0,0,
4171,4172,5,44,0,0,4172,4173,3,944,472,0,4173,4174,5,45,0,0,4174,973,1,0,
0,0,4175,4176,5,186,0,0,4176,4177,5,44,0,0,4177,4178,3,976,488,0,4178,4179,
5,34,0,0,4179,4180,3,978,489,0,4180,4181,5,45,0,0,4181,975,1,0,0,0,4182,
4183,3,944,472,0,4183,977,1,0,0,0,4184,4185,3,944,472,0,4185,979,1,0,0,0,
4186,4187,3,982,491,0,4187,4188,5,44,0,0,4188,4189,3,944,472,0,4189,4190,
5,45,0,0,4190,981,1,0,0,0,4191,4192,7,27,0,0,4192,983,1,0,0,0,4193,4197,
3,986,493,0,4194,4197,3,992,496,0,4195,4197,3,994,497,0,4196,4193,1,0,0,
0,4196,4194,1,0,0,0,4196,4195,1,0,0,0,4197,985,1,0,0,0,4198,4199,5,186,0,
0,4199,4200,5,44,0,0,4200,4201,3,988,494,0,4201,4202,5,34,0,0,4202,4203,
3,990,495,0,4203,4204,5,45,0,0,4204,987,1,0,0,0,4205,4206,3,944,472,0,4206,
989,1,0,0,0,4207,4208,3,944,472,0,4208,991,1,0,0,0,4209,4210,5,179,0,0,4210,
4211,5,44,0,0,4211,4212,3,944,472,0,4212,4213,5,45,0,0,4213,993,1,0,0,0,
4214,4215,5,173,0,0,4215,4216,5,44,0,0,4216,4217,3,944,472,0,4217,4218,5,
45,0,0,4218,995,1,0,0,0,4219,4220,5,129,0,0,4220,4221,5,44,0,0,4221,4222,
3,944,472,0,4222,4223,5,45,0,0,4223,997,1,0,0,0,4224,4225,5,210,0,0,4225,
4226,5,44,0,0,4226,4227,3,1000,500,0,4227,4228,5,34,0,0,4228,4229,3,1002,
501,0,4229,4230,5,45,0,0,4230,999,1,0,0,0,4231,4232,3,944,472,0,4232,1001,
1,0,0,0,4233,4234,3,944,472,0,4234,1003,1,0,0,0,4235,4236,5,234,0,0,4236,
4237,5,44,0,0,4237,4238,3,944,472,0,4238,4239,5,45,0,0,4239,1005,1,0,0,0,
4240,4241,5,139,0,0,4241,4242,5,44,0,0,4242,4243,3,944,472,0,4243,4244,5,
45,0,0,4244,1007,1,0,0,0,4245,4246,7,28,0,0,4246,4247,5,44,0,0,4247,4248,
3,944,472,0,4248,4249,5,45,0,0,4249,1009,1,0,0,0,4250,4253,3,1012,506,0,
4251,4253,3,1020,510,0,4252,4250,1,0,0,0,4252,4251,1,0,0,0,4253,1011,1,0,
0,0,4254,4257,3,1014,507,0,4255,4257,3,1016,508,0,4256,4254,1,0,0,0,4256,
4255,1,0,0,0,4257,1013,1,0,0,0,4258,4259,3,1016,508,0,4259,4260,5,59,0,0,
4260,4261,3,1012,506,0,4261,1015,1,0,0,0,4262,4263,3,1018,509,0,4263,1017,
1,0,0,0,4264,4267,3,952,476,0,4265,4267,3,1028,514,0,4266,4264,1,0,0,0,4266,
4265,1,0,0,0,4267,1019,1,0,0,0,4268,4271,3,1026,513,0,4269,4271,3,1022,511,
0,4270,4268,1,0,0,0,4270,4269,1,0,0,0,4271,1021,1,0,0,0,4272,4273,3,1024,
512,0,4273,1023,1,0,0,0,4274,4277,3,952,476,0,4275,4277,3,1028,514,0,4276,
4274,1,0,0,0,4276,4275,1,0,0,0,4277,1025,1,0,0,0,4278,4279,3,1022,511,0,
4279,4280,5,59,0,0,4280,4281,3,1020,510,0,4281,1027,1,0,0,0,4282,4285,3,
1030,515,0,4283,4285,3,1052,526,0,4284,4282,1,0,0,0,4284,4283,1,0,0,0,4285,
1029,1,0,0,0,4286,4290,3,1032,516,0,4287,4290,3,1034,517,0,4288,4290,3,1048,
524,0,4289,4286,1,0,0,0,4289,4287,1,0,0,0,4289,4288,1,0,0,0,4290,1031,1,
0,0,0,4291,4292,7,29,0,0,4292,4293,5,44,0,0,4293,4294,3,1012,506,0,4294,
4295,5,45,0,0,4295,1033,1,0,0,0,4296,4299,3,1036,518,0,4297,4299,3,1038,
519,0,4298,4296,1,0,0,0,4298,4297,1,0,0,0,4299,1035,1,0,0,0,4300,4301,5,
246,0,0,4301,4302,5,44,0,0,4302,4303,3,1040,520,0,4303,4304,5,45,0,0,4304,
1037,1,0,0,0,4305,4306,7,30,0,0,4306,4307,5,44,0,0,4307,4308,3,1042,521,
0,4308,4309,5,34,0,0,4309,4310,3,1046,523,0,4310,4311,1,0,0,0,4311,4312,
5,45,0,0,4312,1039,1,0,0,0,4313,4315,3,1044,522,0,4314,4313,1,0,0,0,4314,
4315,1,0,0,0,4315,4317,1,0,0,0,4316,4318,3,1046,523,0,4317,4316,1,0,0,0,
4317,4318,1,0,0,0,4318,4319,1,0,0,0,4319,4321,5,141,0,0,4320,4314,1,0,0,
0,4320,4321,1,0,0,0,4321,4322,1,0,0,0,4322,4323,3,1042,521,0,4323,1041,1,
0,0,0,4324,4325,3,1012,506,0,4325,1043,1,0,0,0,4326,4327,7,31,0,0,4327,1045,
1,0,0,0,4328,4329,3,1012,506,0,4329,1047,1,0,0,0,4330,4331,5,190,0,0,4331,
4332,5,44,0,0,4332,4333,3,1012,506,0,4333,4334,5,34,0,0,4334,4335,3,1050,
525,0,4335,4336,1,0,0,0,4336,4337,5,45,0,0,4337,1049,1,0,0,0,4338,4339,7,
32,0,0,4339,1051,1,0,0,0,4340,4341,3,1054,527,0,4341,1053,1,0,0,0,4342,4343,
5,246,0,0,4343,4344,5,44,0,0,4344,4345,3,1056,528,0,4345,4346,5,45,0,0,4346,
1055,1,0,0,0,4347,4349,3,1044,522,0,4348,4347,1,0,0,0,4348,4349,1,0,0,0,
4349,4351,1,0,0,0,4350,4352,3,1060,530,0,4351,4350,1,0,0,0,4351,4352,1,0,
0,0,4352,4353,1,0,0,0,4353,4355,5,141,0,0,4354,4348,1,0,0,0,4354,4355,1,
0,0,0,4355,4356,1,0,0,0,4356,4357,3,1058,529,0,4357,1057,1,0,0,0,4358,4359,
3,1020,510,0,4359,1059,1,0,0,0,4360,4361,3,1020,510,0,4361,1061,1,0,0,0,
4362,4363,3,944,472,0,4363,1063,1,0,0,0,4364,4365,6,532,-1,0,4365,4371,3,
1066,533,0,4366,4367,3,1090,545,0,4367,4368,5,26,0,0,4368,4369,3,1066,533,
0,4369,4371,1,0,0,0,4370,4364,1,0,0,0,4370,4366,1,0,0,0,4371,4380,1,0,0,
0,4372,4373,10,2,0,0,4373,4374,5,26,0,0,4374,4379,3,1096,548,0,4375,4376,
10,1,0,0,4376,4377,5,27,0,0,4377,4379,3,1096,548,0,4378,4372,1,0,0,0,4378,
4375,1,0,0,0,4379,4382,1,0,0,0,4380,4378,1,0,0,0,4380,4381,1,0,0,0,4381,
1065,1,0,0,0,4382,4380,1,0,0,0,4383,4384,3,1068,534,0,4384,1067,1,0,0,0,
4385,4386,3,1070,535,0,4386,1069,1,0,0,0,4387,4390,3,952,476,0,4388,4390,
3,1072,536,0,4389,4387,1,0,0,0,4389,4388,1,0,0,0,4390,1071,1,0,0,0,4391,
4397,3,1074,537,0,4392,4397,3,1076,538,0,4393,4397,3,1080,540,0,4394,4397,
3,1078,539,0,4395,4397,3,1082,541,0,4396,4391,1,0,0,0,4396,4392,1,0,0,0,
4396,4393,1,0,0,0,4396,4394,1,0,0,0,4396,4395,1,0,0,0,4397,1073,1,0,0,0,
4398,4406,5,102,0,0,4399,4400,5,109,0,0,4400,4402,5,44,0,0,4401,4403,3,1084,
542,0,4402,4401,1,0,0,0,4402,4403,1,0,0,0,4403,4404,1,0,0,0,4404,4406,5,
45,0,0,4405,4398,1,0,0,0,4405,4399,1,0,0,0,4406,1075,1,0,0,0,4407,4415,5,
106,0,0,4408,4409,5,275,0,0,4409,4411,5,44,0,0,4410,4412,3,1086,543,0,4411,
4410,1,0,0,0,4411,4412,1,0,0,0,4412,4413,1,0,0,0,4413,4415,5,45,0,0,4414,
4407,1,0,0,0,4414,4408,1,0,0,0,4415,1077,1,0,0,0,4416,4417,5,176,0,0,4417,
4419,5,44,0,0,4418,4420,3,1086,543,0,4419,4418,1,0,0,0,4419,4420,1,0,0,0,
4420,4422,1,0,0,0,4421,4423,5,45,0,0,4422,4421,1,0,0,0,4422,4423,1,0,0,0,
4423,1079,1,0,0,0,4424,4432,5,107,0,0,4425,4426,5,274,0,0,4426,4428,5,44,
0,0,4427,4429,3,1088,544,0,4428,4427,1,0,0,0,4428,4429,1,0,0,0,4429,4430,
1,0,0,0,4430,4432,5,45,0,0,4431,4424,1,0,0,0,4431,4425,1,0,0,0,4432,1081,
1,0,0,0,4433,4441,5,177,0,0,4434,4435,5,175,0,0,4435,4437,5,44,0,0,4436,
4438,3,1088,544,0,4437,4436,1,0,0,0,4437,4438,1,0,0,0,4438,4439,1,0,0,0,
4439,4441,5,45,0,0,4440,4433,1,0,0,0,4440,4434,1,0,0,0,4441,1083,1,0,0,0,
4442,4445,3,1242,621,0,4443,4445,3,1140,570,0,4444,4442,1,0,0,0,4444,4443,
1,0,0,0,4445,1085,1,0,0,0,4446,4449,3,1244,622,0,4447,4449,3,1140,570,0,
4448,4446,1,0,0,0,4448,4447,1,0,0,0,4449,1087,1,0,0,0,4450,4453,3,1246,623,
0,4451,4453,3,1140,570,0,4452,4450,1,0,0,0,4452,4451,1,0,0,0,4453,1089,1,
0,0,0,4454,4455,6,545,-1,0,4455,4458,3,1096,548,0,4456,4458,3,1092,546,0,
4457,4454,1,0,0,0,4457,4456,1,0,0,0,4458,4467,1,0,0,0,4459,4460,10,3,0,0,
4460,4461,5,26,0,0,4461,4466,3,1096,548,0,4462,4463,10,2,0,0,4463,4464,5,
27,0,0,4464,4466,3,1096,548,0,4465,4459,1,0,0,0,4465,4462,1,0,0,0,4466,4469,
1,0,0,0,4467,4465,1,0,0,0,4467,4468,1,0,0,0,4468,1091,1,0,0,0,4469,4467,
1,0,0,0,4470,4471,5,123,0,0,4471,4472,5,44,0,0,4472,4473,3,1094,547,0,4473,
4474,5,45,0,0,4474,1093,1,0,0,0,4475,4476,3,1064,532,0,4476,4477,5,34,0,
0,4477,4478,3,1064,532,0,4478,1095,1,0,0,0,4479,4480,6,548,-1,0,4480,4486,
3,1098,549,0,4481,4482,3,946,473,0,4482,4483,5,30,0,0,4483,4484,3,1098,549,
0,4484,4486,1,0,0,0,4485,4479,1,0,0,0,4485,4481,1,0,0,0,4486,4495,1,0,0,
0,4487,4488,10,3,0,0,4488,4489,5,30,0,0,4489,4494,3,948,474,0,4490,4491,
10,2,0,0,4491,4492,5,48,0,0,4492,4494,3,948,474,0,4493,4487,1,0,0,0,4493,
4490,1,0,0,0,4494,4497,1,0,0,0,4495,4493,1,0,0,0,4495,4496,1,0,0,0,4496,
1097,1,0,0,0,4497,4495,1,0,0,0,4498,4500,5,368,0,0,4499,4498,1,0,0,0,4499,
4500,1,0,0,0,4500,4501,1,0,0,0,4501,4502,3,1100,550,0,4502,1099,1,0,0,0,
4503,4506,3,952,476,0,4504,4506,3,1112,556,0,4505,4503,1,0,0,0,4505,4504,
1,0,0,0,4506,1101,1,0,0,0,4507,4508,3,1090,545,0,4508,1103,1,0,0,0,4509,
4510,3,1096,548,0,4510,1105,1,0,0,0,4511,4512,3,1096,548,0,4512,1107,1,0,
0,0,4513,4514,3,1064,532,0,4514,1109,1,0,0,0,4515,4516,3,1064,532,0,4516,
1111,1,0,0,0,4517,4520,3,1114,557,0,4518,4520,3,1118,559,0,4519,4517,1,0,
0,0,4519,4518,1,0,0,0,4520,1113,1,0,0,0,4521,4522,5,122,0,0,4522,4523,5,
44,0,0,4523,4524,3,1116,558,0,4524,4525,5,45,0,0,4525,1115,1,0,0,0,4526,
4529,3,1252,626,0,4527,4529,3,1140,570,0,4528,4526,1,0,0,0,4528,4527,1,0,
0,0,4529,1117,1,0,0,0,4530,4531,5,60,0,0,4531,4532,5,44,0,0,4532,4533,3,
1090,545,0,4533,4534,5,45,0,0,4534,1119,1,0,0,0,4535,4538,3,1122,561,0,4536,
4538,3,1124,562,0,4537,4535,1,0,0,0,4537,4536,1,0,0,0,4538,1121,1,0,0,0,
4539,4540,3,1124,562,0,4540,4541,5,59,0,0,4541,4542,3,1120,560,0,4542,1123,
1,0,0,0,4543,4546,3,1126,563,0,4544,4546,3,952,476,0,4545,4543,1,0,0,0,4545,
4544,1,0,0,0,4546,1125,1,0,0,0,4547,4548,3,1128,564,0,4548,4549,3,1130,565,
0,4549,1127,1,0,0,0,4550,4551,5,246,0,0,4551,4552,5,44,0,0,4552,4553,3,1120,
560,0,4553,4554,5,34,0,0,4554,4555,3,944,472,0,4555,4556,5,45,0,0,4556,1129,
1,0,0,0,4557,4558,5,321,0,0,4558,4559,5,44,0,0,4559,4560,3,1148,574,0,4560,
4561,5,45,0,0,4561,1131,1,0,0,0,4562,4563,3,1134,567,0,4563,1133,1,0,0,0,
4564,4565,5,42,0,0,4565,4566,3,766,383,0,4566,4567,5,43,0,0,4567,4568,5,
42,0,0,4568,4569,3,1136,568,0,4569,4570,5,43,0,0,4570,1135,1,0,0,0,4571,
4576,3,1138,569,0,4572,4573,5,34,0,0,4573,4575,3,1138,569,0,4574,4572,1,
0,0,0,4575,4578,1,0,0,0,4576,4574,1,0,0,0,4576,4577,1,0,0,0,4577,1137,1,
0,0,0,4578,4576,1,0,0,0,4579,4580,3,908,454,0,4580,1139,1,0,0,0,4581,4583,
5,215,0,0,4582,4581,1,0,0,0,4582,4583,1,0,0,0,4583,4584,1,0,0,0,4584,4585,
3,1142,571,0,4585,1141,1,0,0,0,4586,4588,5,40,0,0,4587,4589,3,1144,572,0,
4588,4587,1,0,0,0,4588,4589,1,0,0,0,4589,4590,1,0,0,0,4590,4591,5,41,0,0,
4591,1143,1,0,0,0,4592,4597,3,1146,573,0,4593,4594,5,34,0,0,4594,4596,3,
1146,573,0,4595,4593,1,0,0,0,4596,4599,1,0,0,0,4597,4595,1,0,0,0,4597,4598,
1,0,0,0,4598,1145,1,0,0,0,4599,4597,1,0,0,0,4600,4601,3,1290,645,0,4601,
4602,5,32,0,0,4602,4603,3,908,454,0,4603,1147,1,0,0,0,4604,4607,3,1150,575,
0,4605,4607,3,1152,576,0,4606,4604,1,0,0,0,4606,4605,1,0,0,0,4607,1149,1,
0,0,0,4608,4609,3,1152,576,0,4609,4610,5,59,0,0,4610,4611,3,1148,574,0,4611,
1151,1,0,0,0,4612,4613,3,952,476,0,4613,1153,1,0,0,0,4614,4615,3,1156,578,
0,4615,1155,1,0,0,0,4616,4617,5,205,0,0,4617,4618,5,44,0,0,4618,4619,3,1158,
579,0,4619,4620,5,45,0,0,4620,1157,1,0,0,0,4621,4623,3,1160,580,0,4622,4624,
3,1162,581,0,4623,4622,1,0,0,0,4623,4624,1,0,0,0,4624,1159,1,0,0,0,4625,
4626,3,920,460,0,4626,1161,1,0,0,0,4627,4628,5,34,0,0,4628,4629,3,922,461,
0,4629,4630,5,34,0,0,4630,4631,3,920,460,0,4631,1163,1,0,0,0,4632,4633,3,
1166,583,0,4633,4634,5,54,0,0,4634,4635,3,1288,644,0,4635,1165,1,0,0,0,4636,
4640,3,920,460,0,4637,4640,3,922,461,0,4638,4640,3,924,462,0,4639,4636,1,
0,0,0,4639,4637,1,0,0,0,4639,4638,1,0,0,0,4640,1167,1,0,0,0,4641,4642,5,
263,0,0,4642,4643,3,54,27,0,4643,1169,1,0,0,0,4644,4647,3,1172,586,0,4645,
4647,3,1174,587,0,4646,4644,1,0,0,0,4646,4645,1,0,0,0,4647,1171,1,0,0,0,
4648,4649,5,194,0,0,4649,4650,5,44,0,0,4650,4651,3,908,454,0,4651,4652,5,
34,0,0,4652,4653,3,908,454,0,4653,4654,5,45,0,0,4654,4668,1,0,0,0,4655,4656,
5,93,0,0,4656,4657,5,44,0,0,4657,4662,3,908,454,0,4658,4659,5,34,0,0,4659,
4661,3,908,454,0,4660,4658,1,0,0,0,4661,4664,1,0,0,0,4662,4660,1,0,0,0,4662,
4663,1,0,0,0,4663,4665,1,0,0,0,4664,4662,1,0,0,0,4665,4666,5,45,0,0,4666,
4668,1,0,0,0,4667,4648,1,0,0,0,4667,4655,1,0,0,0,4668,1173,1,0,0,0,4669,
4672,3,1176,588,0,4670,4672,3,1178,589,0,4671,4669,1,0,0,0,4671,4670,1,0,
0,0,4672,1175,1,0,0,0,4673,4674,5,85,0,0,4674,4675,3,1186,593,0,4675,4677,
3,1180,590,0,4676,4678,3,1184,592,0,4677,4676,1,0,0,0,4677,4678,1,0,0,0,
4678,4679,1,0,0,0,4679,4680,5,126,0,0,4680,1177,1,0,0,0,4681,4682,5,85,0,
0,4682,4684,3,1182,591,0,4683,4685,3,1184,592,0,4684,4683,1,0,0,0,4684,4685,
1,0,0,0,4685,4686,1,0,0,0,4686,4687,5,126,0,0,4687,1179,1,0,0,0,4688,4689,
5,267,0,0,4689,4690,3,1188,594,0,4690,4691,5,242,0,0,4691,4692,3,1192,596,
0,4692,1181,1,0,0,0,4693,4694,5,267,0,0,4694,4695,3,834,417,0,4695,4696,
5,242,0,0,4696,4697,3,1192,596,0,4697,1183,1,0,0,0,4698,4699,5,125,0,0,4699,
4700,3,1192,596,0,4700,1185,1,0,0,0,4701,4704,3,956,478,0,4702,4704,3,300,
150,0,4703,4701,1,0,0,0,4703,4702,1,0,0,0,4704,1187,1,0,0,0,4705,4710,3,
1190,595,0,4706,4707,5,34,0,0,4707,4709,3,1190,595,0,4708,4706,1,0,0,0,4709,
4712,1,0,0,0,4710,4708,1,0,0,0,4710,4711,1,0,0,0,4711,1189,1,0,0,0,4712,
4710,1,0,0,0,4713,4722,3,956,478,0,4714,4722,3,840,420,0,4715,4722,3,862,
431,0,4716,4722,3,866,433,0,4717,4722,3,874,437,0,4718,4722,3,878,439,0,
4719,4722,3,886,443,0,4720,4722,3,888,444,0,4721,4713,1,0,0,0,4721,4714,
1,0,0,0,4721,4715,1,0,0,0,4721,4716,1,0,0,0,4721,4717,1,0,0,0,4721,4718,
1,0,0,0,4721,4719,1,0,0,0,4721,4720,1,0,0,0,4722,1191,1,0,0,0,4723,4726,
3,1194,597,0,4724,4726,5,192,0,0,4725,4723,1,0,0,0,4725,4724,1,0,0,0,4726,
1193,1,0,0,0,4727,4728,3,908,454,0,4728,1195,1,0,0,0,4729,4730,5,86,0,0,
4730,4731,5,44,0,0,4731,4732,3,1198,599,0,4732,4733,5,67,0,0,4733,4734,3,
1200,600,0,4734,4735,5,45,0,0,4735,1197,1,0,0,0,4736,4737,3,908,454,0,4737,
1199,1,0,0,0,4738,4739,3,684,342,0,4739,1201,1,0,0,0,4740,4741,5,124,0,0,
4741,4742,5,44,0,0,4742,4743,3,300,150,0,4743,4744,5,45,0,0,4744,1203,1,
0,0,0,4745,4746,5,169,0,0,4746,4747,3,234,117,0,4747,4748,5,149,0,0,4748,
4749,3,908,454,0,4749,4750,5,126,0,0,4750,1205,1,0,0,0,4751,4754,5,367,0,
0,4752,4754,3,1208,604,0,4753,4751,1,0,0,0,4753,4752,1,0,0,0,4754,1207,1,
0,0,0,4755,4759,3,1210,605,0,4756,4759,3,1260,630,0,4757,4759,3,1262,631,
0,4758,4755,1,0,0,0,4758,4756,1,0,0,0,4758,4757,1,0,0,0,4759,1209,1,0,0,
0,4760,4767,3,1214,607,0,4761,4767,3,1216,608,0,4762,4767,5,384,0,0,4763,
4767,3,1234,617,0,4764,4767,3,1250,625,0,4765,4767,3,1258,629,0,4766,4760,
1,0,0,0,4766,4761,1,0,0,0,4766,4762,1,0,0,0,4766,4763,1,0,0,0,4766,4764,
1,0,0,0,4766,4765,1,0,0,0,4767,1211,1,0,0,0,4768,4771,5,366,0,0,4769,4771,
3,1208,604,0,4770,4768,1,0,0,0,4770,4769,1,0,0,0,4771,1213,1,0,0,0,4772,
4773,7,24,0,0,4773,1215,1,0,0,0,4774,4778,3,1220,610,0,4775,4778,3,1222,
611,0,4776,4778,3,1224,612,0,4777,4774,1,0,0,0,4777,4775,1,0,0,0,4777,4776,
1,0,0,0,4778,1217,1,0,0,0,4779,4781,3,1226,613,0,4780,4779,1,0,0,0,4780,
4781,1,0,0,0,4781,4782,1,0,0,0,4782,4788,3,1228,614,0,4783,4785,3,1226,613,
0,4784,4783,1,0,0,0,4784,4785,1,0,0,0,4785,4786,1,0,0,0,4786,4788,3,1230,
615,0,4787,4780,1,0,0,0,4787,4784,1,0,0,0,4788,1219,1,0,0,0,4789,4791,3,
1226,613,0,4790,4789,1,0,0,0,4790,4791,1,0,0,0,4791,4792,1,0,0,0,4792,4797,
3,1228,614,0,4793,4794,5,52,0,0,4794,4796,3,1228,614,0,4795,4793,1,0,0,0,
4796,4799,1,0,0,0,4797,4795,1,0,0,0,4797,4798,1,0,0,0,4798,1221,1,0,0,0,
4799,4797,1,0,0,0,4800,4802,3,1226,613,0,4801,4800,1,0,0,0,4801,4802,1,0,
0,0,4802,4803,1,0,0,0,4803,4808,3,1230,615,0,4804,4805,5,52,0,0,4805,4807,
3,1230,615,0,4806,4804,1,0,0,0,4807,4810,1,0,0,0,4808,4806,1,0,0,0,4808,
4809,1,0,0,0,4809,1223,1,0,0,0,4810,4808,1,0,0,0,4811,4813,3,1226,613,0,
4812,4811,1,0,0,0,4812,4813,1,0,0,0,4813,4814,1,0,0,0,4814,4819,3,1232,616,
0,4815,4816,5,52,0,0,4816,4818,3,1232,616,0,4817,4815,1,0,0,0,4818,4821,
1,0,0,0,4819,4817,1,0,0,0,4819,4820,1,0,0,0,4820,1225,1,0,0,0,4821,4819,
1,0,0,0,4822,4823,5,56,0,0,4823,1227,1,0,0,0,4824,4825,5,385,0,0,4825,1229,
1,0,0,0,4826,4827,5,386,0,0,4827,1231,1,0,0,0,4828,4829,5,387,0,0,4829,1233,
1,0,0,0,4830,4835,3,1236,618,0,4831,4835,3,1238,619,0,4832,4835,3,1240,620,
0,4833,4835,3,1248,624,0,4834,4830,1,0,0,0,4834,4831,1,0,0,0,4834,4832,1,
0,0,0,4834,4833,1,0,0,0,4835,1235,1,0,0,0,4836,4837,5,109,0,0,4837,4838,
3,1218,609,0,4838,1237,1,0,0,0,4839,4840,5,243,0,0,4840,4841,3,1218,609,
0,4841,1239,1,0,0,0,4842,4843,5,110,0,0,4843,4847,3,1218,609,0,4844,4845,
5,244,0,0,4845,4847,3,1218,609,0,4846,4842,1,0,0,0,4846,4844,1,0,0,0,4847,
1241,1,0,0,0,4848,4849,3,1218,609,0,4849,1243,1,0,0,0,4850,4851,3,1218,609,
0,4851,1245,1,0,0,0,4852,4853,3,1218,609,0,4853,1247,1,0,0,0,4854,4855,5,
109,0,0,4855,4856,5,22,0,0,4856,4857,5,377,0,0,4857,4858,5,27,0,0,4858,4859,
5,378,0,0,4859,4860,5,27,0,0,4860,4861,5,378,0,0,4861,4897,5,22,0,0,4862,
4863,5,243,0,0,4863,4864,5,22,0,0,4864,4865,5,378,0,0,4865,4866,5,32,0,0,
4866,4867,5,378,0,0,4867,4868,5,32,0,0,4868,4869,5,378,0,0,4869,4897,5,22,
0,0,4870,4871,5,244,0,0,4871,4872,5,22,0,0,4872,4873,5,377,0,0,4873,4874,
5,27,0,0,4874,4875,5,378,0,0,4875,4876,5,27,0,0,4876,4877,5,378,0,0,4877,
4878,5,378,0,0,4878,4879,5,32,0,0,4879,4880,5,378,0,0,4880,4881,5,32,0,0,
4881,4882,5,378,0,0,4882,4897,5,22,0,0,4883,4884,5,110,0,0,4884,4885,5,22,
0,0,4885,4886,5,377,0,0,4886,4887,5,27,0,0,4887,4888,5,378,0,0,4888,4889,
5,27,0,0,4889,4890,5,378,0,0,4890,4891,5,378,0,0,4891,4892,5,32,0,0,4892,
4893,5,378,0,0,4893,4894,5,32,0,0,4894,4895,5,378,0,0,4895,4897,5,22,0,0,
4896,4854,1,0,0,0,4896,4862,1,0,0,0,4896,4870,1,0,0,0,4896,4883,1,0,0,0,
4897,1249,1,0,0,0,4898,4899,5,122,0,0,4899,4902,3,1252,626,0,4900,4902,3,
1254,627,0,4901,4898,1,0,0,0,4901,4900,1,0,0,0,4902,1251,1,0,0,0,4903,4904,
3,1218,609,0,4904,1253,1,0,0,0,4905,4906,5,379,0,0,4906,4907,3,1256,628,
0,4907,1255,1,0,0,0,4908,4909,7,33,0,0,4909,1257,1,0,0,0,4910,4911,5,192,
0,0,4911,1259,1,0,0,0,4912,4913,3,1134,567,0,4913,1261,1,0,0,0,4914,4915,
3,1140,570,0,4915,1263,1,0,0,0,4916,4917,3,1318,659,0,4917,1265,1,0,0,0,
4918,4919,5,396,0,0,4919,1267,1,0,0,0,4920,4921,3,1318,659,0,4921,1269,1,
0,0,0,4922,4923,3,1318,659,0,4923,1271,1,0,0,0,4924,4927,5,396,0,0,4925,
4927,3,1274,637,0,4926,4924,1,0,0,0,4926,4925,1,0,0,0,4927,1273,1,0,0,0,
4928,4929,3,1324,662,0,4929,1275,1,0,0,0,4930,4931,3,1318,659,0,4931,1277,
1,0,0,0,4932,4933,3,1318,659,0,4933,1279,1,0,0,0,4934,4937,5,396,0,0,4935,
4937,3,1282,641,0,4936,4934,1,0,0,0,4936,4935,1,0,0,0,4937,1281,1,0,0,0,
4938,4939,3,1324,662,0,4939,1283,1,0,0,0,4940,4941,3,1318,659,0,4941,1285,
1,0,0,0,4942,4943,3,1318,659,0,4943,1287,1,0,0,0,4944,4945,3,1318,659,0,
4945,1289,1,0,0,0,4946,4947,3,1318,659,0,4947,1291,1,0,0,0,4948,4949,5,35,
0,0,4949,4950,3,1320,660,0,4950,1293,1,0,0,0,4951,4957,3,1296,648,0,4952,
4957,3,1298,649,0,4953,4957,3,1308,654,0,4954,4957,3,1310,655,0,4955,4957,
3,1312,656,0,4956,4951,1,0,0,0,4956,4952,1,0,0,0,4956,4953,1,0,0,0,4956,
4954,1,0,0,0,4956,4955,1,0,0,0,4957,1295,1,0,0,0,4958,4959,3,1312,656,0,
4959,1297,1,0,0,0,4960,4963,3,1302,651,0,4961,4963,3,1300,650,0,4962,4960,
1,0,0,0,4962,4961,1,0,0,0,4963,1299,1,0,0,0,4964,4967,3,1304,652,0,4965,
4967,3,1306,653,0,4966,4964,1,0,0,0,4966,4965,1,0,0,0,4967,1301,1,0,0,0,
4968,4969,3,1312,656,0,4969,1303,1,0,0,0,4970,4971,3,1312,656,0,4971,1305,
1,0,0,0,4972,4973,5,396,0,0,4973,1307,1,0,0,0,4974,4975,3,1312,656,0,4975,
1309,1,0,0,0,4976,4977,3,1312,656,0,4977,1311,1,0,0,0,4978,4979,5,396,0,
0,4979,1313,1,0,0,0,4980,4983,3,1316,658,0,4981,4983,3,1334,667,0,4982,4980,
1,0,0,0,4982,4981,1,0,0,0,4983,1315,1,0,0,0,4984,4991,5,396,0,0,4985,4991,
3,1292,646,0,4986,4991,3,1326,663,0,4987,4991,5,366,0,0,4988,4991,5,384,
0,0,4989,4991,5,58,0,0,4990,4984,1,0,0,0,4990,4985,1,0,0,0,4990,4986,1,0,
0,0,4990,4987,1,0,0,0,4990,4988,1,0,0,0,4990,4989,1,0,0,0,4991,1317,1,0,
0,0,4992,4995,5,396,0,0,4993,4995,3,1324,662,0,4994,4992,1,0,0,0,4994,4993,
1,0,0,0,4995,1319,1,0,0,0,4996,4999,5,396,0,0,4997,4999,3,1324,662,0,4998,
4996,1,0,0,0,4998,4997,1,0,0,0,4999,1321,1,0,0,0,5000,5001,7,34,0,0,5001,
1323,1,0,0,0,5002,5005,3,1222,611,0,5003,5005,3,1224,612,0,5004,5002,1,0,
0,0,5004,5003,1,0,0,0,5005,1325,1,0,0,0,5006,5009,3,1328,664,0,5007,5009,
3,1332,666,0,5008,5006,1,0,0,0,5008,5007,1,0,0,0,5009,1327,1,0,0,0,5010,
5228,3,1330,665,0,5011,5228,5,60,0,0,5012,5228,5,61,0,0,5013,5228,5,62,0,
0,5014,5228,5,63,0,0,5015,5228,5,64,0,0,5016,5228,5,65,0,0,5017,5228,5,66,
0,0,5018,5228,5,67,0,0,5019,5228,5,68,0,0,5020,5228,5,69,0,0,5021,5228,5,
70,0,0,5022,5228,5,71,0,0,5023,5228,5,72,0,0,5024,5228,5,73,0,0,5025,5228,
5,74,0,0,5026,5228,5,75,0,0,5027,5228,5,76,0,0,5028,5228,5,77,0,0,5029,5228,
5,78,0,0,5030,5228,5,79,0,0,5031,5228,5,80,0,0,5032,5228,5,81,0,0,5033,5228,
5,82,0,0,5034,5228,5,83,0,0,5035,5228,5,84,0,0,5036,5228,5,85,0,0,5037,5228,
5,86,0,0,5038,5228,5,87,0,0,5039,5228,5,88,0,0,5040,5228,5,89,0,0,5041,5228,
5,90,0,0,5042,5228,5,91,0,0,5043,5228,5,92,0,0,5044,5228,5,93,0,0,5045,5228,
5,94,0,0,5046,5228,5,95,0,0,5047,5228,5,96,0,0,5048,5228,5,97,0,0,5049,5228,
5,98,0,0,5050,5228,5,99,0,0,5051,5228,5,100,0,0,5052,5228,5,101,0,0,5053,
5228,5,102,0,0,5054,5228,5,103,0,0,5055,5228,5,104,0,0,5056,5228,5,105,0,
0,5057,5228,5,106,0,0,5058,5228,5,107,0,0,5059,5228,5,108,0,0,5060,5228,
5,109,0,0,5061,5228,5,110,0,0,5062,5228,5,111,0,0,5063,5228,5,112,0,0,5064,
5228,5,113,0,0,5065,5228,5,114,0,0,5066,5228,5,115,0,0,5067,5228,5,116,0,
0,5068,5228,5,117,0,0,5069,5228,5,118,0,0,5070,5228,5,119,0,0,5071,5228,
5,120,0,0,5072,5228,5,121,0,0,5073,5228,5,122,0,0,5074,5228,5,123,0,0,5075,
5228,5,124,0,0,5076,5228,5,125,0,0,5077,5228,5,126,0,0,5078,5228,5,127,0,
0,5079,5228,5,128,0,0,5080,5228,5,129,0,0,5081,5228,5,130,0,0,5082,5228,
5,131,0,0,5083,5228,5,132,0,0,5084,5228,5,133,0,0,5085,5228,5,134,0,0,5086,
5228,5,135,0,0,5087,5228,5,136,0,0,5088,5228,5,137,0,0,5089,5228,5,138,0,
0,5090,5228,5,139,0,0,5091,5228,5,140,0,0,5092,5228,5,141,0,0,5093,5228,
5,142,0,0,5094,5228,5,143,0,0,5095,5228,5,144,0,0,5096,5228,5,145,0,0,5097,
5228,5,146,0,0,5098,5228,5,147,0,0,5099,5228,5,148,0,0,5100,5228,5,149,0,
0,5101,5228,5,150,0,0,5102,5228,5,151,0,0,5103,5228,5,152,0,0,5104,5228,
5,153,0,0,5105,5228,5,154,0,0,5106,5228,5,155,0,0,5107,5228,5,156,0,0,5108,
5228,5,157,0,0,5109,5228,5,158,0,0,5110,5228,5,159,0,0,5111,5228,5,160,0,
0,5112,5228,5,161,0,0,5113,5228,5,162,0,0,5114,5228,5,163,0,0,5115,5228,
5,164,0,0,5116,5228,5,165,0,0,5117,5228,5,166,0,0,5118,5228,5,167,0,0,5119,
5228,5,168,0,0,5120,5228,5,169,0,0,5121,5228,5,170,0,0,5122,5228,5,171,0,
0,5123,5228,5,172,0,0,5124,5228,5,173,0,0,5125,5228,5,174,0,0,5126,5228,
5,175,0,0,5127,5228,5,176,0,0,5128,5228,5,177,0,0,5129,5228,5,178,0,0,5130,
5228,5,179,0,0,5131,5228,5,180,0,0,5132,5228,5,181,0,0,5133,5228,5,182,0,
0,5134,5228,5,183,0,0,5135,5228,5,184,0,0,5136,5228,5,185,0,0,5137,5228,
5,186,0,0,5138,5228,5,187,0,0,5139,5228,5,188,0,0,5140,5228,5,189,0,0,5141,
5228,5,190,0,0,5142,5228,5,191,0,0,5143,5228,5,192,0,0,5144,5228,5,193,0,
0,5145,5228,5,194,0,0,5146,5228,5,195,0,0,5147,5228,5,196,0,0,5148,5228,
5,197,0,0,5149,5228,5,198,0,0,5150,5228,5,199,0,0,5151,5228,5,200,0,0,5152,
5228,5,201,0,0,5153,5228,5,202,0,0,5154,5228,5,203,0,0,5155,5228,5,204,0,
0,5156,5228,5,205,0,0,5157,5228,5,206,0,0,5158,5228,5,207,0,0,5159,5228,
5,208,0,0,5160,5228,5,209,0,0,5161,5228,5,210,0,0,5162,5228,5,211,0,0,5163,
5228,5,212,0,0,5164,5228,5,213,0,0,5165,5228,5,214,0,0,5166,5228,5,215,0,
0,5167,5228,5,216,0,0,5168,5228,5,217,0,0,5169,5228,5,218,0,0,5170,5228,
5,219,0,0,5171,5228,5,220,0,0,5172,5228,5,221,0,0,5173,5228,5,222,0,0,5174,
5228,5,223,0,0,5175,5228,5,224,0,0,5176,5228,5,225,0,0,5177,5228,5,226,0,
0,5178,5228,5,227,0,0,5179,5228,5,228,0,0,5180,5228,5,229,0,0,5181,5228,
5,230,0,0,5182,5228,5,231,0,0,5183,5228,5,232,0,0,5184,5228,5,233,0,0,5185,
5228,5,234,0,0,5186,5228,5,235,0,0,5187,5228,5,236,0,0,5188,5228,5,237,0,
0,5189,5228,5,238,0,0,5190,5228,5,239,0,0,5191,5228,5,240,0,0,5192,5228,
5,241,0,0,5193,5228,5,242,0,0,5194,5228,5,243,0,0,5195,5228,5,244,0,0,5196,
5228,5,245,0,0,5197,5228,5,246,0,0,5198,5228,5,247,0,0,5199,5228,5,248,0,
0,5200,5228,5,249,0,0,5201,5228,5,250,0,0,5202,5228,5,251,0,0,5203,5228,
5,252,0,0,5204,5228,5,253,0,0,5205,5228,5,254,0,0,5206,5228,5,255,0,0,5207,
5228,5,256,0,0,5208,5228,5,257,0,0,5209,5228,5,258,0,0,5210,5228,5,259,0,
0,5211,5228,5,260,0,0,5212,5228,5,261,0,0,5213,5228,5,262,0,0,5214,5228,
5,263,0,0,5215,5228,5,264,0,0,5216,5228,5,265,0,0,5217,5228,5,266,0,0,5218,
5228,5,267,0,0,5219,5228,5,268,0,0,5220,5228,5,269,0,0,5221,5228,5,270,0,
0,5222,5228,5,271,0,0,5223,5228,5,272,0,0,5224,5228,5,273,0,0,5225,5228,
5,274,0,0,5226,5228,5,275,0,0,5227,5010,1,0,0,0,5227,5011,1,0,0,0,5227,5012,
1,0,0,0,5227,5013,1,0,0,0,5227,5014,1,0,0,0,5227,5015,1,0,0,0,5227,5016,
1,0,0,0,5227,5017,1,0,0,0,5227,5018,1,0,0,0,5227,5019,1,0,0,0,5227,5020,
1,0,0,0,5227,5021,1,0,0,0,5227,5022,1,0,0,0,5227,5023,1,0,0,0,5227,5024,
1,0,0,0,5227,5025,1,0,0,0,5227,5026,1,0,0,0,5227,5027,1,0,0,0,5227,5028,
1,0,0,0,5227,5029,1,0,0,0,5227,5030,1,0,0,0,5227,5031,1,0,0,0,5227,5032,
1,0,0,0,5227,5033,1,0,0,0,5227,5034,1,0,0,0,5227,5035,1,0,0,0,5227,5036,
1,0,0,0,5227,5037,1,0,0,0,5227,5038,1,0,0,0,5227,5039,1,0,0,0,5227,5040,
1,0,0,0,5227,5041,1,0,0,0,5227,5042,1,0,0,0,5227,5043,1,0,0,0,5227,5044,
1,0,0,0,5227,5045,1,0,0,0,5227,5046,1,0,0,0,5227,5047,1,0,0,0,5227,5048,
1,0,0,0,5227,5049,1,0,0,0,5227,5050,1,0,0,0,5227,5051,1,0,0,0,5227,5052,
1,0,0,0,5227,5053,1,0,0,0,5227,5054,1,0,0,0,5227,5055,1,0,0,0,5227,5056,
1,0,0,0,5227,5057,1,0,0,0,5227,5058,1,0,0,0,5227,5059,1,0,0,0,5227,5060,
1,0,0,0,5227,5061,1,0,0,0,5227,5062,1,0,0,0,5227,5063,1,0,0,0,5227,5064,
1,0,0,0,5227,5065,1,0,0,0,5227,5066,1,0,0,0,5227,5067,1,0,0,0,5227,5068,
1,0,0,0,5227,5069,1,0,0,0,5227,5070,1,0,0,0,5227,5071,1,0,0,0,5227,5072,
1,0,0,0,5227,5073,1,0,0,0,5227,5074,1,0,0,0,5227,5075,1,0,0,0,5227,5076,
1,0,0,0,5227,5077,1,0,0,0,5227,5078,1,0,0,0,5227,5079,1,0,0,0,5227,5080,
1,0,0,0,5227,5081,1,0,0,0,5227,5082,1,0,0,0,5227,5083,1,0,0,0,5227,5084,
1,0,0,0,5227,5085,1,0,0,0,5227,5086,1,0,0,0,5227,5087,1,0,0,0,5227,5088,
1,0,0,0,5227,5089,1,0,0,0,5227,5090,1,0,0,0,5227,5091,1,0,0,0,5227,5092,
1,0,0,0,5227,5093,1,0,0,0,5227,5094,1,0,0,0,5227,5095,1,0,0,0,5227,5096,
1,0,0,0,5227,5097,1,0,0,0,5227,5098,1,0,0,0,5227,5099,1,0,0,0,5227,5100,
1,0,0,0,5227,5101,1,0,0,0,5227,5102,1,0,0,0,5227,5103,1,0,0,0,5227,5104,
1,0,0,0,5227,5105,1,0,0,0,5227,5106,1,0,0,0,5227,5107,1,0,0,0,5227,5108,
1,0,0,0,5227,5109,1,0,0,0,5227,5110,1,0,0,0,5227,5111,1,0,0,0,5227,5112,
1,0,0,0,5227,5113,1,0,0,0,5227,5114,1,0,0,0,5227,5115,1,0,0,0,5227,5116,
1,0,0,0,5227,5117,1,0,0,0,5227,5118,1,0,0,0,5227,5119,1,0,0,0,5227,5120,
1,0,0,0,5227,5121,1,0,0,0,5227,5122,1,0,0,0,5227,5123,1,0,0,0,5227,5124,
1,0,0,0,5227,5125,1,0,0,0,5227,5126,1,0,0,0,5227,5127,1,0,0,0,5227,5128,
1,0,0,0,5227,5129,1,0,0,0,5227,5130,1,0,0,0,5227,5131,1,0,0,0,5227,5132,
1,0,0,0,5227,5133,1,0,0,0,5227,5134,1,0,0,0,5227,5135,1,0,0,0,5227,5136,
1,0,0,0,5227,5137,1,0,0,0,5227,5138,1,0,0,0,5227,5139,1,0,0,0,5227,5140,
1,0,0,0,5227,5141,1,0,0,0,5227,5142,1,0,0,0,5227,5143,1,0,0,0,5227,5144,
1,0,0,0,5227,5145,1,0,0,0,5227,5146,1,0,0,0,5227,5147,1,0,0,0,5227,5148,
1,0,0,0,5227,5149,1,0,0,0,5227,5150,1,0,0,0,5227,5151,1,0,0,0,5227,5152,
1,0,0,0,5227,5153,1,0,0,0,5227,5154,1,0,0,0,5227,5155,1,0,0,0,5227,5156,
1,0,0,0,5227,5157,1,0,0,0,5227,5158,1,0,0,0,5227,5159,1,0,0,0,5227,5160,
1,0,0,0,5227,5161,1,0,0,0,5227,5162,1,0,0,0,5227,5163,1,0,0,0,5227,5164,
1,0,0,0,5227,5165,1,0,0,0,5227,5166,1,0,0,0,5227,5167,1,0,0,0,5227,5168,
1,0,0,0,5227,5169,1,0,0,0,5227,5170,1,0,0,0,5227,5171,1,0,0,0,5227,5172,
1,0,0,0,5227,5173,1,0,0,0,5227,5174,1,0,0,0,5227,5175,1,0,0,0,5227,5176,
1,0,0,0,5227,5177,1,0,0,0,5227,5178,1,0,0,0,5227,5179,1,0,0,0,5227,5180,
1,0,0,0,5227,5181,1,0,0,0,5227,5182,1,0,0,0,5227,5183,1,0,0,0,5227,5184,
1,0,0,0,5227,5185,1,0,0,0,5227,5186,1,0,0,0,5227,5187,1,0,0,0,5227,5188,
1,0,0,0,5227,5189,1,0,0,0,5227,5190,1,0,0,0,5227,5191,1,0,0,0,5227,5192,
1,0,0,0,5227,5193,1,0,0,0,5227,5194,1,0,0,0,5227,5195,1,0,0,0,5227,5196,
1,0,0,0,5227,5197,1,0,0,0,5227,5198,1,0,0,0,5227,5199,1,0,0,0,5227,5200,
1,0,0,0,5227,5201,1,0,0,0,5227,5202,1,0,0,0,5227,5203,1,0,0,0,5227,5204,
1,0,0,0,5227,5205,1,0,0,0,5227,5206,1,0,0,0,5227,5207,1,0,0,0,5227,5208,
1,0,0,0,5227,5209,1,0,0,0,5227,5210,1,0,0,0,5227,5211,1,0,0,0,5227,5212,
1,0,0,0,5227,5213,1,0,0,0,5227,5214,1,0,0,0,5227,5215,1,0,0,0,5227,5216,
1,0,0,0,5227,5217,1,0,0,0,5227,5218,1,0,0,0,5227,5219,1,0,0,0,5227,5220,
1,0,0,0,5227,5221,1,0,0,0,5227,5222,1,0,0,0,5227,5223,1,0,0,0,5227,5224,
1,0,0,0,5227,5225,1,0,0,0,5227,5226,1,0,0,0,5228,1329,1,0,0,0,5229,5230,
7,35,0,0,5230,1331,1,0,0,0,5231,5232,7,36,0,0,5232,1333,1,0,0,0,5233,5271,
5,429,0,0,5234,5271,3,1216,608,0,5235,5271,3,1242,621,0,5236,5271,3,1246,
623,0,5237,5271,3,1324,662,0,5238,5271,3,1252,626,0,5239,5271,3,1244,622,
0,5240,5271,5,59,0,0,5241,5271,5,33,0,0,5242,5271,5,28,0,0,5243,5271,5,55,
0,0,5244,5271,3,846,423,0,5245,5271,3,848,424,0,5246,5271,3,854,427,0,5247,
5271,3,852,426,0,5248,5271,3,854,427,0,5249,5271,5,1,0,0,5250,5271,5,2,0,
0,5251,5271,5,3,0,0,5252,5271,5,4,0,0,5253,5271,5,5,0,0,5254,5271,5,6,0,
0,5255,5271,5,7,0,0,5256,5271,5,8,0,0,5257,5271,5,9,0,0,5258,5271,5,10,0,
0,5259,5271,5,11,0,0,5260,5271,5,12,0,0,5261,5271,5,13,0,0,5262,5271,5,14,
0,0,5263,5271,5,15,0,0,5264,5271,5,16,0,0,5265,5271,5,17,0,0,5266,5271,5,
18,0,0,5267,5271,5,19,0,0,5268,5271,5,20,0,0,5269,5271,5,21,0,0,5270,5233,
1,0,0,0,5270,5234,1,0,0,0,5270,5235,1,0,0,0,5270,5236,1,0,0,0,5270,5237,
1,0,0,0,5270,5238,1,0,0,0,5270,5239,1,0,0,0,5270,5240,1,0,0,0,5270,5241,
1,0,0,0,5270,5242,1,0,0,0,5270,5243,1,0,0,0,5270,5244,1,0,0,0,5270,5245,
1,0,0,0,5270,5246,1,0,0,0,5270,5247,1,0,0,0,5270,5248,1,0,0,0,5270,5249,
1,0,0,0,5270,5250,1,0,0,0,5270,5251,1,0,0,0,5270,5252,1,0,0,0,5270,5253,
1,0,0,0,5270,5254,1,0,0,0,5270,5255,1,0,0,0,5270,5256,1,0,0,0,5270,5257,
1,0,0,0,5270,5258,1,0,0,0,5270,5259,1,0,0,0,5270,5260,1,0,0,0,5270,5261,
1,0,0,0,5270,5262,1,0,0,0,5270,5263,1,0,0,0,5270,5264,1,0,0,0,5270,5265,
1,0,0,0,5270,5266,1,0,0,0,5270,5267,1,0,0,0,5270,5268,1,0,0,0,5270,5269,
1,0,0,0,5271,1335,1,0,0,0,5272,5273,7,37,0,0,5273,1337,1,0,0,0,5274,5275,
7,38,0,0,5275,1339,1,0,0,0,5276,5277,7,39,0,0,5277,1341,1,0,0,0,521,1345,
1352,1356,1360,1368,1374,1388,1391,1398,1409,1414,1420,1425,1432,1435,1442,
1444,1448,1451,1456,1465,1469,1475,1494,1497,1504,1509,1515,1521,1525,1530,
1537,1540,1548,1555,1558,1570,1573,1585,1595,1608,1613,1617,1625,1630,1637,
1643,1647,1651,1656,1659,1665,1671,1674,1678,1681,1687,1691,1694,1706,1710,
1716,1721,1726,1730,1736,1741,1744,1750,1754,1759,1767,1771,1776,1783,1787,
1792,1796,1800,1806,1819,1824,1836,1849,1860,1864,1883,1900,1905,1914,1919,
1926,1942,1946,1952,1957,1964,1968,1985,1990,1997,2007,2014,2019,2033,2036,
2040,2043,2047,2050,2056,2060,2063,2067,2074,2079,2086,2090,2094,2097,2100,
2103,2106,2109,2111,2118,2122,2133,2140,2152,2155,2162,2165,2171,2180,2185,
2194,2214,2224,2230,2234,2237,2241,2251,2254,2258,2261,2268,2272,2275,2280,
2293,2297,2304,2308,2311,2317,2320,2323,2331,2336,2339,2344,2347,2352,2355,
2360,2363,2374,2381,2389,2396,2402,2413,2417,2424,2427,2430,2433,2442,2446,
2460,2469,2478,2512,2515,2519,2536,2545,2550,2557,2573,2576,2579,2595,2602,
2610,2615,2623,2635,2643,2647,2662,2695,2702,2710,2717,2725,2731,2741,2750,
2777,2787,2800,2804,2820,2823,2840,2845,2857,2868,2872,2875,2885,2896,2913,
2918,2924,2932,2936,2939,2948,2956,2961,2965,2968,2977,2986,2995,3027,3043,
3051,3054,3062,3065,3076,3114,3118,3127,3132,3139,3147,3151,3160,3164,3171,
3174,3180,3185,3188,3195,3198,3205,3208,3210,3220,3224,3228,3232,3236,3240,
3244,3248,3252,3256,3263,3266,3270,3273,3276,3280,3284,3288,3292,3296,3300,
3304,3311,3314,3318,3322,3326,3330,3334,3338,3342,3346,3351,3358,3361,3366,
3368,3375,3379,3382,3390,3394,3398,3402,3406,3413,3417,3420,3424,3428,3431,
3435,3442,3449,3455,3457,3462,3469,3471,3475,3480,3486,3488,3493,3499,3501,
3505,3511,3515,3519,3523,3527,3531,3535,3538,3542,3546,3550,3553,3557,3561,
3565,3575,3578,3586,3589,3591,3594,3601,3605,3608,3612,3614,3618,3627,3632,
3637,3652,3669,3675,3684,3690,3697,3702,3704,3711,3719,3722,3730,3733,3742,
3745,3751,3754,3760,3767,3775,3777,3796,3810,3829,3849,3856,3865,3875,3878,
3887,3898,3902,3910,3916,3924,3939,3950,3963,3967,3971,3975,3981,3992,3999,
4005,4008,4013,4016,4021,4040,4050,4054,4061,4064,4070,4074,4089,4100,4103,
4109,4113,4121,4131,4136,4148,4153,4196,4252,4256,4266,4270,4276,4284,4289,
4298,4314,4317,4320,4348,4351,4354,4370,4378,4380,4389,4396,4402,4405,4411,
4414,4419,4422,4428,4431,4437,4440,4444,4448,4452,4457,4465,4467,4485,4493,
4495,4499,4505,4519,4528,4537,4545,4576,4582,4588,4597,4606,4623,4639,4646,
4662,4667,4671,4677,4684,4703,4710,4721,4725,4753,4758,4766,4770,4777,4780,
4784,4787,4790,4797,4801,4808,4812,4819,4834,4846,4896,4901,4926,4936,4956,
4962,4966,4982,4990,4994,4998,5004,5008,5227,5270];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.atn.PredictionContextCache();

export default class GQLParser extends antlr4.Parser {

    static grammarFileName = "GQLParser.g4";
    static literalNames = [ null, "'<-'", "'<~'", "'<-['", "'<~['", "'<->'", 
                            "'<-/'", "'<~/'", "'-['", "'-/'", "'->'", "']-'", 
                            "']~'", "']->'", "']~>'", "'/-'", "'/->'", "'/~'", 
                            "'/~>'", "'~['", "'~>'", "'~/'", "'''", "'\"'", 
                            "'`'", "'\\'", "'+'", "'-'", "'--'", "'&'", 
                            "'*'", "'^'", "':'", "'::'", "','", "'$'", "'='", 
                            "'!'", "'<'", "'>'", "'{'", "'}'", "'['", "']'", 
                            "'('", "')'", "'?'", "';'", "'/'", "'//'", "'~'", 
                            "'_'", "'|'", "'%'", "'.'", "'..'", "'@'", "'#'", 
                            null, null, "'abs'", "'acos'", "'all'", "'all_different'", 
                            "'and'", "'any'", "'array'", "'as'", "'asc'", 
                            "'ascending'", "'asin'", "'at'", "'atan'", "'avg'", 
                            "'big'", "'bigint'", "'binary'", "'bool'", "'boolean'", 
                            "'both'", "'btrim'", "'by'", "'byte_length'", 
                            "'bytes'", "'call'", "'case'", "'cast'", "'ceil'", 
                            "'ceiling'", "'char_length'", "'character_length'", 
                            "'characteristics'", "'close'", "'coalesce'", 
                            "'collect'", "'commit'", "'copy'", "'cos'", 
                            "'cosh'", "'cot'", "'count'", "'create'", "'current_date'", 
                            "'current_graph'", "'current_property_graph'", 
                            "'current_schema'", "'current_time'", "'current_timestamp'", 
                            "'current_user'", "'date'", "'datetime'", "'day'", 
                            "'dec'", "'decimal'", "'degrees'", "'delete'", 
                            "'desc'", "'descending'", "'detach'", "'distinct'", 
                            "'double'", "'drop'", "'duration'", "'duration_between'", 
                            "'element_id'", "'else'", "'end'", "'expect'", 
                            "'exists'", "'exp'", "'false'", "'filter'", 
                            "'finish'", "'float'", "'float16'", "'float32'", 
                            "'float64'", "'float128'", "'float256'", "'floor'", 
                            "'for'", "'from'", "'group'", "'having'", "'home_graph'", 
                            "'home_property_graph'", "'home_schema'", "'hour'", 
                            "'if'", "'in'", "'insert'", "'int'", "'integer'", 
                            "'int8'", "'integer8'", "'int16'", "'integer16'", 
                            "'int32'", "'integer32'", "'int64'", "'integer64'", 
                            "'int128'", "'integer128'", "'int256'", "'integer256'", 
                            "'intersect'", "'interval'", "'is'", "'leading'", 
                            "'let'", "'like'", "'limit'", "'list'", "'ln'", 
                            "'local'", "'local_datetime'", "'local_time'", 
                            "'local_timestamp'", "'log'", "'log10'", "'lower'", 
                            "'ltrim'", "'match'", "'max'", "'min'", "'minute'", 
                            "'mod'", "'month'", "'next'", "'nodetach'", 
                            "'normalize'", "'not'", "'null'", "'nulls'", 
                            "'nullif'", "'octet_length'", "'of'", "'offset'", 
                            "'open'", "'optional'", "'or'", "'order'", "'otherwise'", 
                            "'parameter'", "'parameters'", "'path'", "'path_length'", 
                            "'paths'", "'percentile_cont'", "'percentile_disc'", 
                            "'power'", "'precision'", "'property_exists'", 
                            "'radians'", "'real'", "'record'", "'remove'", 
                            "'replace'", "'reset'", "'return'", "'rollback'", 
                            "'rtrim'", "'same'", "'schema'", "'second'", 
                            "'select'", "'session'", "'set'", "'signed'", 
                            "'sin'", "'sinh'", "'skip'", "'small'", "'smallint'", 
                            "'sqrt'", "'start'", "'stddev_pop'", "'stddev_samp'", 
                            "'string'", "'sum'", "'tan'", "'tanh'", "'then'", 
                            "'time'", "'timestamp'", "'trailing'", "'trim'", 
                            "'true'", "'typed'", "'ubigint'", "'uint'", 
                            "'uint8'", "'uint16'", "'uint32'", "'uint64'", 
                            "'uint128'", "'uint256'", "'union'", "'unknown'", 
                            "'unsigned'", "'upper'", "'use'", "'usmallint'", 
                            "'value'", "'varbinary'", "'varchar'", "'variable'", 
                            "'when'", "'where'", "'with'", "'xor'", "'year'", 
                            "'yield'", "'zoned'", "'zoned_datetime'", "'zoned_time'", 
                            "'aggregate'", "'aggregates'", "'alter'", "'catalog'", 
                            "'clear'", "'clone'", "'contraint'", "'current_role'", 
                            "'data'", "'directory'", "'exact'", "'existing'", 
                            "'function'", "'gqlstatus'", "'grant'", "'instant'", 
                            "'left'", "'nothing'", "'numeric'", "'on'", 
                            "'partion'", "'procedure'", "'product'", "'project'", 
                            "'query'", "'records'", "'reference'", "'rename'", 
                            "'revoke'", "'right'", "'substring'", "'temporal'", 
                            "'unique'", "'unit'", "'values'", "'acyclic'", 
                            "'binding'", "'bindings'", "'connecting'", "'destination'", 
                            "'different'", "'directed'", "'edge'", "'eges'", 
                            "'element'", "'elements'", "'first'", "'graph'", 
                            "'groups'", "'keep'", "'label'", "'labeled'", 
                            "'labels'", "'last'", "'nfc'", "'nfd'", "'nfkc'", 
                            "'nfkd'", "'no'", "'node'", "'normalized'", 
                            "'only'", "'ordinality'", "'propery'", "'read'", 
                            "'relationship'", "'relationships'", "'repetable'", 
                            "'shortest'", "'simple'", "'source'", "'table'", 
                            "'temp'", "'timezone'", "'to'", "'trail'", "'transaction'", 
                            "'type'", "'undirected'", "'vertex'", "'walk'", 
                            "'without'", "'write'", "'zone'" ];
    static symbolicNames = [ null, "LEFT_ARROW", "LEFT_ARROW_TILDE", "LEFT_ARROW_BRACKET", 
                             "LEFT_ARROW_TILDE_BRACKET", "LEFT_MINUS_RIGHT", 
                             "LEFT_MINUS_SLASH", "LEFT_TILDE_SLASH", "MINUS_LEFT_BRACKET", 
                             "MINUS_SLASH", "RIGHT_ARROW", "RIGHT_BRACKET_MINUS", 
                             "RIGHT_BRACKET_TILDE", "BRACKET_RIGHT_ARROW", 
                             "BRACKET_TILDE_RIGHT_ARROW", "SLASH_MINUS", 
                             "SLASH_MINUS_RIGHT", "SLASH_TILDE", "SLASH_TILDE_RIGHT", 
                             "TILDE_LEFT_BRACKET", "TILDE_RIGHT_ARROW", 
                             "TILDE_SLASH", "QUOTE", "DOUBLE_QUOTE", "GRAVE_ACCENT", 
                             "REVERS_SOLIDUS", "PLUS", "MINUS", "DOUBLE_MINUS", 
                             "AMPERSAND", "ASTERISK", "CIRCUMFLEX", "COLON", 
                             "DOUBLE_COLON", "COMMA", "DOLLAR", "EQUALS", 
                             "EXCLAMATION", "LEFT_ANGLE_BRACKET", "RIGHT_ANGLE_BRACKET", 
                             "LEFT_BRACE", "RIGHT_BRACE", "LEFT_BRACKET", 
                             "RIGHT_BRACKET", "LEFT_PAREN", "RIGHT_PAREN", 
                             "QUESTION_MARK", "SEMICOLON", "SOLIDUS", "DOUBLE_SOLIDUS", 
                             "TILDE", "UNDERSCORE", "VERTICAL_BAR", "PERCENT", 
                             "PERIOD", "DOUBLE_PERIOD", "COMMERCIAL_AT", 
                             "HASH", "MULTISET_ALTERNATION", "CONCATENATION", 
                             "ABS", "ACOS", "ALL", "ALL_DIFFERENT", "AND", 
                             "ANY", "ARRAY", "AS", "ASC", "ASCENDING", "ASIN", 
                             "AT", "ATAN", "AVG", "BIG", "BIGINT", "BINARY", 
                             "BOOL", "BOOLEAN", "BOTH", "BTRIM", "BY", "BYTE_LENGTH", 
                             "BYTES", "CALL", "CASE", "CAST", "CEIL", "CEILING", 
                             "CHAR_LENGTH", "CHARACTER_LENGTH", "CHARACTERISTICS", 
                             "CLOSE", "COALESCE", "COLLECT", "COMMIT", "COPY", 
                             "COS", "COSH", "COT", "COUNT", "CREATE", "CURRENT_DATE", 
                             "CURRENT_GRAPH", "CURRENT_PROPERTY_GRAPH", 
                             "CURRENT_SCHEMA", "CURRENT_TIME", "CURRENT_TIMESTAMP", 
                             "CURRENT_USER", "DATE", "DATETIME", "DAY", 
                             "DEC", "DECIMAL", "DEGREES", "DELETE", "DESC", 
                             "DESCENDING", "DETACH", "DISTINCT", "DOUBLE", 
                             "DROP", "DURATION", "DURATION_BETWEEN", "ELEMENT_ID", 
                             "ELSE", "END", "EXCEPT", "EXISTS", "EXP", "FALSE", 
                             "FILTER", "FINISH", "FLOAT", "FLOAT16", "FLOAT32", 
                             "FLOAT64", "FLOAT128", "FLOAT256", "FLOOR", 
                             "FOR", "FROM", "GROUP", "HAVING", "HOME_GRAPH", 
                             "HOME_PROPERTY_GRAPH", "HOME_SCHEMA", "HOUR", 
                             "IF", "IN", "INSERT", "INT", "INTEGER", "INT8", 
                             "INTEGER8", "INT16", "INTEGER16", "INT32", 
                             "INTEGER32", "INT64", "INTEGER64", "INT128", 
                             "INTEGER128", "INT256", "INTEGER256", "INTERSECT", 
                             "INTERVAL", "IS", "LEADING", "LET", "LIKE", 
                             "LIMIT", "LIST", "LN", "LOCAL", "LOCAL_DATETIME", 
                             "LOCAL_TIME", "LOCAL_TIMESTAMP", "LOG", "LOG10", 
                             "LOWER", "LTRIM", "MATCH", "MAX", "MIN", "MINUTE", 
                             "MOD", "MONTH", "NEXT", "NODETACH", "NORMALIZE", 
                             "NOT", "NULL", "NULLS", "NULLIF", "OCTET_LENGTH", 
                             "OF", "OFFSET", "OPEN", "OPTIONAL", "OR", "ORDER", 
                             "OTHERWISE", "PARAMETER", "PARAMETERS", "PATH", 
                             "PATH_LENGTH", "PATHS", "PERCENTILE_CONT", 
                             "PERCENTILE_DISC", "POWER", "PRECISION", "PROPERTY_EXISTS", 
                             "RADIANS", "REAL", "RECORD", "REMOVE", "REPLACE", 
                             "RESET", "RETURN", "ROLLBACK", "RTRIM", "SAME", 
                             "SCHEMA", "SECOND", "SELECT", "SESSION", "SET", 
                             "SIGNED", "SIN", "SINH", "SKIP_", "SMALL", 
                             "SMALLINT", "SQRT", "START", "STDDEV_POP", 
                             "STDDEV_SAMP", "STRING", "SUM", "TAN", "TANH", 
                             "THEN", "TIME", "TIMESTAMP", "TRAILING", "TRIM", 
                             "TRUE", "TYPED", "UBIGINT", "UINT", "UINT8", 
                             "UINT16", "UINT32", "UINT64", "UINT128", "UINT256", 
                             "UNION", "UNKNOWN", "UNSIGNED", "UPPER", "USE", 
                             "USMALLINT", "VALUE", "VARBINARY", "VARCHAR", 
                             "VARIABLE", "WHEN", "WHERE", "WITH", "XOR", 
                             "YEAR", "YIELD", "ZONED", "ZONED_DATETIME", 
                             "ZONED_TIME", "AGGREGATE", "AGGREGATES", "ALTER", 
                             "CATALOG", "CLEAR", "CLONE", "CONSTRAINT", 
                             "CURRENT_ROLE", "DATA", "DIRECTORY", "EXACT", 
                             "EXISTING", "FUNCTION", "GQLSTATUS", "GRANT", 
                             "INSTANT", "LEFT", "NOTHING", "NUMERIC", "ON", 
                             "PARTITION", "PROCEDURE", "PRODUCT", "PROJECT", 
                             "QUERY", "RECORDS", "REFERENCE", "RENAME", 
                             "REVOKE", "RIGHT", "SUBSTRING", "TEMPORAL", 
                             "UNIQUE", "UNIT", "VALUES", "ACYCLIC", "BINDING", 
                             "BINDINGS", "CONNECTING", "DESTINATION", "DIFFERENT", 
                             "DIRECTED", "EDGE", "EDGES", "ELEMENT", "ELEMENTS", 
                             "FIRST", "GRAPH", "GROUPS", "KEEP", "LABEL", 
                             "LABELED", "LABELS", "LAST", "NFC", "NFD", 
                             "NFKC", "NFKD", "NO", "NODE", "NORMALIZED", 
                             "ONLY", "ORDINALITY", "PROPERTY", "READ", "RELATIONSHIP", 
                             "RELATIONSHIPS", "REPEATABLE", "SHORTEST", 
                             "SIMPLE", "SOURCE", "TABLE", "TEMP", "TIMEZONE", 
                             "TO", "TRAIL", "TRANSACTION", "TYPE", "UNDIRECTED", 
                             "VERTEX", "WALK", "WITHOUT", "WRITE", "ZONE", 
                             "INTERVAL_DAY", "INTERVAL_WEEK", "INTERVAL_MONTH", 
                             "INTERVAL_YEAR", "IF_NOT_EXISTS", "IF_EXISTS", 
                             "UNSIGNED_NUMERIC_LITERAL", "SIGNED_NUMERIC_LITERAL", 
                             "SIGN", "EXACT_NUMERIC_LITERAL", "EXACT_UNSIGNED_DECIMAL_IN_COMMON_NOTATION", 
                             "EXACT_UNSIGNED_INT", "APROXIMATE_NUMERIC_LITERAL", 
                             "APROXIMATE_UNSIGNED_DECIMAL_IN_COMMON_NOTATION", 
                             "APROXIMATE_UNSIGNED_INT", "UNSIGNED_DECIMAL_IN_COMMON_NOTATION", 
                             "UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION", 
                             "FOUR_DIGIT", "DOUBLE_DIGIT", "UNSIGNED_INT", 
                             "UNSIGNED_DECIMAL_INT", "UNSIGNED_HEX_INT", 
                             "UNSIGNED_OCTAL_INT", "UNSIGNED_BINARY_INT", 
                             "BYTE_STRING_LITERAL", "SINGLE_QUOTED_STRING_LITERAL", 
                             "DOUBLE_QUOTED_STRING_LITERAL", "ACCENT_QUOTED_STRING_LITERAL", 
                             "COMMENT", "SIMPLE_COMMENT_LITERAL", "BRACKETED_COMMNET_LITERAL", 
                             "WS", "WHITESPACE", "NEW_LINE", "CARRIAGE_RETURN", 
                             "RETURN_SIGN", "REGULAR_IDENTIFIER", "EXTENDED_IDENTIFIER", 
                             "START_CHARS", "CONTINUE_CHARS", "BIDIRECTIONAL_CONTROL_CHARACTER", 
                             "ESCAPED_CHARS", "ESCAPED_REVERSE_SOLIDUS", 
                             "ESCAPED_QUOTE", "ESCAPED_SOUBLE_QUOTE", "ESCAPED_GRAVE_ACCENT", 
                             "ESCAPED_TAB", "ESCAPED_BACKSPACE", "ESCAPED_NEW_LINE", 
                             "ESCAPED_CARRIAGE_RETURN", "ESCAPED_FORM_FEED", 
                             "ESCAPED_UNICODE4_DIGIT_VALUE", "ESCAPED_UNICODE6_DIGIT_VALUE", 
                             "FF", "RS", "GS", "FS", "CR", "SPACE", "TAB", 
                             "LF", "VT", "US", "DIGIT16", "DIGIT10", "DIGIT8", 
                             "DIGIT2", "LETTER", "GQL_LANGUAGE_CHAR", "GQL_SPECIAL_CHAR" ];
    static ruleNames = [ "gqlProgram", "activity", "programActivity", "sessionActivity", 
                         "sessionSetCommand", "sessionSetSchemaClause", 
                         "sessionSetGraphClause", "sessionSetTimeZoneClause", 
                         "setTimeZoneValue", "sessionSetParameterClause", 
                         "sessionSetGraphParameterClause", "sessionSetBindingTableParameterCalues", 
                         "sessionSetValuesParameterClause", "sessionSetParameterName", 
                         "sessionResetCommand", "sessionResetArguments", 
                         "sessionCloseCommand", "transactionActivity", "transactionStartCommand", 
                         "transactionEndCommand", "transactionCharacteristics", 
                         "transactionMode", "transactionAccessMode", "implDefinedAccessMode", 
                         "nestedProcedureSpec", "procedureSpec", "nestedDataModProcedureSpec", 
                         "nestedQuerySpec", "procedureBody", "bindingVarDefBlock", 
                         "bindingVarDef", "statmentBlock", "statement", 
                         "nextStatment", "graphVarDef", "optTypedGraphInit", 
                         "graphInit", "bindingTableVarDef", "optTypedBindingTableInit", 
                         "bindingTableInit", "valueVarDef", "optTypedValueInit", 
                         "valueInit", "graphExpr", "currentGraph", "nestedGraphQuerySpec", 
                         "bindingTableExpr", "nestedBindingTableQuerySpec", 
                         "objectExprPrimary", "linearCatalogModStatment", 
                         "simpleCatalogModStatment", "primitiveCatalogModStatment", 
                         "createSchemeStatment", "dropSchemeStatment", "createGraphStatment", 
                         "createOnlyGraphStatment", "createOrReplaceGraphStatment", 
                         "openGraphType", "ofGraphType", "graphTypeLikeGraph", 
                         "graphSource", "dropGraphStatment", "createGraphTypeStatment", 
                         "graphTypeSource", "copyOfGraphType", "dropGraphTypeStatment", 
                         "callCatalogModProcedureStatment", "linearDataModStatment", 
                         "focusedLinearDataModStatment", "focusedLinearDataModStatmentBody", 
                         "focusedNestedDataModProcedureSpec", "ambientLinearDataModStatment", 
                         "ambientLinearDataModStatmentBody", "simpleLinearDataAccessingStatment", 
                         "simpleDataAccessingStatment", "simpleDataModStatment", 
                         "primitiveDataModStatment", "insertStatment", "setStatment", 
                         "setItemList", "setItem", "setPropertyItem", "setAllPropertiesItem", 
                         "setLabelItem", "labelSetSpec", "removeStatment", 
                         "removeItemList", "removeItem", "removePropertyItem", 
                         "removeLabelItem", "deleteStatment", "deleteItemList", 
                         "deleteItem", "callDataModProcedureStatment", "compositeQueryStatment", 
                         "compositeQueryExpr", "queryConjunction", "setOperator", 
                         "compositeQueryPrimary", "linearQueryStatment", 
                         "focusedLinearQueryStatment", "focusedLinearQueryStatmentPart", 
                         "focusedLinearQueryAndPrimitiveResultStatmentPart", 
                         "focusedPrimitiveResultStatment", "focusedNestedQuerySpec", 
                         "ambientLinearQueryStatment", "simpleLinearQueryStatment", 
                         "simpleQueryStatment", "primitiveQueryStatment", 
                         "matchStatment", "simpleMatchStatment", "optionalMatchStatment", 
                         "optionalOperand", "matchStatmentBlock", "callQueryStatment", 
                         "filterStatment", "letStatment", "letVarDefList", 
                         "letVarDef", "forStatment", "forItem", "forItemAlias", 
                         "forOrdinalityOrOffset", "orderByAndPageStatment", 
                         "primitiveResultStatment", "returnStatment", "returnStatmentBody", 
                         "returnItemList", "returnItem", "returnItemAlias", 
                         "selectStatment", "selectItemList", "selectItem", 
                         "selectItemAlias", "havingClause", "selectStatmentBody", 
                         "selectGraphMatchList", "selectGraphMatch", "selectQuerySpec", 
                         "callProcedureStatment", "procedureCall", "inlineProcedureCall", 
                         "varScopeClause", "bindingVarRefList", "namedProcedureCall", 
                         "procedureArgList", "procedureArg", "useGraphClause", 
                         "atSchemaClause", "bindingVarRef", "elementVarRef", 
                         "pathVarRef", "parameter", "graphPatternBindingTable", 
                         "graphPatternYieldClause", "graphPatternYieldItemList", 
                         "graphPatternYieldItem", "graphPattern", "matchMode", 
                         "repeatableElementsMatchMode", "differentEdgesMatchMode", 
                         "elementBindingsOrElements", "edgeBindingsOrEdges", 
                         "pathPatternList", "pathPattern", "pathVarDeclaration", 
                         "keepClause", "graphPatternWhereClause", "pathPatternPrefix", 
                         "pathModePrefix", "pathMode", "pathSearchPrefix", 
                         "allPathSearch", "pathOrPaths", "anyPathSearch", 
                         "numberOfPaths", "shortestPathSearch", "allShortestPathSearch", 
                         "anyShortestPathSearch", "countedShortestPathSearch", 
                         "countedShortestGroupSearch", "groupOrGroups", 
                         "numberOfGroups", "pathPatternExpr", "pathMultisetAlternation", 
                         "pathPatternUnion", "pathTerm", "pathFactor", "quantifiedPathPrimary", 
                         "questionedPathPrimary", "pathPrimary", "elementPattern", 
                         "nodePattern", "elementPatternFiller", "elementVarDeclaration", 
                         "isLabelExpr", "isOrColon", "elementPatternPredicate", 
                         "elementPatternWhereClause", "elementPropertySpec", 
                         "propertyKeyValuePairList", "propertyKeyValuePair", 
                         "edgePattern", "fullEdgePattern", "fullEdgePointingLeft", 
                         "fullEdgeUndirected", "fullEdgePointingRight", 
                         "fullEdgeLeftOrUndirected", "fullEdgeUndirectedOrRight", 
                         "fullEdgeLeftOrRight", "fullEdgeAnyDirection", 
                         "abbreviatedEdgePattern", "parenthesizedPathPatternExpr", 
                         "subpathVarDeclaration", "parenthesizedPathPatternWhereClause", 
                         "insertGraphPattern", "insertGraphPatternList", 
                         "insertPathPattern", "insertNodePattern", "insertEdgePattern", 
                         "insertEdgePointingLeft", "insertEdgePointingRight", 
                         "insertEdgeUndirected", "insertElementPatternFiller", 
                         "labelAndPropertySetSpec", "labelExpr", "labelTerm", 
                         "labelFactor", "labelNegation", "labelPrimary", 
                         "wildcardLabel", "parenthesizedLabelExpr", "graphPatternQuantifier", 
                         "fixedQuantifier", "generalQuantifier", "lowerBound", 
                         "upperBound", "simplifiedPathPatternExpr", "simplifiedDefaultingLeft", 
                         "simplifiedDefaultingUndirected", "simplifiedDefaultingRight", 
                         "simplifiedDefaultingLeftOrUndirected", "simplifiedDefaultingUndirectedOrRight", 
                         "simplifiedDefaultingLeftOrRight", "simplifiedDefaultingAnyDirection", 
                         "simplifiedContents", "simplifiedPathUnion", "simplifiedMultisetAlternation", 
                         "simplifiedTerm", "simplifiedFactorLow", "simplifiedFactorHigh", 
                         "simplifiedQuntified", "simplifiedQuestioned", 
                         "simplifiedTertiary", "simplifiedDirectionOverride", 
                         "simplifiedOverrideLeft", "simplifiedOverrideUndirected", 
                         "simplifiedOverrideRight", "simplifiedOverrideLeftOrUndirected", 
                         "simplifiedOverrideUndirectedOrRight", "simplifiedOverrideLeftOrRight", 
                         "simplifiedOverrideAnyDirection", "simplifiedSecondary", 
                         "simplifiedNegation", "simplifiedPrimary", "whereClause", 
                         "yieldClause", "yieldItemList", "yieldItem", "yieldItemName", 
                         "yieldItemAlias", "groupByClause", "groupingElementList", 
                         "groupingElement", "emptyGroupingSet", "orderByClause", 
                         "aggregateFunction", "generalSetFunction", "generalSetFunctionType", 
                         "setQuantifier", "binarySetFunction", "dependantValueExpr", 
                         "independentValueExpr", "sortSpecList", "sortSpec", 
                         "sortKey", "orderingSpec", "nullOrdering", "limitClause", 
                         "offsetClause", "offsetSynonym", "graphTypeSpec", 
                         "nestedGraphTypeSpec", "graphTypeSpecBody", "elementTypeDefList", 
                         "elementTypeDef", "nodeTypeDef", "nodeTypePattern", 
                         "nodeTypePhrase", "nodeTypeName", "nodeTypeFiller", 
                         "nodeTypeLabelSetDef", "nodeTypePropertyTypeSetDef", 
                         "edgeTypeDef", "edgeTypePattern", "edgeTypePhrase", 
                         "edgeTypeName", "edgeTypeFiller", "edgeTypeLabelSetDef", 
                         "edgeTypePropertyTypeSetDef", "fullEdgeTypePattern", 
                         "fullEdgeTypePatternPointingRight", "fullEdgeTypePatternPointingLeft", 
                         "fullEdgeTypePatternUndirected", "arcTypePointingRight", 
                         "arcTypePointingLeft", "arcTypeUndirected", "arcTypeFiller", 
                         "abbreviatedEdgeTypePattern", "abbreviatedEdgeTypePatternPointingRight", 
                         "abbreviatedEdgeTypePatternPointingLeft", "abbreviatedEdgeTypePatternUndirected", 
                         "nodeTypeRef", "sourceNodeTypeRef", "destinationNodeTypeRef", 
                         "edgeKind", "endpointDef", "enpointPairDef", "endpointPairDefPointingRight", 
                         "endpointPairDefPointingLeft", "endpointPairDefUndirected", 
                         "connectorPointingRight", "connectorPointingLeft", 
                         "connectorUndirected", "sourceNodeTypeName", "destinationNodeTypeName", 
                         "labelSetDef", "propertyTypeSetDef", "propertyTypeDefList", 
                         "propertyTypeDef", "propertyValueType", "bindingTableType", 
                         "valueType", "typed", "predefinedType", "booleanType", 
                         "charStringType", "byteStringType", "minLength", 
                         "maxLength", "fixedLength", "numericType", "exactNumericType", 
                         "binaryExactNumericType", "signedBinaryExactNumericType", 
                         "unsignedBinaryExactNumericType", "verboseBinaryExactNumericType", 
                         "decimalExactNumericType", "precision", "scale", 
                         "approximateNumericType", "temporalType", "temporalInstantType", 
                         "temporalDurationType", "dateTimeType", "localDateTimeType", 
                         "dateType", "timeType", "localTimeType", "durationType", 
                         "refValueType", "graphRefValueType", "openGraphRefValueType", 
                         "closedGraphRefValueType", "bindingTableRefValueType", 
                         "nodeRefValueType", "openNodeRefValueType", "closedNodeRefValueType", 
                         "edgeRefValueType", "openEdgeRefValueType", "closedEdgeRefValueType", 
                         "constructedType", "listValueType", "listValueTypeName", 
                         "listValueTypeNameSynonym", "recordType", "fieldTypesSpec", 
                         "fieldTypeList", "dynamicUnionType", "openDynamicUnionType", 
                         "dynamicPropertyValueType", "closedDynamicUnionType", 
                         "componentTypeList", "componentType", "pathValueType", 
                         "notNull", "fieldType", "schemaRef", "absoluteCatalogSchemaRef", 
                         "catalogSchemaParentAndName", "relativeCatalogSchemaRef", 
                         "predefinedSchemaRef", "absoluteDirectoryPath", 
                         "relativeDirectoryPath", "simpleDirectoryPath", 
                         "graphRef", "catalogGraphParentAndName", "homeGraph", 
                         "graphTypeRef", "catalogGraphTypeParentAndName", 
                         "bindingTableRef", "catalogBindingTableParentAndName", 
                         "procedureRef", "catalogProcedureParentAndName", 
                         "catalogObjectParentRef", "refParameter", "externalObjectRef", 
                         "searchCondition", "predicate", "comparisonPredicate", 
                         "comparisonPredicatePart2", "comparisonOperator", 
                         "equals", "notEquals", "lessThen", "greaterThan", 
                         "lessThanOrEquals", "graterThanOrEquals", "comparisonPredicand", 
                         "existsPredicate", "nullPredicate", "nullPredicatePart2", 
                         "valueTypePredicate", "valueTypePredicatePart2", 
                         "normalizedPredicate", "normalizedPredicatePart2", 
                         "directedPredicate", "directedPredicatePart2", 
                         "labeledPredicate", "labeledPredicatePart2", "isLabeledOrColon", 
                         "sourceOrDestinationPredicate", "nodeRef", "sourcePredicatePart2", 
                         "destinationPredicatePart2", "edgeRef", "allDifferentPredicate", 
                         "samePredicate", "propertyExistsPredicate", "valueSpec", 
                         "unsignedValueSpec", "unsignedIntSpec", "parameterValueSpec", 
                         "predefinedParameter", "valueExpr", "commonValueExpr", 
                         "commonValuePropertiesGroup", "refValueExpr", "graphRefValueExpr", 
                         "bindingTableRefValueExpr", "nodeRefValueExpr", 
                         "edgeRefValueExpr", "recordValueExpr", "aggregatingValueExpr", 
                         "booleanValueExpr", "booleanTerm", "booleanFactor", 
                         "booleanTest", "truthValue", "booleanPrimary", 
                         "booleanPredicand", "paranthisedBooleanValueExpr", 
                         "numericValueExpr", "term", "factor", "numericPrimary", 
                         "valueExprPrimary", "parenthesizedValueExpr", "nonParenthesizedValueExprPrimary", 
                         "nonParenthesizedValueExprPrimarySpecialCase", 
                         "collectionValueConstructor", "numericValueFunction", 
                         "lengthExpr", "charLengthExpr", "byteLengthExpr", 
                         "pathLengthExpr", "absoluteValueExpr", "modulusExpr", 
                         "numericValueExprDividen", "numericValueExprDivisor", 
                         "trigonometricFunction", "trigonometricFunctionName", 
                         "logarithmFunction", "generalLogarithmFunction", 
                         "generalLogarithmBase", "generalLogarithmArgument", 
                         "commonLogarithmFunction", "naturalLogarithmFunction", 
                         "exponentialFunction", "powerFunction", "numericValueExprBase", 
                         "numericValueExprExponent", "squareRootFunciton", 
                         "floorFunction", "ceilingFunction", "stringValueExpr", 
                         "charStringValueExpr", "charStringConcatenation", 
                         "charStringFactor", "charStringPrimary", "byteStringValueExpr", 
                         "byteStringFactor", "byteStringPrimary", "byteStringConcatenation", 
                         "stringValueFunction", "charStringFunction", "foldFunction", 
                         "trimFunction", "singleCharTrimFunction", "multiCharTrimFunction", 
                         "trimOperands", "trimSource", "trimSpec", "trimCharString", 
                         "normalizeFunction", "normalForm", "byteStringFunction", 
                         "byteStrinTrimFunction", "byteStringTrimOperands", 
                         "byteStringTrimSource", "trimByteString", "stringLength", 
                         "dateTimeValueExpr", "dateTimeTerm", "dateTimeFactor", 
                         "dateTimePrimary", "dateTimeValueFunction", "dateFunction", 
                         "timeFunction", "localTimeFunction", "dateTimeFunction", 
                         "localDatetimeFunction", "dateFunctionParameters", 
                         "timeFunctionParameters", "dateTimeFunctionParameters", 
                         "durationValueExpr", "dateTimeSubtraction", "dateTimeSubtractionParameters", 
                         "durationTerm", "durationFactor", "durationPrimary", 
                         "durationValueExpr1", "durationTerm1", "durationTerm2", 
                         "dateTimeValueExpr1", "dateTimeValueExpr2", "durationValueFunction", 
                         "durationFunction", "durationFunctionParameters", 
                         "durationAbsoluteValueFunction", "listValueExpr", 
                         "listConcatenation", "listPrimary", "listValueFunction", 
                         "trimListFunction", "elementsFunction", "listValueConstructor", 
                         "listValueConstructorByEnumeration", "listElementList", 
                         "listElement", "recordValueConstructor", "fieldsSpec", 
                         "fieldList", "field", "pathValueExpr", "pathValueConcatenation", 
                         "pathValuePrimary", "pathValueConstructor", "pathValueConstructorByEnumeration", 
                         "pathElementList", "pathElementListStart", "pathElementListStep", 
                         "propertyRef", "propertySource", "valueQueryExpr", 
                         "caseExpr", "caseAbbreviation", "caseSpecification", 
                         "simpleCase", "searchedCase", "simpleWhenClause", 
                         "searchedWhenClause", "elseClause", "caseOperand", 
                         "whenOperandList", "whenOperand", "result", "resultExpr", 
                         "castSpec", "castOperand", "castTarget", "elementIdFunction", 
                         "letValueExpr", "literal", "generalLiteral", "predefinedTypeLiteral", 
                         "unsignedLiteral", "booleanLiteral", "characterStringLiteral", 
                         "unbrokenCharacterStringLiteral", "singleQuotedCharacterSequence", 
                         "doubleQuotedCharacterSequence", "accentQuotedCharacterSequence", 
                         "noEscape", "unbrokenSingleQuotedCharacterSequence", 
                         "unbrokenDoubleQuotedCharacterSequence", "unbrokenAccentQuotedCharacterSequence", 
                         "temporalLiteral", "dateLiteral", "timeLiteral", 
                         "dateTimeLiteral", "dateString", "timeString", 
                         "dateTimeString", "sqlDateTimeLiteral", "durationLiteral", 
                         "durationString", "sqlIntervalLiteral", "sqlIntervalType", 
                         "nullLiteral", "listLiteral", "recordLiteral", 
                         "objectName", "objectNameOrBindingVar", "directoryName", 
                         "schemaName", "graphName", "delimitedGraphName", 
                         "graphTypeName", "elementTypeName", "bindingTableName", 
                         "delimitedBindingTableName", "procedureName", "labelName", 
                         "propertyName", "fieldName", "parameterName", "var", 
                         "graphVar", "graphPatternVar", "pathOrSubpathVar", 
                         "elementVar", "pathVar", "subpathVar", "bindingTableVar", 
                         "valueVar", "bindingVar", "token", "nonDelimiterToken", 
                         "identifier", "separatedIdentifier", "nonDelimitedIdentifier", 
                         "delimitedIdentifier", "keyWord", "reservedWord", 
                         "preReservedWord", "nonReservedWord", "delimiterToken", 
                         "edgeSynonym", "edgesSynonym", "nodeSynonym" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = GQLParser.ruleNames;
        this.literalNames = GQLParser.literalNames;
        this.symbolicNames = GQLParser.symbolicNames;
    }

    sempred(localctx, ruleIndex, predIndex) {
    	switch(ruleIndex) {
    	case 95:
    	    		return this.compositeQueryExpr_sempred(localctx, predIndex);
    	case 465:
    	    		return this.booleanTerm_sempred(localctx, predIndex);
    	case 532:
    	    		return this.dateTimeValueExpr_sempred(localctx, predIndex);
    	case 545:
    	    		return this.durationValueExpr_sempred(localctx, predIndex);
    	case 548:
    	    		return this.durationTerm_sempred(localctx, predIndex);
        default:
            throw "No predicate with index:" + ruleIndex;
       }
    }

    compositeQueryExpr_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 0:
    			return this.precpred(this._ctx, 2);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    booleanTerm_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 1:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    dateTimeValueExpr_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 2:
    			return this.precpred(this._ctx, 2);
    		case 3:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    durationValueExpr_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 4:
    			return this.precpred(this._ctx, 3);
    		case 5:
    			return this.precpred(this._ctx, 2);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    durationTerm_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 6:
    			return this.precpred(this._ctx, 3);
    		case 7:
    			return this.precpred(this._ctx, 2);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };




	gqlProgram() {
	    let localctx = new GqlProgramContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, GQLParser.RULE_gqlProgram);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1345;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===40 || _la===71 || ((((_la - 84)) & ~0x1f) === 0 && ((1 << (_la - 84)) & 133121) !== 0) || ((((_la - 118)) & ~0x1f) === 0 && ((1 << (_la - 118)) & 4218889) !== 0) || ((((_la - 150)) & ~0x1f) === 0 && ((1 << (_la - 150)) & 2621441) !== 0) || ((((_la - 182)) & ~0x1f) === 0 && ((1 << (_la - 182)) & 688257) !== 0) || ((((_la - 216)) & ~0x1f) === 0 && ((1 << (_la - 216)) & 560669) !== 0) || _la===261 || _la===263 || ((((_la - 312)) & ~0x1f) === 0 && ((1 << (_la - 312)) & 134219777) !== 0) || _la===347) {
	            this.state = 1342;
	            this.activity();
	            this.state = 1347;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1348;
	        this.match(GQLParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	activity() {
	    let localctx = new ActivityContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, GQLParser.RULE_activity);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1350;
	        this.programActivity();
	        this.state = 1352;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1,this._ctx);
	        if(la_===1) {
	            this.state = 1351;
	            this.sessionCloseCommand();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	programActivity() {
	    let localctx = new ProgramActivityContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, GQLParser.RULE_programActivity);
	    try {
	        this.state = 1356;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 218:
	        case 226:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1354;
	            this.sessionActivity();
	            break;
	        case 40:
	        case 71:
	        case 84:
	        case 95:
	        case 101:
	        case 118:
	        case 121:
	        case 131:
	        case 132:
	        case 140:
	        case 150:
	        case 169:
	        case 171:
	        case 182:
	        case 189:
	        case 197:
	        case 199:
	        case 201:
	        case 216:
	        case 219:
	        case 220:
	        case 225:
	        case 227:
	        case 231:
	        case 235:
	        case 261:
	        case 263:
	        case 312:
	        case 323:
	        case 339:
	        case 347:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1355;
	            this.transactionActivity();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sessionActivity() {
	    let localctx = new SessionActivityContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, GQLParser.RULE_sessionActivity);
	    try {
	        this.state = 1360;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,3,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1358;
	            this.sessionSetCommand();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1359;
	            this.sessionResetCommand();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sessionSetCommand() {
	    let localctx = new SessionSetCommandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, GQLParser.RULE_sessionSetCommand);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1362;
	        this.match(GQLParser.SESSION);
	        this.state = 1363;
	        this.match(GQLParser.SET);
	        this.state = 1368;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,4,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1364;
	            this.sessionSetSchemaClause();
	            break;

	        case 2:
	            this.state = 1365;
	            this.sessionSetGraphClause();
	            break;

	        case 3:
	            this.state = 1366;
	            this.sessionSetTimeZoneClause();
	            break;

	        case 4:
	            this.state = 1367;
	            this.sessionSetParameterClause();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sessionSetSchemaClause() {
	    let localctx = new SessionSetSchemaClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, GQLParser.RULE_sessionSetSchemaClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1370;
	        this.match(GQLParser.SCHEMA);
	        this.state = 1371;
	        this.schemaRef();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sessionSetGraphClause() {
	    let localctx = new SessionSetGraphClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, GQLParser.RULE_sessionSetGraphClause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1374;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===339) {
	            this.state = 1373;
	            this.match(GQLParser.PROPERTY);
	        }

	        this.state = 1376;
	        this.match(GQLParser.GRAPH);
	        this.state = 1377;
	        this.graphExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sessionSetTimeZoneClause() {
	    let localctx = new SessionSetTimeZoneClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, GQLParser.RULE_sessionSetTimeZoneClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1379;
	        this.match(GQLParser.TIME);
	        this.state = 1380;
	        this.match(GQLParser.ZONE);
	        this.state = 1381;
	        this.setTimeZoneValue();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setTimeZoneValue() {
	    let localctx = new SetTimeZoneValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, GQLParser.RULE_setTimeZoneValue);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1383;
	        this.stringValueExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sessionSetParameterClause() {
	    let localctx = new SessionSetParameterClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, GQLParser.RULE_sessionSetParameterClause);
	    try {
	        this.state = 1388;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 323:
	        case 339:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1385;
	            this.sessionSetGraphParameterClause();
	            break;
	        case 312:
	        case 347:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1386;
	            this.sessionSetBindingTableParameterCalues();
	            break;
	        case 263:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1387;
	            this.sessionSetValuesParameterClause();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sessionSetGraphParameterClause() {
	    let localctx = new SessionSetGraphParameterClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, GQLParser.RULE_sessionSetGraphParameterClause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1391;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===339) {
	            this.state = 1390;
	            this.match(GQLParser.PROPERTY);
	        }

	        this.state = 1393;
	        this.match(GQLParser.GRAPH);
	        this.state = 1394;
	        this.sessionSetParameterName();
	        this.state = 1395;
	        this.optTypedGraphInit();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sessionSetBindingTableParameterCalues() {
	    let localctx = new SessionSetBindingTableParameterCaluesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, GQLParser.RULE_sessionSetBindingTableParameterCalues);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1398;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===312) {
	            this.state = 1397;
	            this.match(GQLParser.BINDING);
	        }

	        this.state = 1400;
	        this.match(GQLParser.TABLE);
	        this.state = 1401;
	        this.sessionSetParameterName();
	        this.state = 1402;
	        this.optTypedBindingTableInit();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sessionSetValuesParameterClause() {
	    let localctx = new SessionSetValuesParameterClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, GQLParser.RULE_sessionSetValuesParameterClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1404;
	        this.match(GQLParser.VALUE);
	        this.state = 1405;
	        this.sessionSetParameterName();
	        this.state = 1406;
	        this.optTypedValueInit();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sessionSetParameterName() {
	    let localctx = new SessionSetParameterNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, GQLParser.RULE_sessionSetParameterName);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1409;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===364) {
	            this.state = 1408;
	            this.match(GQLParser.IF_NOT_EXISTS);
	        }

	        this.state = 1411;
	        this.parameterName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sessionResetCommand() {
	    let localctx = new SessionResetCommandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, GQLParser.RULE_sessionResetCommand);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1414;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===226) {
	            this.state = 1413;
	            this.match(GQLParser.SESSION);
	        }

	        this.state = 1416;
	        this.match(GQLParser.RESET);
	        this.state = 1417;
	        this.sessionResetArguments();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sessionResetArguments() {
	    let localctx = new SessionResetArgumentsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, GQLParser.RULE_sessionResetArguments);
	    var _la = 0;
	    try {
	        this.state = 1432;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 62:
	        case 91:
	        case 204:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1420;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===62) {
	                this.state = 1419;
	                this.match(GQLParser.ALL);
	            }

	            this.state = 1422;
	            _la = this._input.LA(1);
	            if(!(_la===91 || _la===204)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case 223:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1423;
	            this.match(GQLParser.SCHEMA);
	            break;
	        case 323:
	        case 339:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1425;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===339) {
	                this.state = 1424;
	                this.match(GQLParser.PROPERTY);
	            }

	            this.state = 1427;
	            this.match(GQLParser.GRAPH);
	            break;
	        case 243:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1428;
	            this.match(GQLParser.TIME);
	            this.state = 1429;
	            this.match(GQLParser.ZONE);
	            break;
	        case 203:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1430;
	            this.match(GQLParser.PARAMETER);
	            this.state = 1431;
	            this.parameterName();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sessionCloseCommand() {
	    let localctx = new SessionCloseCommandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, GQLParser.RULE_sessionCloseCommand);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1435;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===226) {
	            this.state = 1434;
	            this.match(GQLParser.SESSION);
	        }

	        this.state = 1437;
	        this.match(GQLParser.CLOSE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transactionActivity() {
	    let localctx = new TransactionActivityContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, GQLParser.RULE_transactionActivity);
	    try {
	        this.state = 1451;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 235:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1439;
	            this.transactionStartCommand();
	            this.state = 1444;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,16,this._ctx);
	            if(la_===1) {
	                this.state = 1440;
	                this.procedureSpec();
	                this.state = 1442;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,15,this._ctx);
	                if(la_===1) {
	                    this.state = 1441;
	                    this.transactionEndCommand();

	                }

	            }
	            break;
	        case 40:
	        case 71:
	        case 84:
	        case 101:
	        case 118:
	        case 121:
	        case 131:
	        case 132:
	        case 140:
	        case 150:
	        case 169:
	        case 171:
	        case 182:
	        case 189:
	        case 197:
	        case 199:
	        case 201:
	        case 216:
	        case 219:
	        case 225:
	        case 227:
	        case 231:
	        case 261:
	        case 263:
	        case 312:
	        case 323:
	        case 339:
	        case 347:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1446;
	            this.procedureSpec();
	            this.state = 1448;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,17,this._ctx);
	            if(la_===1) {
	                this.state = 1447;
	                this.transactionEndCommand();

	            }
	            break;
	        case 95:
	        case 220:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1450;
	            this.transactionEndCommand();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transactionStartCommand() {
	    let localctx = new TransactionStartCommandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, GQLParser.RULE_transactionStartCommand);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1453;
	        this.match(GQLParser.START);
	        this.state = 1454;
	        this.match(GQLParser.TRANSACTION);
	        this.state = 1456;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===34 || _la===340) {
	            this.state = 1455;
	            this.transactionCharacteristics();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transactionEndCommand() {
	    let localctx = new TransactionEndCommandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, GQLParser.RULE_transactionEndCommand);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1458;
	        _la = this._input.LA(1);
	        if(!(_la===95 || _la===220)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transactionCharacteristics() {
	    let localctx = new TransactionCharacteristicsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, GQLParser.RULE_transactionCharacteristics);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1460;
	        this.transactionMode();
	        this.state = 1463; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1461;
	            this.match(GQLParser.COMMA);
	            this.state = 1462;
	            this.transactionMode();
	            this.state = 1465; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===34);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transactionMode() {
	    let localctx = new TransactionModeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, GQLParser.RULE_transactionMode);
	    try {
	        this.state = 1469;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 340:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1467;
	            this.transactionAccessMode();
	            break;
	        case -1:
	        case 34:
	        case 40:
	        case 71:
	        case 84:
	        case 92:
	        case 95:
	        case 101:
	        case 118:
	        case 121:
	        case 131:
	        case 132:
	        case 140:
	        case 150:
	        case 169:
	        case 171:
	        case 182:
	        case 189:
	        case 197:
	        case 199:
	        case 201:
	        case 216:
	        case 218:
	        case 219:
	        case 220:
	        case 225:
	        case 226:
	        case 227:
	        case 231:
	        case 235:
	        case 261:
	        case 263:
	        case 312:
	        case 323:
	        case 339:
	        case 347:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1468;
	            this.implDefinedAccessMode();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transactionAccessMode() {
	    let localctx = new TransactionAccessModeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, GQLParser.RULE_transactionAccessMode);
	    try {
	        this.state = 1475;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,22,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1471;
	            this.match(GQLParser.READ);
	            this.state = 1472;
	            this.match(GQLParser.ONLY);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1473;
	            this.match(GQLParser.READ);
	            this.state = 1474;
	            this.match(GQLParser.WRITE);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	implDefinedAccessMode() {
	    let localctx = new ImplDefinedAccessModeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, GQLParser.RULE_implDefinedAccessMode);
	    try {
	        this.enterOuterAlt(localctx, 1);

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nestedProcedureSpec() {
	    let localctx = new NestedProcedureSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, GQLParser.RULE_nestedProcedureSpec);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1479;
	        this.match(GQLParser.LEFT_BRACE);
	        this.state = 1480;
	        this.procedureSpec();
	        this.state = 1481;
	        this.match(GQLParser.RIGHT_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedureSpec() {
	    let localctx = new ProcedureSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, GQLParser.RULE_procedureSpec);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1483;
	        this.procedureBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nestedDataModProcedureSpec() {
	    let localctx = new NestedDataModProcedureSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, GQLParser.RULE_nestedDataModProcedureSpec);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1485;
	        this.match(GQLParser.LEFT_BRACE);
	        this.state = 1486;
	        this.procedureBody();
	        this.state = 1487;
	        this.match(GQLParser.RIGHT_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nestedQuerySpec() {
	    let localctx = new NestedQuerySpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, GQLParser.RULE_nestedQuerySpec);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1489;
	        this.match(GQLParser.LEFT_BRACE);
	        this.state = 1490;
	        this.procedureBody();
	        this.state = 1491;
	        this.match(GQLParser.RIGHT_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedureBody() {
	    let localctx = new ProcedureBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, GQLParser.RULE_procedureBody);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1494;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===71) {
	            this.state = 1493;
	            this.atSchemaClause();
	        }

	        this.state = 1497;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===263 || ((((_la - 312)) & ~0x1f) === 0 && ((1 << (_la - 312)) & 134219777) !== 0) || _la===347) {
	            this.state = 1496;
	            this.bindingVarDefBlock();
	        }

	        this.state = 1499;
	        this.statmentBlock();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bindingVarDefBlock() {
	    let localctx = new BindingVarDefBlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, GQLParser.RULE_bindingVarDefBlock);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1502; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1501;
	            this.bindingVarDef();
	            this.state = 1504; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===263 || ((((_la - 312)) & ~0x1f) === 0 && ((1 << (_la - 312)) & 134219777) !== 0) || _la===347);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bindingVarDef() {
	    let localctx = new BindingVarDefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, GQLParser.RULE_bindingVarDef);
	    try {
	        this.state = 1509;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 323:
	        case 339:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1506;
	            this.graphVarDef();
	            break;
	        case 312:
	        case 347:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1507;
	            this.bindingTableVarDef();
	            break;
	        case 263:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1508;
	            this.valueVarDef();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statmentBlock() {
	    let localctx = new StatmentBlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, GQLParser.RULE_statmentBlock);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1511;
	        this.statement();
	        this.state = 1515;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===188) {
	            this.state = 1512;
	            this.nextStatment();
	            this.state = 1517;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statement() {
	    let localctx = new StatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, GQLParser.RULE_statement);
	    try {
	        this.state = 1521;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,28,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1518;
	            this.linearCatalogModStatment();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1519;
	            this.linearDataModStatment();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1520;
	            this.compositeQueryStatment();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nextStatment() {
	    let localctx = new NextStatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, GQLParser.RULE_nextStatment);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1523;
	        this.match(GQLParser.NEXT);
	        this.state = 1525;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===272) {
	            this.state = 1524;
	            this.yieldClause();
	        }

	        this.state = 1527;
	        this.statement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphVarDef() {
	    let localctx = new GraphVarDefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, GQLParser.RULE_graphVarDef);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1530;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===339) {
	            this.state = 1529;
	            this.match(GQLParser.PROPERTY);
	        }

	        this.state = 1532;
	        this.match(GQLParser.GRAPH);
	        this.state = 1533;
	        this.graphVar();
	        this.state = 1534;
	        this.optTypedGraphInit();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	optTypedGraphInit() {
	    let localctx = new OptTypedGraphInitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, GQLParser.RULE_optTypedGraphInit);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1540;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===33 || _la===198 || _la===248 || _la===323 || _la===339) {
	            this.state = 1537;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===33 || _la===248) {
	                this.state = 1536;
	                this.typed();
	            }

	            this.state = 1539;
	            this.graphRefValueType();
	        }

	        this.state = 1542;
	        this.graphInit();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphInit() {
	    let localctx = new GraphInitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, GQLParser.RULE_graphInit);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1544;
	        this.match(GQLParser.EQUALS);
	        this.state = 1545;
	        this.graphExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bindingTableVarDef() {
	    let localctx = new BindingTableVarDefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, GQLParser.RULE_bindingTableVarDef);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1548;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===312) {
	            this.state = 1547;
	            this.match(GQLParser.BINDING);
	        }

	        this.state = 1550;
	        this.match(GQLParser.TABLE);
	        this.state = 1551;
	        this.bindingTableVar();
	        this.state = 1552;
	        this.optTypedBindingTableInit();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	optTypedBindingTableInit() {
	    let localctx = new OptTypedBindingTableInitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, GQLParser.RULE_optTypedBindingTableInit);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1558;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===33 || _la===248 || _la===312 || _la===347) {
	            this.state = 1555;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===33 || _la===248) {
	                this.state = 1554;
	                this.typed();
	            }

	            this.state = 1557;
	            this.bindingTableRefValueType();
	        }

	        this.state = 1560;
	        this.bindingTableInit();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bindingTableInit() {
	    let localctx = new BindingTableInitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, GQLParser.RULE_bindingTableInit);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1562;
	        this.match(GQLParser.EQUALS);
	        this.state = 1563;
	        this.bindingTableExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	valueVarDef() {
	    let localctx = new ValueVarDefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, GQLParser.RULE_valueVarDef);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1565;
	        this.match(GQLParser.VALUE);
	        this.state = 1566;
	        this.valueVar();
	        this.state = 1567;
	        this.optTypedValueInit();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	optTypedValueInit() {
	    let localctx = new OptTypedValueInitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, GQLParser.RULE_optTypedValueInit);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1573;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 2177) !== 0) || ((((_la - 65)) & ~0x1f) === 0 && ((1 << (_la - 65)) & 278019) !== 0) || ((((_la - 109)) & ~0x1f) === 0 && ((1 << (_la - 109)) & 1056974873) !== 0) || ((((_la - 142)) & ~0x1f) === 0 && ((1 << (_la - 142)) & 1082129921) !== 0) || ((((_la - 174)) & ~0x1f) === 0 && ((1 << (_la - 174)) & 2164260865) !== 0) || ((((_la - 214)) & ~0x1f) === 0 && ((1 << (_la - 214)) & 1628192771) !== 0) || ((((_la - 248)) & ~0x1f) === 0 && ((1 << (_la - 248)) & 33769983) !== 0) || ((((_la - 312)) & ~0x1f) === 0 && ((1 << (_la - 312)) & 679479393) !== 0) || ((((_la - 347)) & ~0x1f) === 0 && ((1 << (_la - 347)) & 385) !== 0)) {
	            this.state = 1570;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===33 || _la===248) {
	                this.state = 1569;
	                this.typed();
	            }

	            this.state = 1572;
	            this.valueType();
	        }

	        this.state = 1575;
	        this.valueInit();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	valueInit() {
	    let localctx = new ValueInitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, GQLParser.RULE_valueInit);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1577;
	        this.match(GQLParser.EQUALS);
	        this.state = 1578;
	        this.valueExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphExpr() {
	    let localctx = new GraphExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, GQLParser.RULE_graphExpr);
	    try {
	        this.state = 1585;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,38,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1580;
	            this.nestedGraphQuerySpec();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1581;
	            this.objectExprPrimary();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1582;
	            this.graphRef();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1583;
	            this.objectNameOrBindingVar();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1584;
	            this.currentGraph();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	currentGraph() {
	    let localctx = new CurrentGraphContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, GQLParser.RULE_currentGraph);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1587;
	        _la = this._input.LA(1);
	        if(!(_la===103 || _la===104)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nestedGraphQuerySpec() {
	    let localctx = new NestedGraphQuerySpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, GQLParser.RULE_nestedGraphQuerySpec);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1589;
	        this.nestedQuerySpec();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bindingTableExpr() {
	    let localctx = new BindingTableExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, GQLParser.RULE_bindingTableExpr);
	    try {
	        this.state = 1595;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,39,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1591;
	            this.nestedBindingTableQuerySpec();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1592;
	            this.objectExprPrimary();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1593;
	            this.bindingTableRef();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1594;
	            this.objectNameOrBindingVar();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nestedBindingTableQuerySpec() {
	    let localctx = new NestedBindingTableQuerySpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, GQLParser.RULE_nestedBindingTableQuerySpec);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1597;
	        this.nestedQuerySpec();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	objectExprPrimary() {
	    let localctx = new ObjectExprPrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, GQLParser.RULE_objectExprPrimary);
	    try {
	        this.state = 1608;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,40,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1599;
	            this.match(GQLParser.VARIABLE);
	            this.state = 1600;
	            this.valueExprPrimary();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1601;
	            this.parenthesizedValueExpr();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1602;
	            this.propertyRef();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1603;
	            this.unsignedValueSpec();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1604;
	            this.aggregateFunction();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1605;
	            this.collectionValueConstructor();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1606;
	            this.valueQueryExpr();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1607;
	            this.caseExpr();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	linearCatalogModStatment() {
	    let localctx = new LinearCatalogModStatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, GQLParser.RULE_linearCatalogModStatment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1611; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 1610;
	        		this.simpleCatalogModStatment();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 1613; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,41, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleCatalogModStatment() {
	    let localctx = new SimpleCatalogModStatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, GQLParser.RULE_simpleCatalogModStatment);
	    try {
	        this.state = 1617;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 101:
	        case 121:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1615;
	            this.primitiveCatalogModStatment();
	            break;
	        case 84:
	        case 199:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1616;
	            this.callCatalogModProcedureStatment();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primitiveCatalogModStatment() {
	    let localctx = new PrimitiveCatalogModStatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, GQLParser.RULE_primitiveCatalogModStatment);
	    try {
	        this.state = 1625;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,43,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1619;
	            this.createSchemeStatment();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1620;
	            this.createGraphStatment();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1621;
	            this.createGraphTypeStatment();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1622;
	            this.dropSchemeStatment();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1623;
	            this.dropGraphStatment();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1624;
	            this.dropGraphTypeStatment();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createSchemeStatment() {
	    let localctx = new CreateSchemeStatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, GQLParser.RULE_createSchemeStatment);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1627;
	        this.match(GQLParser.CREATE);
	        this.state = 1628;
	        this.match(GQLParser.SCHEMA);
	        this.state = 1630;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===364) {
	            this.state = 1629;
	            this.match(GQLParser.IF_NOT_EXISTS);
	        }

	        this.state = 1632;
	        this.catalogSchemaParentAndName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropSchemeStatment() {
	    let localctx = new DropSchemeStatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, GQLParser.RULE_dropSchemeStatment);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1634;
	        this.match(GQLParser.DROP);
	        this.state = 1635;
	        this.match(GQLParser.SCHEMA);
	        this.state = 1637;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===365) {
	            this.state = 1636;
	            this.match(GQLParser.IF_EXISTS);
	        }

	        this.state = 1639;
	        this.catalogSchemaParentAndName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createGraphStatment() {
	    let localctx = new CreateGraphStatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, GQLParser.RULE_createGraphStatment);
	    try {
	        this.state = 1643;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,46,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1641;
	            this.createOnlyGraphStatment();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1642;
	            this.createOrReplaceGraphStatment();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createOnlyGraphStatment() {
	    let localctx = new CreateOnlyGraphStatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, GQLParser.RULE_createOnlyGraphStatment);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1645;
	        this.match(GQLParser.CREATE);
	        this.state = 1647;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===339) {
	            this.state = 1646;
	            this.match(GQLParser.PROPERTY);
	        }

	        this.state = 1649;
	        this.match(GQLParser.GRAPH);
	        this.state = 1651;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===364) {
	            this.state = 1650;
	            this.match(GQLParser.IF_NOT_EXISTS);
	        }

	        this.state = 1653;
	        this.catalogGraphParentAndName();
	        this.state = 1656;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 198:
	            this.state = 1654;
	            this.openGraphType();
	            break;
	        case 33:
	        case 35:
	        case 40:
	        case 48:
	        case 54:
	        case 55:
	        case 56:
	        case 105:
	        case 146:
	        case 170:
	        case 248:
	        case 386:
	        case 387:
	        case 396:
	            this.state = 1655;
	            this.ofGraphType();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 1659;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===67) {
	            this.state = 1658;
	            this.graphSource();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createOrReplaceGraphStatment() {
	    let localctx = new CreateOrReplaceGraphStatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, GQLParser.RULE_createOrReplaceGraphStatment);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1661;
	        this.match(GQLParser.CREATE);
	        this.state = 1662;
	        this.match(GQLParser.OR);
	        this.state = 1663;
	        this.match(GQLParser.REPLACE);
	        this.state = 1665;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===339) {
	            this.state = 1664;
	            this.match(GQLParser.PROPERTY);
	        }

	        this.state = 1667;
	        this.match(GQLParser.GRAPH);
	        this.state = 1668;
	        this.catalogGraphParentAndName();
	        this.state = 1671;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 198:
	            this.state = 1669;
	            this.openGraphType();
	            break;
	        case 33:
	        case 35:
	        case 40:
	        case 48:
	        case 54:
	        case 55:
	        case 56:
	        case 105:
	        case 146:
	        case 170:
	        case 248:
	        case 386:
	        case 387:
	        case 396:
	            this.state = 1670;
	            this.ofGraphType();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 1674;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===67) {
	            this.state = 1673;
	            this.graphSource();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	openGraphType() {
	    let localctx = new OpenGraphTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, GQLParser.RULE_openGraphType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1676;
	        this.match(GQLParser.OPEN);
	        this.state = 1681;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===323 || _la===339) {
	            this.state = 1678;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===339) {
	                this.state = 1677;
	                this.match(GQLParser.PROPERTY);
	            }

	            this.state = 1680;
	            this.match(GQLParser.GRAPH);
	        }

	        this.state = 1683;
	        this.match(GQLParser.TYPE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ofGraphType() {
	    let localctx = new OfGraphTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, GQLParser.RULE_ofGraphType);
	    var _la = 0;
	    try {
	        this.state = 1694;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,58,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1685;
	            this.graphTypeLikeGraph();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1687;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===33 || _la===248) {
	                this.state = 1686;
	                this.typed();
	            }

	            this.state = 1689;
	            this.graphTypeRef();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1691;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===33 || _la===248) {
	                this.state = 1690;
	                this.typed();
	            }

	            this.state = 1693;
	            this.nestedGraphTypeSpec();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphTypeLikeGraph() {
	    let localctx = new GraphTypeLikeGraphContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, GQLParser.RULE_graphTypeLikeGraph);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1696;
	        this.match(GQLParser.LIKE);
	        this.state = 1697;
	        this.graphExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphSource() {
	    let localctx = new GraphSourceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, GQLParser.RULE_graphSource);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1699;
	        this.match(GQLParser.AS);
	        this.state = 1700;
	        this.match(GQLParser.COPY);
	        this.state = 1701;
	        this.match(GQLParser.OF);
	        this.state = 1702;
	        this.graphExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropGraphStatment() {
	    let localctx = new DropGraphStatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, GQLParser.RULE_dropGraphStatment);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1704;
	        this.match(GQLParser.DROP);
	        this.state = 1706;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===339) {
	            this.state = 1705;
	            this.match(GQLParser.PROPERTY);
	        }

	        this.state = 1708;
	        this.match(GQLParser.GRAPH);
	        this.state = 1710;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===365) {
	            this.state = 1709;
	            this.match(GQLParser.IF_EXISTS);
	        }

	        this.state = 1712;
	        this.catalogGraphParentAndName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createGraphTypeStatment() {
	    let localctx = new CreateGraphTypeStatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, GQLParser.RULE_createGraphTypeStatment);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1714;
	        this.match(GQLParser.CREATE);
	        this.state = 1730;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 323:
	        case 339:
	            this.state = 1716;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===339) {
	                this.state = 1715;
	                this.match(GQLParser.PROPERTY);
	            }

	            this.state = 1718;
	            this.match(GQLParser.GRAPH);
	            this.state = 1719;
	            this.match(GQLParser.TYPE);
	            this.state = 1721;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===364) {
	                this.state = 1720;
	                this.match(GQLParser.IF_NOT_EXISTS);
	            }

	            break;
	        case 200:
	            this.state = 1723;
	            this.match(GQLParser.OR);
	            this.state = 1724;
	            this.match(GQLParser.REPLACE);
	            this.state = 1726;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===339) {
	                this.state = 1725;
	                this.match(GQLParser.PROPERTY);
	            }

	            this.state = 1728;
	            this.match(GQLParser.GRAPH);
	            this.state = 1729;
	            this.match(GQLParser.TYPE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 1732;
	        this.catalogGraphTypeParentAndName();
	        this.state = 1733;
	        this.graphTypeSource();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphTypeSource() {
	    let localctx = new GraphTypeSourceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, GQLParser.RULE_graphTypeSource);
	    var _la = 0;
	    try {
	        this.state = 1744;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,67,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1736;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===67) {
	                this.state = 1735;
	                this.match(GQLParser.AS);
	            }

	            this.state = 1738;
	            this.copyOfGraphType();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1739;
	            this.graphTypeLikeGraph();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1741;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===67) {
	                this.state = 1740;
	                this.match(GQLParser.AS);
	            }

	            this.state = 1743;
	            this.nestedGraphTypeSpec();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	copyOfGraphType() {
	    let localctx = new CopyOfGraphTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, GQLParser.RULE_copyOfGraphType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1746;
	        this.match(GQLParser.COPY);
	        this.state = 1747;
	        this.match(GQLParser.OF);
	        this.state = 1750;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 35:
	        case 48:
	        case 54:
	        case 55:
	        case 56:
	        case 105:
	        case 146:
	        case 386:
	        case 387:
	        case 396:
	            this.state = 1748;
	            this.graphTypeRef();
	            break;
	        case -1:
	        case 40:
	        case 41:
	        case 71:
	        case 84:
	        case 92:
	        case 95:
	        case 101:
	        case 118:
	        case 121:
	        case 131:
	        case 132:
	        case 140:
	        case 150:
	        case 169:
	        case 171:
	        case 182:
	        case 188:
	        case 189:
	        case 197:
	        case 199:
	        case 201:
	        case 216:
	        case 218:
	        case 219:
	        case 220:
	        case 225:
	        case 226:
	        case 227:
	        case 231:
	        case 235:
	        case 261:
	        case 263:
	        case 312:
	        case 323:
	        case 339:
	        case 347:
	            this.state = 1749;
	            this.externalObjectRef();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropGraphTypeStatment() {
	    let localctx = new DropGraphTypeStatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, GQLParser.RULE_dropGraphTypeStatment);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1752;
	        this.match(GQLParser.DROP);
	        this.state = 1754;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===339) {
	            this.state = 1753;
	            this.match(GQLParser.PROPERTY);
	        }

	        this.state = 1756;
	        this.match(GQLParser.GRAPH);
	        this.state = 1757;
	        this.match(GQLParser.TYPE);
	        this.state = 1759;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===365) {
	            this.state = 1758;
	            this.match(GQLParser.IF_EXISTS);
	        }

	        this.state = 1761;
	        this.catalogGraphTypeParentAndName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	callCatalogModProcedureStatment() {
	    let localctx = new CallCatalogModProcedureStatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, GQLParser.RULE_callCatalogModProcedureStatment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1763;
	        this.callProcedureStatment();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	linearDataModStatment() {
	    let localctx = new LinearDataModStatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, GQLParser.RULE_linearDataModStatment);
	    try {
	        this.state = 1767;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 261:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1765;
	            this.focusedLinearDataModStatment();
	            break;
	        case 40:
	        case 84:
	        case 118:
	        case 131:
	        case 140:
	        case 150:
	        case 169:
	        case 171:
	        case 182:
	        case 189:
	        case 197:
	        case 199:
	        case 201:
	        case 216:
	        case 227:
	        case 231:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1766;
	            this.ambientLinearDataModStatment();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	focusedLinearDataModStatment() {
	    let localctx = new FocusedLinearDataModStatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, GQLParser.RULE_focusedLinearDataModStatment);
	    try {
	        this.state = 1771;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,72,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1769;
	            this.focusedLinearDataModStatmentBody();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1770;
	            this.focusedNestedDataModProcedureSpec();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	focusedLinearDataModStatmentBody() {
	    let localctx = new FocusedLinearDataModStatmentBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, GQLParser.RULE_focusedLinearDataModStatmentBody);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1773;
	        this.useGraphClause();
	        this.state = 1774;
	        this.simpleLinearDataAccessingStatment();
	        this.state = 1776;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,73,this._ctx);
	        if(la_===1) {
	            this.state = 1775;
	            this.primitiveResultStatment();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	focusedNestedDataModProcedureSpec() {
	    let localctx = new FocusedNestedDataModProcedureSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, GQLParser.RULE_focusedNestedDataModProcedureSpec);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1778;
	        this.useGraphClause();
	        this.state = 1779;
	        this.nestedDataModProcedureSpec();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ambientLinearDataModStatment() {
	    let localctx = new AmbientLinearDataModStatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, GQLParser.RULE_ambientLinearDataModStatment);
	    try {
	        this.state = 1783;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 84:
	        case 118:
	        case 131:
	        case 140:
	        case 150:
	        case 169:
	        case 171:
	        case 182:
	        case 189:
	        case 197:
	        case 199:
	        case 201:
	        case 216:
	        case 227:
	        case 231:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1781;
	            this.ambientLinearDataModStatmentBody();
	            break;
	        case 40:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1782;
	            this.nestedDataModProcedureSpec();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ambientLinearDataModStatmentBody() {
	    let localctx = new AmbientLinearDataModStatmentBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, GQLParser.RULE_ambientLinearDataModStatmentBody);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1785;
	        this.simpleLinearDataAccessingStatment();
	        this.state = 1787;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,75,this._ctx);
	        if(la_===1) {
	            this.state = 1786;
	            this.primitiveResultStatment();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleLinearDataAccessingStatment() {
	    let localctx = new SimpleLinearDataAccessingStatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, GQLParser.RULE_simpleLinearDataAccessingStatment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1790; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 1789;
	        		this.simpleDataAccessingStatment();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 1792; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,76, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleDataAccessingStatment() {
	    let localctx = new SimpleDataAccessingStatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, GQLParser.RULE_simpleDataAccessingStatment);
	    try {
	        this.state = 1796;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,77,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1794;
	            this.simpleQueryStatment();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1795;
	            this.simpleDataModStatment();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleDataModStatment() {
	    let localctx = new SimpleDataModStatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, GQLParser.RULE_simpleDataModStatment);
	    try {
	        this.state = 1800;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 118:
	        case 150:
	        case 189:
	        case 216:
	        case 227:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1798;
	            this.primitiveDataModStatment();
	            break;
	        case 84:
	        case 199:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1799;
	            this.callDataModProcedureStatment();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primitiveDataModStatment() {
	    let localctx = new PrimitiveDataModStatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, GQLParser.RULE_primitiveDataModStatment);
	    try {
	        this.state = 1806;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 150:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1802;
	            this.insertStatment();
	            break;
	        case 227:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1803;
	            this.setStatment();
	            break;
	        case 216:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1804;
	            this.removeStatment();
	            break;
	        case 118:
	        case 189:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1805;
	            this.deleteStatment();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	insertStatment() {
	    let localctx = new InsertStatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, GQLParser.RULE_insertStatment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1808;
	        this.match(GQLParser.INSERT);
	        this.state = 1809;
	        this.insertGraphPattern();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setStatment() {
	    let localctx = new SetStatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, GQLParser.RULE_setStatment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1811;
	        this.match(GQLParser.SET);
	        this.state = 1812;
	        this.setItemList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setItemList() {
	    let localctx = new SetItemListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, GQLParser.RULE_setItemList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1814;
	        this.setItem();
	        this.state = 1817; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1815;
	            this.match(GQLParser.COMMA);
	            this.state = 1816;
	            this.setItem();
	            this.state = 1819; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===34);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setItem() {
	    let localctx = new SetItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, GQLParser.RULE_setItem);
	    try {
	        this.state = 1824;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,81,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1821;
	            this.setPropertyItem();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1822;
	            this.setAllPropertiesItem();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1823;
	            this.setLabelItem();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setPropertyItem() {
	    let localctx = new SetPropertyItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, GQLParser.RULE_setPropertyItem);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1826;
	        this.bindingVarRef();
	        this.state = 1827;
	        this.match(GQLParser.PERIOD);
	        this.state = 1828;
	        this.propertyName();
	        this.state = 1829;
	        this.match(GQLParser.EQUALS);
	        this.state = 1830;
	        this.valueExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setAllPropertiesItem() {
	    let localctx = new SetAllPropertiesItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, GQLParser.RULE_setAllPropertiesItem);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1832;
	        this.bindingVarRef();
	        this.state = 1833;
	        this.match(GQLParser.EQUALS);
	        this.state = 1834;
	        this.match(GQLParser.LEFT_BRACE);
	        this.state = 1836;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===56 || ((((_la - 386)) & ~0x1f) === 0 && ((1 << (_la - 386)) & 1027) !== 0)) {
	            this.state = 1835;
	            this.propertyKeyValuePairList();
	        }

	        this.state = 1838;
	        this.match(GQLParser.RIGHT_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setLabelItem() {
	    let localctx = new SetLabelItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, GQLParser.RULE_setLabelItem);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1840;
	        this.bindingVarRef();
	        this.state = 1841;
	        this.isOrColon();
	        this.state = 1842;
	        this.labelSetSpec();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	labelSetSpec() {
	    let localctx = new LabelSetSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, GQLParser.RULE_labelSetSpec);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1844;
	        this.labelName();
	        this.state = 1849;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===29) {
	            this.state = 1845;
	            this.match(GQLParser.AMPERSAND);
	            this.state = 1846;
	            this.labelName();
	            this.state = 1851;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	removeStatment() {
	    let localctx = new RemoveStatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, GQLParser.RULE_removeStatment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1852;
	        this.match(GQLParser.REMOVE);
	        this.state = 1853;
	        this.removeItemList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	removeItemList() {
	    let localctx = new RemoveItemListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, GQLParser.RULE_removeItemList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1855;
	        this.removeItem();
	        this.state = 1858; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1856;
	            this.match(GQLParser.COMMA);
	            this.state = 1857;
	            this.removeItem();
	            this.state = 1860; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===34);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	removeItem() {
	    let localctx = new RemoveItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 174, GQLParser.RULE_removeItem);
	    try {
	        this.state = 1864;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,85,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1862;
	            this.removePropertyItem();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1863;
	            this.removeLabelItem();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	removePropertyItem() {
	    let localctx = new RemovePropertyItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 176, GQLParser.RULE_removePropertyItem);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1866;
	        this.bindingVarRef();
	        this.state = 1867;
	        this.match(GQLParser.PERIOD);
	        this.state = 1868;
	        this.propertyName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	removeLabelItem() {
	    let localctx = new RemoveLabelItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 178, GQLParser.RULE_removeLabelItem);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1870;
	        this.bindingVarRef();
	        this.state = 1871;
	        this.isOrColon();
	        this.state = 1872;
	        this.labelSetSpec();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	deleteStatment() {
	    let localctx = new DeleteStatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 180, GQLParser.RULE_deleteStatment);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1874;
	        _la = this._input.LA(1);
	        if(!(_la===118 || _la===189)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 1875;
	        this.match(GQLParser.DELETE);
	        this.state = 1876;
	        this.deleteItemList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	deleteItemList() {
	    let localctx = new DeleteItemListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 182, GQLParser.RULE_deleteItemList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1878;
	        this.deleteItem();
	        this.state = 1881; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1879;
	            this.match(GQLParser.COMMA);
	            this.state = 1880;
	            this.deleteItem();
	            this.state = 1883; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===34);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	deleteItem() {
	    let localctx = new DeleteItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 184, GQLParser.RULE_deleteItem);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1885;
	        this.valueExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	callDataModProcedureStatment() {
	    let localctx = new CallDataModProcedureStatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 186, GQLParser.RULE_callDataModProcedureStatment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1887;
	        this.callProcedureStatment();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compositeQueryStatment() {
	    let localctx = new CompositeQueryStatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 188, GQLParser.RULE_compositeQueryStatment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1889;
	        this.compositeQueryExpr(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	compositeQueryExpr(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new CompositeQueryExprContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 190;
	    this.enterRecursionRule(localctx, 190, GQLParser.RULE_compositeQueryExpr, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1892;
	        this.compositeQueryPrimary();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1900;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,87,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new CompositeQueryExprContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, GQLParser.RULE_compositeQueryExpr);
	                this.state = 1894;
	                if (!( this.precpred(this._ctx, 2))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                }
	                this.state = 1895;
	                this.queryConjunction();
	                this.state = 1896;
	                this.compositeQueryPrimary(); 
	            }
	            this.state = 1902;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,87,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	queryConjunction() {
	    let localctx = new QueryConjunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 192, GQLParser.RULE_queryConjunction);
	    try {
	        this.state = 1905;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 127:
	        case 165:
	        case 257:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1903;
	            this.setOperator();
	            break;
	        case 202:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1904;
	            this.match(GQLParser.OTHERWISE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setOperator() {
	    let localctx = new SetOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 194, GQLParser.RULE_setOperator);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1907;
	        _la = this._input.LA(1);
	        if(!(_la===127 || _la===165 || _la===257)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 1908;
	        this.setQuantifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compositeQueryPrimary() {
	    let localctx = new CompositeQueryPrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 196, GQLParser.RULE_compositeQueryPrimary);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1910;
	        this.linearQueryStatment();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	linearQueryStatment() {
	    let localctx = new LinearQueryStatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 198, GQLParser.RULE_linearQueryStatment);
	    try {
	        this.state = 1914;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 225:
	        case 261:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1912;
	            this.focusedLinearQueryStatment();
	            break;
	        case 40:
	        case 84:
	        case 131:
	        case 132:
	        case 140:
	        case 169:
	        case 171:
	        case 182:
	        case 197:
	        case 199:
	        case 201:
	        case 219:
	        case 231:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1913;
	            this.ambientLinearQueryStatment();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	focusedLinearQueryStatment() {
	    let localctx = new FocusedLinearQueryStatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 200, GQLParser.RULE_focusedLinearQueryStatment);
	    try {
	        this.state = 1926;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,91,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1917; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 1916;
	            		this.focusedLinearQueryStatmentPart();
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 1919; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,90, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            this.state = 1921;
	            this.focusedLinearQueryAndPrimitiveResultStatmentPart();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1923;
	            this.focusedPrimitiveResultStatment();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1924;
	            this.focusedNestedQuerySpec();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1925;
	            this.selectStatment();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	focusedLinearQueryStatmentPart() {
	    let localctx = new FocusedLinearQueryStatmentPartContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 202, GQLParser.RULE_focusedLinearQueryStatmentPart);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1928;
	        this.useGraphClause();
	        this.state = 1929;
	        this.simpleLinearQueryStatment();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	focusedLinearQueryAndPrimitiveResultStatmentPart() {
	    let localctx = new FocusedLinearQueryAndPrimitiveResultStatmentPartContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 204, GQLParser.RULE_focusedLinearQueryAndPrimitiveResultStatmentPart);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1931;
	        this.useGraphClause();
	        this.state = 1932;
	        this.simpleLinearQueryStatment();
	        this.state = 1933;
	        this.primitiveResultStatment();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	focusedPrimitiveResultStatment() {
	    let localctx = new FocusedPrimitiveResultStatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 206, GQLParser.RULE_focusedPrimitiveResultStatment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1935;
	        this.useGraphClause();
	        this.state = 1936;
	        this.primitiveResultStatment();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	focusedNestedQuerySpec() {
	    let localctx = new FocusedNestedQuerySpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 208, GQLParser.RULE_focusedNestedQuerySpec);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1938;
	        this.useGraphClause();
	        this.state = 1939;
	        this.nestedQuerySpec();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ambientLinearQueryStatment() {
	    let localctx = new AmbientLinearQueryStatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 210, GQLParser.RULE_ambientLinearQueryStatment);
	    var _la = 0;
	    try {
	        this.state = 1946;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 84:
	        case 131:
	        case 132:
	        case 140:
	        case 169:
	        case 171:
	        case 182:
	        case 197:
	        case 199:
	        case 201:
	        case 219:
	        case 231:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1942;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===84 || _la===131 || _la===140 || ((((_la - 169)) & ~0x1f) === 0 && ((1 << (_la - 169)) & 1342185477) !== 0) || _la===201 || _la===231) {
	                this.state = 1941;
	                this.simpleLinearQueryStatment();
	            }

	            this.state = 1944;
	            this.primitiveResultStatment();
	            break;
	        case 40:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1945;
	            this.nestedQuerySpec();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleLinearQueryStatment() {
	    let localctx = new SimpleLinearQueryStatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 212, GQLParser.RULE_simpleLinearQueryStatment);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1948;
	        this.simpleQueryStatment();
	        this.state = 1952;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===84 || _la===131 || _la===140 || ((((_la - 169)) & ~0x1f) === 0 && ((1 << (_la - 169)) & 1342185477) !== 0) || _la===201 || _la===231) {
	            this.state = 1949;
	            this.simpleQueryStatment();
	            this.state = 1954;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleQueryStatment() {
	    let localctx = new SimpleQueryStatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 214, GQLParser.RULE_simpleQueryStatment);
	    try {
	        this.state = 1957;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,95,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1955;
	            this.primitiveQueryStatment();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1956;
	            this.callQueryStatment();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primitiveQueryStatment() {
	    let localctx = new PrimitiveQueryStatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 216, GQLParser.RULE_primitiveQueryStatment);
	    try {
	        this.state = 1964;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 182:
	        case 199:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1959;
	            this.matchStatment();
	            break;
	        case 169:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1960;
	            this.letStatment();
	            break;
	        case 140:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1961;
	            this.forStatment();
	            break;
	        case 131:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1962;
	            this.filterStatment();
	            break;
	        case 171:
	        case 197:
	        case 201:
	        case 231:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1963;
	            this.orderByAndPageStatment();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	matchStatment() {
	    let localctx = new MatchStatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 218, GQLParser.RULE_matchStatment);
	    try {
	        this.state = 1968;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 182:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1966;
	            this.simpleMatchStatment();
	            break;
	        case 199:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1967;
	            this.optionalMatchStatment();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleMatchStatment() {
	    let localctx = new SimpleMatchStatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 220, GQLParser.RULE_simpleMatchStatment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1970;
	        this.match(GQLParser.MATCH);
	        this.state = 1971;
	        this.graphPatternBindingTable();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	optionalMatchStatment() {
	    let localctx = new OptionalMatchStatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 222, GQLParser.RULE_optionalMatchStatment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1973;
	        this.match(GQLParser.OPTIONAL);
	        this.state = 1974;
	        this.optionalOperand();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	optionalOperand() {
	    let localctx = new OptionalOperandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 224, GQLParser.RULE_optionalOperand);
	    try {
	        this.state = 1985;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 182:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1976;
	            this.simpleMatchStatment();
	            break;
	        case 40:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1977;
	            this.match(GQLParser.LEFT_BRACE);
	            this.state = 1978;
	            this.matchStatmentBlock();
	            this.state = 1979;
	            this.match(GQLParser.RIGHT_BRACE);
	            break;
	        case 44:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1981;
	            this.match(GQLParser.LEFT_PAREN);
	            this.state = 1982;
	            this.matchStatmentBlock();
	            this.state = 1983;
	            this.match(GQLParser.RIGHT_PAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	matchStatmentBlock() {
	    let localctx = new MatchStatmentBlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 226, GQLParser.RULE_matchStatmentBlock);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1988; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1987;
	            this.matchStatment();
	            this.state = 1990; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===182 || _la===199);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	callQueryStatment() {
	    let localctx = new CallQueryStatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 228, GQLParser.RULE_callQueryStatment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1992;
	        this.callProcedureStatment();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	filterStatment() {
	    let localctx = new FilterStatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 230, GQLParser.RULE_filterStatment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1994;
	        this.match(GQLParser.FILTER);
	        this.state = 1997;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 268:
	            this.state = 1995;
	            this.whereClause();
	            break;
	        case 35:
	        case 40:
	        case 42:
	        case 44:
	        case 56:
	        case 60:
	        case 61:
	        case 63:
	        case 70:
	        case 72:
	        case 73:
	        case 80:
	        case 82:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 93:
	        case 94:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 102:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 114:
	        case 122:
	        case 123:
	        case 124:
	        case 128:
	        case 129:
	        case 130:
	        case 139:
	        case 169:
	        case 173:
	        case 175:
	        case 176:
	        case 177:
	        case 179:
	        case 180:
	        case 181:
	        case 183:
	        case 184:
	        case 186:
	        case 190:
	        case 191:
	        case 192:
	        case 194:
	        case 195:
	        case 205:
	        case 206:
	        case 208:
	        case 209:
	        case 210:
	        case 212:
	        case 213:
	        case 215:
	        case 221:
	        case 222:
	        case 229:
	        case 230:
	        case 234:
	        case 236:
	        case 237:
	        case 239:
	        case 240:
	        case 241:
	        case 243:
	        case 244:
	        case 246:
	        case 247:
	        case 258:
	        case 260:
	        case 263:
	        case 274:
	        case 275:
	        case 312:
	        case 323:
	        case 339:
	        case 347:
	        case 366:
	        case 368:
	        case 379:
	        case 384:
	        case 385:
	        case 386:
	        case 387:
	        case 396:
	            this.state = 1996;
	            this.searchCondition();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	letStatment() {
	    let localctx = new LetStatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 232, GQLParser.RULE_letStatment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1999;
	        this.match(GQLParser.LET);
	        this.state = 2000;
	        this.letVarDefList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	letVarDefList() {
	    let localctx = new LetVarDefListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 234, GQLParser.RULE_letVarDefList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2002;
	        this.letVarDef();
	        this.state = 2005; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 2003;
	            this.match(GQLParser.COMMA);
	            this.state = 2004;
	            this.letVarDef();
	            this.state = 2007; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===34);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	letVarDef() {
	    let localctx = new LetVarDefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 236, GQLParser.RULE_letVarDef);
	    try {
	        this.state = 2014;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 263:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2009;
	            this.valueVarDef();
	            break;
	        case 396:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2010;
	            this.valueVar();
	            this.state = 2011;
	            this.match(GQLParser.EQUALS);
	            this.state = 2012;
	            this.valueExpr();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forStatment() {
	    let localctx = new ForStatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 238, GQLParser.RULE_forStatment);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2016;
	        this.match(GQLParser.FOR);
	        this.state = 2017;
	        this.forItem();
	        this.state = 2019;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===269) {
	            this.state = 2018;
	            this.forOrdinalityOrOffset();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forItem() {
	    let localctx = new ForItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 240, GQLParser.RULE_forItem);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2021;
	        this.forItemAlias();
	        this.state = 2022;
	        this.listValueExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forItemAlias() {
	    let localctx = new ForItemAliasContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 242, GQLParser.RULE_forItemAlias);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2024;
	        this.identifier();
	        this.state = 2025;
	        this.match(GQLParser.IN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forOrdinalityOrOffset() {
	    let localctx = new ForOrdinalityOrOffsetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 244, GQLParser.RULE_forOrdinalityOrOffset);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2027;
	        this.match(GQLParser.WITH);
	        this.state = 2028;
	        _la = this._input.LA(1);
	        if(!(_la===197 || _la===338)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 2029;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	orderByAndPageStatment() {
	    let localctx = new OrderByAndPageStatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 246, GQLParser.RULE_orderByAndPageStatment);
	    try {
	        this.state = 2043;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 201:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2031;
	            this.orderByClause();
	            this.state = 2033;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,104,this._ctx);
	            if(la_===1) {
	                this.state = 2032;
	                this.offsetClause();

	            }
	            this.state = 2036;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,105,this._ctx);
	            if(la_===1) {
	                this.state = 2035;
	                this.limitClause();

	            }
	            break;
	        case 197:
	        case 231:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2038;
	            this.offsetClause();
	            this.state = 2040;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,106,this._ctx);
	            if(la_===1) {
	                this.state = 2039;
	                this.limitClause();

	            }
	            break;
	        case 171:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2042;
	            this.limitClause();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primitiveResultStatment() {
	    let localctx = new PrimitiveResultStatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 248, GQLParser.RULE_primitiveResultStatment);
	    try {
	        this.state = 2050;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 219:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2045;
	            this.returnStatment();
	            this.state = 2047;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,108,this._ctx);
	            if(la_===1) {
	                this.state = 2046;
	                this.orderByAndPageStatment();

	            }
	            break;
	        case 132:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2049;
	            this.match(GQLParser.FINISH);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnStatment() {
	    let localctx = new ReturnStatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 250, GQLParser.RULE_returnStatment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2052;
	        this.match(GQLParser.RETURN);
	        this.state = 2053;
	        this.returnStatmentBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnStatmentBody() {
	    let localctx = new ReturnStatmentBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 252, GQLParser.RULE_returnStatmentBody);
	    var _la = 0;
	    try {
	        this.state = 2067;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 30:
	        case 35:
	        case 40:
	        case 42:
	        case 44:
	        case 56:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 70:
	        case 72:
	        case 73:
	        case 80:
	        case 82:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 93:
	        case 94:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 102:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 114:
	        case 119:
	        case 122:
	        case 123:
	        case 124:
	        case 128:
	        case 129:
	        case 130:
	        case 139:
	        case 169:
	        case 173:
	        case 175:
	        case 176:
	        case 177:
	        case 179:
	        case 180:
	        case 181:
	        case 183:
	        case 184:
	        case 186:
	        case 190:
	        case 191:
	        case 192:
	        case 194:
	        case 195:
	        case 205:
	        case 206:
	        case 208:
	        case 209:
	        case 210:
	        case 212:
	        case 213:
	        case 215:
	        case 221:
	        case 222:
	        case 229:
	        case 230:
	        case 234:
	        case 236:
	        case 237:
	        case 239:
	        case 240:
	        case 241:
	        case 243:
	        case 244:
	        case 246:
	        case 247:
	        case 258:
	        case 260:
	        case 263:
	        case 274:
	        case 275:
	        case 312:
	        case 323:
	        case 339:
	        case 347:
	        case 366:
	        case 368:
	        case 379:
	        case 384:
	        case 385:
	        case 386:
	        case 387:
	        case 396:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2056;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===62 || _la===119) {
	                this.state = 2055;
	                this.setQuantifier();
	            }

	            this.state = 2060;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 30:
	                this.state = 2058;
	                this.match(GQLParser.ASTERISK);
	                break;
	            case 35:
	            case 40:
	            case 42:
	            case 44:
	            case 56:
	            case 60:
	            case 61:
	            case 63:
	            case 70:
	            case 72:
	            case 73:
	            case 80:
	            case 82:
	            case 85:
	            case 86:
	            case 87:
	            case 88:
	            case 89:
	            case 90:
	            case 93:
	            case 94:
	            case 97:
	            case 98:
	            case 99:
	            case 100:
	            case 102:
	            case 106:
	            case 107:
	            case 108:
	            case 109:
	            case 110:
	            case 114:
	            case 122:
	            case 123:
	            case 124:
	            case 128:
	            case 129:
	            case 130:
	            case 139:
	            case 169:
	            case 173:
	            case 175:
	            case 176:
	            case 177:
	            case 179:
	            case 180:
	            case 181:
	            case 183:
	            case 184:
	            case 186:
	            case 190:
	            case 191:
	            case 192:
	            case 194:
	            case 195:
	            case 205:
	            case 206:
	            case 208:
	            case 209:
	            case 210:
	            case 212:
	            case 213:
	            case 215:
	            case 221:
	            case 222:
	            case 229:
	            case 230:
	            case 234:
	            case 236:
	            case 237:
	            case 239:
	            case 240:
	            case 241:
	            case 243:
	            case 244:
	            case 246:
	            case 247:
	            case 258:
	            case 260:
	            case 263:
	            case 274:
	            case 275:
	            case 312:
	            case 323:
	            case 339:
	            case 347:
	            case 366:
	            case 368:
	            case 379:
	            case 384:
	            case 385:
	            case 386:
	            case 387:
	            case 396:
	                this.state = 2059;
	                this.returnItemList();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 2063;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,112,this._ctx);
	            if(la_===1) {
	                this.state = 2062;
	                this.groupByClause();

	            }
	            break;
	        case 334:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2065;
	            this.match(GQLParser.NO);
	            this.state = 2066;
	            this.match(GQLParser.BINDINGS);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnItemList() {
	    let localctx = new ReturnItemListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 254, GQLParser.RULE_returnItemList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2069;
	        this.returnItem();
	        this.state = 2074;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,114,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2070;
	                this.match(GQLParser.COMMA);
	                this.state = 2071;
	                this.returnItem(); 
	            }
	            this.state = 2076;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,114,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnItem() {
	    let localctx = new ReturnItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 256, GQLParser.RULE_returnItem);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2077;
	        this.aggregatingValueExpr();
	        this.state = 2079;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,115,this._ctx);
	        if(la_===1) {
	            this.state = 2078;
	            this.returnItemAlias();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnItemAlias() {
	    let localctx = new ReturnItemAliasContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 258, GQLParser.RULE_returnItemAlias);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2081;
	        this.match(GQLParser.AS);
	        this.state = 2082;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectStatment() {
	    let localctx = new SelectStatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 260, GQLParser.RULE_selectStatment);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2084;
	        this.match(GQLParser.SELECT);
	        this.state = 2086;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===62 || _la===119) {
	            this.state = 2085;
	            this.setQuantifier();
	        }

	        this.state = 2090;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 35:
	        case 40:
	        case 42:
	        case 44:
	        case 56:
	        case 60:
	        case 61:
	        case 63:
	        case 70:
	        case 72:
	        case 73:
	        case 80:
	        case 82:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 93:
	        case 94:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 102:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 114:
	        case 122:
	        case 123:
	        case 124:
	        case 128:
	        case 129:
	        case 130:
	        case 139:
	        case 169:
	        case 173:
	        case 175:
	        case 176:
	        case 177:
	        case 179:
	        case 180:
	        case 181:
	        case 183:
	        case 184:
	        case 186:
	        case 190:
	        case 191:
	        case 192:
	        case 194:
	        case 195:
	        case 205:
	        case 206:
	        case 208:
	        case 209:
	        case 210:
	        case 212:
	        case 213:
	        case 215:
	        case 221:
	        case 222:
	        case 229:
	        case 230:
	        case 234:
	        case 236:
	        case 237:
	        case 239:
	        case 240:
	        case 241:
	        case 243:
	        case 244:
	        case 246:
	        case 247:
	        case 258:
	        case 260:
	        case 263:
	        case 274:
	        case 275:
	        case 312:
	        case 323:
	        case 339:
	        case 347:
	        case 366:
	        case 368:
	        case 379:
	        case 384:
	        case 385:
	        case 386:
	        case 387:
	        case 396:
	            this.state = 2088;
	            this.selectItemList();
	            break;
	        case 30:
	            this.state = 2089;
	            this.match(GQLParser.ASTERISK);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 2111;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,124,this._ctx);
	        if(la_===1) {
	            this.state = 2092;
	            this.selectStatmentBody();
	            this.state = 2094;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,118,this._ctx);
	            if(la_===1) {
	                this.state = 2093;
	                this.whereClause();

	            }
	            this.state = 2097;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,119,this._ctx);
	            if(la_===1) {
	                this.state = 2096;
	                this.groupByClause();

	            }
	            this.state = 2100;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,120,this._ctx);
	            if(la_===1) {
	                this.state = 2099;
	                this.havingClause();

	            }
	            this.state = 2103;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,121,this._ctx);
	            if(la_===1) {
	                this.state = 2102;
	                this.orderByClause();

	            }
	            this.state = 2106;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,122,this._ctx);
	            if(la_===1) {
	                this.state = 2105;
	                this.offsetClause();

	            }
	            this.state = 2109;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,123,this._ctx);
	            if(la_===1) {
	                this.state = 2108;
	                this.limitClause();

	            }

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectItemList() {
	    let localctx = new SelectItemListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 262, GQLParser.RULE_selectItemList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2113;
	        this.selectItem();
	        this.state = 2116; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 2114;
	        		this.match(GQLParser.COMMA);
	        		this.state = 2115;
	        		this.selectItem();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 2118; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,125, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectItem() {
	    let localctx = new SelectItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 264, GQLParser.RULE_selectItem);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2120;
	        this.aggregatingValueExpr();
	        this.state = 2122;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,126,this._ctx);
	        if(la_===1) {
	            this.state = 2121;
	            this.selectItemAlias();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectItemAlias() {
	    let localctx = new SelectItemAliasContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 266, GQLParser.RULE_selectItemAlias);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2124;
	        this.match(GQLParser.AS);
	        this.state = 2125;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	havingClause() {
	    let localctx = new HavingClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 268, GQLParser.RULE_havingClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2127;
	        this.match(GQLParser.HAVING);
	        this.state = 2128;
	        this.searchCondition();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectStatmentBody() {
	    let localctx = new SelectStatmentBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 270, GQLParser.RULE_selectStatmentBody);
	    try {
	        this.state = 2133;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,127,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2130;
	            this.match(GQLParser.FROM);
	            this.state = 2131;
	            this.selectGraphMatchList();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2132;
	            this.selectQuerySpec();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectGraphMatchList() {
	    let localctx = new SelectGraphMatchListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 272, GQLParser.RULE_selectGraphMatchList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2135;
	        this.selectGraphMatch();
	        this.state = 2140;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,128,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2136;
	                this.match(GQLParser.COMMA);
	                this.state = 2137;
	                this.selectGraphMatch(); 
	            }
	            this.state = 2142;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,128,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectGraphMatch() {
	    let localctx = new SelectGraphMatchContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 274, GQLParser.RULE_selectGraphMatch);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2143;
	        this.graphExpr();
	        this.state = 2144;
	        this.matchStatment();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectQuerySpec() {
	    let localctx = new SelectQuerySpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 276, GQLParser.RULE_selectQuerySpec);
	    try {
	        this.state = 2152;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,129,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2146;
	            this.match(GQLParser.FROM);
	            this.state = 2147;
	            this.nestedQuerySpec();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2148;
	            this.match(GQLParser.FROM);
	            this.state = 2149;
	            this.graphExpr();
	            this.state = 2150;
	            this.nestedQuerySpec();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	callProcedureStatment() {
	    let localctx = new CallProcedureStatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 278, GQLParser.RULE_callProcedureStatment);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2155;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===199) {
	            this.state = 2154;
	            this.match(GQLParser.OPTIONAL);
	        }

	        this.state = 2157;
	        this.match(GQLParser.CALL);
	        this.state = 2158;
	        this.procedureCall();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedureCall() {
	    let localctx = new ProcedureCallContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 280, GQLParser.RULE_procedureCall);
	    try {
	        this.state = 2162;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 40:
	        case 44:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2160;
	            this.inlineProcedureCall();
	            break;
	        case 35:
	        case 48:
	        case 54:
	        case 55:
	        case 56:
	        case 105:
	        case 146:
	        case 386:
	        case 387:
	        case 396:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2161;
	            this.namedProcedureCall();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inlineProcedureCall() {
	    let localctx = new InlineProcedureCallContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 282, GQLParser.RULE_inlineProcedureCall);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2165;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===44) {
	            this.state = 2164;
	            this.varScopeClause();
	        }

	        this.state = 2167;
	        this.nestedProcedureSpec();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	varScopeClause() {
	    let localctx = new VarScopeClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 284, GQLParser.RULE_varScopeClause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2169;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 2171;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===396) {
	            this.state = 2170;
	            this.bindingVarRefList();
	        }

	        this.state = 2173;
	        this.match(GQLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bindingVarRefList() {
	    let localctx = new BindingVarRefListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 286, GQLParser.RULE_bindingVarRefList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2175;
	        this.bindingVarRef();
	        this.state = 2178; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 2176;
	            this.match(GQLParser.COMMA);
	            this.state = 2177;
	            this.bindingVarRef();
	            this.state = 2180; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===34);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	namedProcedureCall() {
	    let localctx = new NamedProcedureCallContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 288, GQLParser.RULE_namedProcedureCall);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2182;
	        this.procedureRef();
	        this.state = 2183;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 2185;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 35)) & ~0x1f) === 0 && ((1 << (_la - 35)) & 371196577) !== 0) || ((((_la - 70)) & ~0x1f) === 0 && ((1 << (_la - 70)) & 2040501261) !== 0) || ((((_la - 102)) & ~0x1f) === 0 && ((1 << (_la - 102)) & 477106673) !== 0) || _la===139 || _la===169 || ((((_la - 173)) & ~0x1f) === 0 && ((1 << (_la - 173)) & 7220701) !== 0) || ((((_la - 205)) & ~0x1f) === 0 && ((1 << (_la - 205)) & 2734884283) !== 0) || ((((_la - 237)) & ~0x1f) === 0 && ((1 << (_la - 237)) & 77596381) !== 0) || _la===274 || _la===275 || ((((_la - 312)) & ~0x1f) === 0 && ((1 << (_la - 312)) & 134219777) !== 0) || ((((_la - 347)) & ~0x1f) === 0 && ((1 << (_la - 347)) & 2621441) !== 0) || ((((_la - 379)) & ~0x1f) === 0 && ((1 << (_la - 379)) & 131553) !== 0)) {
	            this.state = 2184;
	            this.procedureArgList();
	        }

	        this.state = 2187;
	        this.match(GQLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedureArgList() {
	    let localctx = new ProcedureArgListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 290, GQLParser.RULE_procedureArgList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2189;
	        this.procedureArg();
	        this.state = 2192; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 2190;
	            this.match(GQLParser.COMMA);
	            this.state = 2191;
	            this.procedureArg();
	            this.state = 2194; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===34);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedureArg() {
	    let localctx = new ProcedureArgContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 292, GQLParser.RULE_procedureArg);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2196;
	        this.valueExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	useGraphClause() {
	    let localctx = new UseGraphClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 294, GQLParser.RULE_useGraphClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2198;
	        this.match(GQLParser.USE);
	        this.state = 2199;
	        this.graphExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	atSchemaClause() {
	    let localctx = new AtSchemaClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 296, GQLParser.RULE_atSchemaClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2201;
	        this.match(GQLParser.AT);
	        this.state = 2202;
	        this.schemaRef();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bindingVarRef() {
	    let localctx = new BindingVarRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 298, GQLParser.RULE_bindingVarRef);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2204;
	        this.bindingVar();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementVarRef() {
	    let localctx = new ElementVarRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 300, GQLParser.RULE_elementVarRef);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2206;
	        this.bindingVarRef();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathVarRef() {
	    let localctx = new PathVarRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 302, GQLParser.RULE_pathVarRef);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2208;
	        this.bindingVarRef();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parameter() {
	    let localctx = new ParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 304, GQLParser.RULE_parameter);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2210;
	        this.parameterName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphPatternBindingTable() {
	    let localctx = new GraphPatternBindingTableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 306, GQLParser.RULE_graphPatternBindingTable);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2212;
	        this.graphPattern();
	        this.state = 2214;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,137,this._ctx);
	        if(la_===1) {
	            this.state = 2213;
	            this.graphPatternYieldClause();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphPatternYieldClause() {
	    let localctx = new GraphPatternYieldClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 308, GQLParser.RULE_graphPatternYieldClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2216;
	        this.match(GQLParser.YIELD);
	        this.state = 2217;
	        this.graphPatternYieldItemList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphPatternYieldItemList() {
	    let localctx = new GraphPatternYieldItemListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 310, GQLParser.RULE_graphPatternYieldItemList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2219;
	        this.graphPatternYieldItem();
	        this.state = 2222; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 2220;
	        		this.match(GQLParser.COMMA);
	        		this.state = 2221;
	        		this.graphPatternYieldItem();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 2224; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,138, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphPatternYieldItem() {
	    let localctx = new GraphPatternYieldItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 312, GQLParser.RULE_graphPatternYieldItem);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2226;
	        this.elementVarRef();
	        this.state = 2227;
	        this.pathVarRef();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphPattern() {
	    let localctx = new GraphPatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 314, GQLParser.RULE_graphPattern);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2230;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===316 || _la===343) {
	            this.state = 2229;
	            this.matchMode();
	        }

	        this.state = 2232;
	        this.pathPatternList();
	        this.state = 2234;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,140,this._ctx);
	        if(la_===1) {
	            this.state = 2233;
	            this.keepClause();

	        }
	        this.state = 2237;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,141,this._ctx);
	        if(la_===1) {
	            this.state = 2236;
	            this.graphPatternWhereClause();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	matchMode() {
	    let localctx = new MatchModeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 316, GQLParser.RULE_matchMode);
	    try {
	        this.state = 2241;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 343:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2239;
	            this.repeatableElementsMatchMode();
	            break;
	        case 316:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2240;
	            this.differentEdgesMatchMode();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	repeatableElementsMatchMode() {
	    let localctx = new RepeatableElementsMatchModeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 318, GQLParser.RULE_repeatableElementsMatchMode);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2243;
	        this.match(GQLParser.REPEATABLE);
	        this.state = 2244;
	        this.elementBindingsOrElements();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	differentEdgesMatchMode() {
	    let localctx = new DifferentEdgesMatchModeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 320, GQLParser.RULE_differentEdgesMatchMode);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2246;
	        this.match(GQLParser.DIFFERENT);
	        this.state = 2247;
	        this.edgeBindingsOrEdges();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementBindingsOrElements() {
	    let localctx = new ElementBindingsOrElementsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 322, GQLParser.RULE_elementBindingsOrElements);
	    var _la = 0;
	    try {
	        this.state = 2254;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 320:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2249;
	            this.match(GQLParser.ELEMENT);
	            this.state = 2251;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===313) {
	                this.state = 2250;
	                this.match(GQLParser.BINDINGS);
	            }

	            break;
	        case 321:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2253;
	            this.match(GQLParser.ELEMENTS);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	edgeBindingsOrEdges() {
	    let localctx = new EdgeBindingsOrEdgesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 324, GQLParser.RULE_edgeBindingsOrEdges);
	    var _la = 0;
	    try {
	        this.state = 2261;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 318:
	        case 341:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2256;
	            this.edgeSynonym();
	            this.state = 2258;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===313) {
	                this.state = 2257;
	                this.match(GQLParser.BINDINGS);
	            }

	            break;
	        case 319:
	        case 342:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2260;
	            this.edgesSynonym();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathPatternList() {
	    let localctx = new PathPatternListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 326, GQLParser.RULE_pathPatternList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2263;
	        this.pathPattern();
	        this.state = 2268;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,147,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2264;
	                this.match(GQLParser.COMMA);
	                this.state = 2265;
	                this.pathPattern(); 
	            }
	            this.state = 2270;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,147,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathPattern() {
	    let localctx = new PathPatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 328, GQLParser.RULE_pathPattern);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2272;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===396) {
	            this.state = 2271;
	            this.pathVarDeclaration();
	        }

	        this.state = 2275;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===62 || _la===65 || _la===311 || ((((_la - 344)) & ~0x1f) === 0 && ((1 << (_la - 344)) & 4227) !== 0)) {
	            this.state = 2274;
	            this.pathPatternPrefix();
	        }

	        this.state = 2278; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 2277;
	        		this.pathPatternExpr();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 2280; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,150, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathVarDeclaration() {
	    let localctx = new PathVarDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 330, GQLParser.RULE_pathVarDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2282;
	        this.pathVar();
	        this.state = 2283;
	        this.match(GQLParser.EQUALS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keepClause() {
	    let localctx = new KeepClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 332, GQLParser.RULE_keepClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2285;
	        this.match(GQLParser.KEEP);
	        this.state = 2286;
	        this.pathPatternPrefix();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphPatternWhereClause() {
	    let localctx = new GraphPatternWhereClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 334, GQLParser.RULE_graphPatternWhereClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2288;
	        this.match(GQLParser.WHERE);
	        this.state = 2289;
	        this.searchCondition();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathPatternPrefix() {
	    let localctx = new PathPatternPrefixContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 336, GQLParser.RULE_pathPatternPrefix);
	    try {
	        this.state = 2293;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 311:
	        case 345:
	        case 351:
	        case 356:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2291;
	            this.pathModePrefix();
	            break;
	        case 62:
	        case 65:
	        case 344:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2292;
	            this.pathSearchPrefix();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathModePrefix() {
	    let localctx = new PathModePrefixContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 338, GQLParser.RULE_pathModePrefix);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2295;
	        this.pathMode();
	        this.state = 2297;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,152,this._ctx);
	        if(la_===1) {
	            this.state = 2296;
	            this.pathOrPaths();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathMode() {
	    let localctx = new PathModeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 340, GQLParser.RULE_pathMode);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2299;
	        _la = this._input.LA(1);
	        if(!(_la===311 || ((((_la - 345)) & ~0x1f) === 0 && ((1 << (_la - 345)) & 2113) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathSearchPrefix() {
	    let localctx = new PathSearchPrefixContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 342, GQLParser.RULE_pathSearchPrefix);
	    try {
	        this.state = 2304;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,153,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2301;
	            this.allPathSearch();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2302;
	            this.anyPathSearch();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2303;
	            this.shortestPathSearch();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	allPathSearch() {
	    let localctx = new AllPathSearchContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 344, GQLParser.RULE_allPathSearch);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2306;
	        this.match(GQLParser.ALL);
	        this.state = 2308;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,154,this._ctx);
	        if(la_===1) {
	            this.state = 2307;
	            this.pathMode();

	        }
	        this.state = 2311;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,155,this._ctx);
	        if(la_===1) {
	            this.state = 2310;
	            this.pathOrPaths();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathOrPaths() {
	    let localctx = new PathOrPathsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 346, GQLParser.RULE_pathOrPaths);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2313;
	        _la = this._input.LA(1);
	        if(!(_la===205 || _la===207)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	anyPathSearch() {
	    let localctx = new AnyPathSearchContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 348, GQLParser.RULE_anyPathSearch);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2315;
	        this.match(GQLParser.ANY);
	        this.state = 2317;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,156,this._ctx);
	        if(la_===1) {
	            this.state = 2316;
	            this.numberOfPaths();

	        }
	        this.state = 2320;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,157,this._ctx);
	        if(la_===1) {
	            this.state = 2319;
	            this.pathMode();

	        }
	        this.state = 2323;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,158,this._ctx);
	        if(la_===1) {
	            this.state = 2322;
	            this.pathOrPaths();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numberOfPaths() {
	    let localctx = new NumberOfPathsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 350, GQLParser.RULE_numberOfPaths);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2325;
	        this.unsignedIntSpec();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	shortestPathSearch() {
	    let localctx = new ShortestPathSearchContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 352, GQLParser.RULE_shortestPathSearch);
	    try {
	        this.state = 2331;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,159,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2327;
	            this.allShortestPathSearch();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2328;
	            this.anyShortestPathSearch();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2329;
	            this.countedShortestPathSearch();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2330;
	            this.countedShortestGroupSearch();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	allShortestPathSearch() {
	    let localctx = new AllShortestPathSearchContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 354, GQLParser.RULE_allShortestPathSearch);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2333;
	        this.match(GQLParser.ALL);
	        this.state = 2334;
	        this.match(GQLParser.SHORTEST);
	        this.state = 2336;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,160,this._ctx);
	        if(la_===1) {
	            this.state = 2335;
	            this.pathMode();

	        }
	        this.state = 2339;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,161,this._ctx);
	        if(la_===1) {
	            this.state = 2338;
	            this.pathOrPaths();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	anyShortestPathSearch() {
	    let localctx = new AnyShortestPathSearchContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 356, GQLParser.RULE_anyShortestPathSearch);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2341;
	        this.match(GQLParser.ANY);
	        this.state = 2342;
	        this.match(GQLParser.SHORTEST);
	        this.state = 2344;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,162,this._ctx);
	        if(la_===1) {
	            this.state = 2343;
	            this.pathMode();

	        }
	        this.state = 2347;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,163,this._ctx);
	        if(la_===1) {
	            this.state = 2346;
	            this.pathOrPaths();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	countedShortestPathSearch() {
	    let localctx = new CountedShortestPathSearchContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 358, GQLParser.RULE_countedShortestPathSearch);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2349;
	        this.match(GQLParser.SHORTEST);
	        this.state = 2350;
	        this.numberOfPaths();
	        this.state = 2352;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,164,this._ctx);
	        if(la_===1) {
	            this.state = 2351;
	            this.pathMode();

	        }
	        this.state = 2355;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,165,this._ctx);
	        if(la_===1) {
	            this.state = 2354;
	            this.pathOrPaths();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	countedShortestGroupSearch() {
	    let localctx = new CountedShortestGroupSearchContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 360, GQLParser.RULE_countedShortestGroupSearch);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2357;
	        this.match(GQLParser.SHORTEST);
	        this.state = 2358;
	        this.numberOfGroups();
	        this.state = 2360;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===311 || ((((_la - 345)) & ~0x1f) === 0 && ((1 << (_la - 345)) & 2113) !== 0)) {
	            this.state = 2359;
	            this.pathMode();
	        }

	        this.state = 2363;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===205 || _la===207) {
	            this.state = 2362;
	            this.pathOrPaths();
	        }

	        this.state = 2365;
	        this.groupOrGroups();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	groupOrGroups() {
	    let localctx = new GroupOrGroupsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 362, GQLParser.RULE_groupOrGroups);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2367;
	        _la = this._input.LA(1);
	        if(!(_la===142 || _la===324)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numberOfGroups() {
	    let localctx = new NumberOfGroupsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 364, GQLParser.RULE_numberOfGroups);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2369;
	        this.unsignedIntSpec();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathPatternExpr() {
	    let localctx = new PathPatternExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 366, GQLParser.RULE_pathPatternExpr);
	    try {
	        this.state = 2374;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,168,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2371;
	            this.pathTerm();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2372;
	            this.pathMultisetAlternation();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2373;
	            this.pathPatternUnion();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathMultisetAlternation() {
	    let localctx = new PathMultisetAlternationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 368, GQLParser.RULE_pathMultisetAlternation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2376;
	        this.pathTerm();
	        this.state = 2381;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,169,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2377;
	                this.match(GQLParser.MULTISET_ALTERNATION);
	                this.state = 2378;
	                this.pathTerm(); 
	            }
	            this.state = 2383;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,169,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathPatternUnion() {
	    let localctx = new PathPatternUnionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 370, GQLParser.RULE_pathPatternUnion);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2384;
	        this.pathTerm();
	        this.state = 2389;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,170,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2385;
	                this.match(GQLParser.VERTICAL_BAR);
	                this.state = 2386;
	                this.pathTerm(); 
	            }
	            this.state = 2391;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,170,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathTerm() {
	    let localctx = new PathTermContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 372, GQLParser.RULE_pathTerm);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2392;
	        this.pathFactor();
	        this.state = 2396;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,171,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2393;
	                this.pathFactor(); 
	            }
	            this.state = 2398;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,171,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathFactor() {
	    let localctx = new PathFactorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 374, GQLParser.RULE_pathFactor);
	    try {
	        this.state = 2402;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,172,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2399;
	            this.pathPrimary();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2400;
	            this.quantifiedPathPrimary();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2401;
	            this.questionedPathPrimary();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	quantifiedPathPrimary() {
	    let localctx = new QuantifiedPathPrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 376, GQLParser.RULE_quantifiedPathPrimary);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2404;
	        this.pathPrimary();
	        this.state = 2405;
	        this.graphPatternQuantifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	questionedPathPrimary() {
	    let localctx = new QuestionedPathPrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 378, GQLParser.RULE_questionedPathPrimary);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2407;
	        this.pathPrimary();
	        this.state = 2408;
	        this.match(GQLParser.QUESTION_MARK);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathPrimary() {
	    let localctx = new PathPrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 380, GQLParser.RULE_pathPrimary);
	    try {
	        this.state = 2413;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,173,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2410;
	            this.elementPattern();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2411;
	            this.parenthesizedPathPatternExpr();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2412;
	            this.simplifiedPathPatternExpr();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementPattern() {
	    let localctx = new ElementPatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 382, GQLParser.RULE_elementPattern);
	    try {
	        this.state = 2417;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 44:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2415;
	            this.nodePattern();
	            break;
	        case 1:
	        case 2:
	        case 3:
	        case 4:
	        case 5:
	        case 8:
	        case 10:
	        case 19:
	        case 20:
	        case 27:
	        case 50:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2416;
	            this.edgePattern();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nodePattern() {
	    let localctx = new NodePatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 384, GQLParser.RULE_nodePattern);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2419;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 2420;
	        this.elementPatternFiller();
	        this.state = 2421;
	        this.match(GQLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementPatternFiller() {
	    let localctx = new ElementPatternFillerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 386, GQLParser.RULE_elementPatternFiller);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2424;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===348 || _la===396) {
	            this.state = 2423;
	            this.elementVarDeclaration();
	        }

	        this.state = 2427;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===32 || _la===167) {
	            this.state = 2426;
	            this.isLabelExpr();
	        }

	        this.state = 2430;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===40 || _la===268) {
	            this.state = 2429;
	            this.elementPatternPredicate();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementVarDeclaration() {
	    let localctx = new ElementVarDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 388, GQLParser.RULE_elementVarDeclaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2433;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===348) {
	            this.state = 2432;
	            this.match(GQLParser.TEMP);
	        }

	        this.state = 2435;
	        this.elementVar();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	isLabelExpr() {
	    let localctx = new IsLabelExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 390, GQLParser.RULE_isLabelExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2437;
	        this.isOrColon();
	        this.state = 2438;
	        this.labelExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	isOrColon() {
	    let localctx = new IsOrColonContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 392, GQLParser.RULE_isOrColon);
	    try {
	        this.state = 2442;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 167:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2440;
	            this.match(GQLParser.IS);
	            break;
	        case 32:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2441;
	            this.match(GQLParser.COLON);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementPatternPredicate() {
	    let localctx = new ElementPatternPredicateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 394, GQLParser.RULE_elementPatternPredicate);
	    try {
	        this.state = 2446;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 268:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2444;
	            this.elementPatternWhereClause();
	            break;
	        case 40:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2445;
	            this.elementPropertySpec();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementPatternWhereClause() {
	    let localctx = new ElementPatternWhereClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 396, GQLParser.RULE_elementPatternWhereClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2448;
	        this.match(GQLParser.WHERE);
	        this.state = 2449;
	        this.searchCondition();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementPropertySpec() {
	    let localctx = new ElementPropertySpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 398, GQLParser.RULE_elementPropertySpec);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2451;
	        this.match(GQLParser.LEFT_BRACE);
	        this.state = 2452;
	        this.propertyKeyValuePairList();
	        this.state = 2453;
	        this.match(GQLParser.RIGHT_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertyKeyValuePairList() {
	    let localctx = new PropertyKeyValuePairListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 400, GQLParser.RULE_propertyKeyValuePairList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2455;
	        this.propertyKeyValuePair();
	        this.state = 2460;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===34) {
	            this.state = 2456;
	            this.match(GQLParser.COMMA);
	            this.state = 2457;
	            this.propertyKeyValuePair();
	            this.state = 2462;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertyKeyValuePair() {
	    let localctx = new PropertyKeyValuePairContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 402, GQLParser.RULE_propertyKeyValuePair);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2463;
	        this.propertyName();
	        this.state = 2464;
	        this.match(GQLParser.COLON);
	        this.state = 2465;
	        this.valueExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	edgePattern() {
	    let localctx = new EdgePatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 404, GQLParser.RULE_edgePattern);
	    try {
	        this.state = 2469;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 3:
	        case 4:
	        case 8:
	        case 19:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2467;
	            this.fullEdgePattern();
	            break;
	        case 1:
	        case 2:
	        case 5:
	        case 10:
	        case 20:
	        case 27:
	        case 50:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2468;
	            this.abbreviatedEdgePattern();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fullEdgePattern() {
	    let localctx = new FullEdgePatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 406, GQLParser.RULE_fullEdgePattern);
	    try {
	        this.state = 2478;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,183,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2471;
	            this.fullEdgePointingLeft();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2472;
	            this.fullEdgeUndirected();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2473;
	            this.fullEdgePointingRight();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2474;
	            this.fullEdgeLeftOrUndirected();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2475;
	            this.fullEdgeUndirectedOrRight();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2476;
	            this.fullEdgeLeftOrRight();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 2477;
	            this.fullEdgeAnyDirection();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fullEdgePointingLeft() {
	    let localctx = new FullEdgePointingLeftContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 408, GQLParser.RULE_fullEdgePointingLeft);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2480;
	        this.match(GQLParser.LEFT_ARROW_BRACKET);
	        this.state = 2481;
	        this.elementPatternFiller();
	        this.state = 2482;
	        this.match(GQLParser.RIGHT_BRACKET_MINUS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fullEdgeUndirected() {
	    let localctx = new FullEdgeUndirectedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 410, GQLParser.RULE_fullEdgeUndirected);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2484;
	        this.match(GQLParser.TILDE_LEFT_BRACKET);
	        this.state = 2485;
	        this.elementPatternFiller();
	        this.state = 2486;
	        this.match(GQLParser.RIGHT_BRACKET_TILDE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fullEdgePointingRight() {
	    let localctx = new FullEdgePointingRightContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 412, GQLParser.RULE_fullEdgePointingRight);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2488;
	        this.match(GQLParser.MINUS_LEFT_BRACKET);
	        this.state = 2489;
	        this.elementPatternFiller();
	        this.state = 2490;
	        this.match(GQLParser.BRACKET_RIGHT_ARROW);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fullEdgeLeftOrUndirected() {
	    let localctx = new FullEdgeLeftOrUndirectedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 414, GQLParser.RULE_fullEdgeLeftOrUndirected);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2492;
	        this.match(GQLParser.LEFT_ARROW_TILDE_BRACKET);
	        this.state = 2493;
	        this.elementPatternFiller();
	        this.state = 2494;
	        this.match(GQLParser.RIGHT_BRACKET_TILDE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fullEdgeUndirectedOrRight() {
	    let localctx = new FullEdgeUndirectedOrRightContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 416, GQLParser.RULE_fullEdgeUndirectedOrRight);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2496;
	        this.match(GQLParser.TILDE_LEFT_BRACKET);
	        this.state = 2497;
	        this.elementPatternFiller();
	        this.state = 2498;
	        this.match(GQLParser.BRACKET_RIGHT_ARROW);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fullEdgeLeftOrRight() {
	    let localctx = new FullEdgeLeftOrRightContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 418, GQLParser.RULE_fullEdgeLeftOrRight);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2500;
	        this.match(GQLParser.LEFT_ARROW_BRACKET);
	        this.state = 2501;
	        this.elementPatternFiller();
	        this.state = 2502;
	        this.match(GQLParser.BRACKET_RIGHT_ARROW);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fullEdgeAnyDirection() {
	    let localctx = new FullEdgeAnyDirectionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 420, GQLParser.RULE_fullEdgeAnyDirection);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2504;
	        this.match(GQLParser.MINUS_LEFT_BRACKET);
	        this.state = 2505;
	        this.elementPatternFiller();
	        this.state = 2506;
	        this.match(GQLParser.RIGHT_BRACKET_MINUS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	abbreviatedEdgePattern() {
	    let localctx = new AbbreviatedEdgePatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 422, GQLParser.RULE_abbreviatedEdgePattern);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2508;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) === 0 && ((1 << _la) & 135267366) !== 0) || _la===50)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parenthesizedPathPatternExpr() {
	    let localctx = new ParenthesizedPathPatternExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 424, GQLParser.RULE_parenthesizedPathPatternExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2510;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 2512;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===396) {
	            this.state = 2511;
	            this.subpathVarDeclaration();
	        }

	        this.state = 2515;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===311 || ((((_la - 345)) & ~0x1f) === 0 && ((1 << (_la - 345)) & 2113) !== 0)) {
	            this.state = 2514;
	            this.pathModePrefix();
	        }

	        this.state = 2517;
	        this.pathPatternExpr();
	        this.state = 2519;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===268) {
	            this.state = 2518;
	            this.parenthesizedPathPatternWhereClause();
	        }

	        this.state = 2521;
	        this.match(GQLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subpathVarDeclaration() {
	    let localctx = new SubpathVarDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 426, GQLParser.RULE_subpathVarDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2523;
	        this.subpathVar();
	        this.state = 2524;
	        this.match(GQLParser.EQUALS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parenthesizedPathPatternWhereClause() {
	    let localctx = new ParenthesizedPathPatternWhereClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 428, GQLParser.RULE_parenthesizedPathPatternWhereClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2526;
	        this.match(GQLParser.WHERE);
	        this.state = 2527;
	        this.searchCondition();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	insertGraphPattern() {
	    let localctx = new InsertGraphPatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 430, GQLParser.RULE_insertGraphPattern);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2529;
	        this.insertGraphPatternList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	insertGraphPatternList() {
	    let localctx = new InsertGraphPatternListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 432, GQLParser.RULE_insertGraphPatternList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2531;
	        this.insertPathPattern();
	        this.state = 2536;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===34) {
	            this.state = 2532;
	            this.match(GQLParser.COMMA);
	            this.state = 2533;
	            this.insertPathPattern();
	            this.state = 2538;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	insertPathPattern() {
	    let localctx = new InsertPathPatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 434, GQLParser.RULE_insertPathPattern);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2539;
	        this.insertNodePattern();
	        this.state = 2545;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 524552) !== 0)) {
	            this.state = 2540;
	            this.insertEdgePattern();
	            this.state = 2541;
	            this.insertNodePattern();
	            this.state = 2547;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	insertNodePattern() {
	    let localctx = new InsertNodePatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 436, GQLParser.RULE_insertNodePattern);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2548;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 2550;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===32 || _la===167 || _la===348 || _la===396) {
	            this.state = 2549;
	            this.insertElementPatternFiller();
	        }

	        this.state = 2552;
	        this.match(GQLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	insertEdgePattern() {
	    let localctx = new InsertEdgePatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 438, GQLParser.RULE_insertEdgePattern);
	    try {
	        this.state = 2557;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 3:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2554;
	            this.insertEdgePointingLeft();
	            break;
	        case 8:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2555;
	            this.insertEdgePointingRight();
	            break;
	        case 19:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2556;
	            this.insertEdgeUndirected();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	insertEdgePointingLeft() {
	    let localctx = new InsertEdgePointingLeftContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 440, GQLParser.RULE_insertEdgePointingLeft);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2559;
	        this.match(GQLParser.LEFT_ARROW_BRACKET);
	        this.state = 2560;
	        this.insertElementPatternFiller();
	        this.state = 2561;
	        this.match(GQLParser.RIGHT_BRACKET_MINUS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	insertEdgePointingRight() {
	    let localctx = new InsertEdgePointingRightContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 442, GQLParser.RULE_insertEdgePointingRight);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2563;
	        this.match(GQLParser.MINUS_LEFT_BRACKET);
	        this.state = 2564;
	        this.insertElementPatternFiller();
	        this.state = 2565;
	        this.match(GQLParser.BRACKET_RIGHT_ARROW);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	insertEdgeUndirected() {
	    let localctx = new InsertEdgeUndirectedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 444, GQLParser.RULE_insertEdgeUndirected);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2567;
	        this.match(GQLParser.TILDE_LEFT_BRACKET);
	        this.state = 2568;
	        this.insertElementPatternFiller();
	        this.state = 2569;
	        this.match(GQLParser.RIGHT_BRACKET_TILDE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	insertElementPatternFiller() {
	    let localctx = new InsertElementPatternFillerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 446, GQLParser.RULE_insertElementPatternFiller);
	    var _la = 0;
	    try {
	        this.state = 2579;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,193,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2571;
	            this.elementVarDeclaration();
	            this.state = 2573;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===32 || _la===167) {
	                this.state = 2572;
	                this.labelAndPropertySetSpec();
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2576;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===348 || _la===396) {
	                this.state = 2575;
	                this.elementVarDeclaration();
	            }

	            this.state = 2578;
	            this.labelAndPropertySetSpec();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	labelAndPropertySetSpec() {
	    let localctx = new LabelAndPropertySetSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 448, GQLParser.RULE_labelAndPropertySetSpec);
	    try {
	        this.state = 2595;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,194,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2581;
	            this.isOrColon();
	            this.state = 2582;
	            this.labelSetSpec();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2584;
	            this.isOrColon();
	            this.state = 2585;
	            this.labelSetSpec();
	            this.state = 2586;
	            this.elementPropertySpec();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2588;
	            this.isOrColon();
	            this.state = 2589;
	            this.elementPropertySpec();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2591;
	            this.isOrColon();
	            this.state = 2592;
	            this.labelSetSpec();
	            this.state = 2593;
	            this.elementPropertySpec();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	labelExpr() {
	    let localctx = new LabelExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 450, GQLParser.RULE_labelExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2597;
	        this.labelTerm();
	        this.state = 2602;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===52) {
	            this.state = 2598;
	            this.match(GQLParser.VERTICAL_BAR);
	            this.state = 2599;
	            this.labelTerm();
	            this.state = 2604;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	labelTerm() {
	    let localctx = new LabelTermContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 452, GQLParser.RULE_labelTerm);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2605;
	        this.labelFactor();
	        this.state = 2610;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===29) {
	            this.state = 2606;
	            this.match(GQLParser.AMPERSAND);
	            this.state = 2607;
	            this.labelFactor();
	            this.state = 2612;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	labelFactor() {
	    let localctx = new LabelFactorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 454, GQLParser.RULE_labelFactor);
	    try {
	        this.state = 2615;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 44:
	        case 53:
	        case 56:
	        case 386:
	        case 387:
	        case 396:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2613;
	            this.labelPrimary();
	            break;
	        case 37:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2614;
	            this.labelNegation();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	labelNegation() {
	    let localctx = new LabelNegationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 456, GQLParser.RULE_labelNegation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2617;
	        this.match(GQLParser.EXCLAMATION);
	        this.state = 2618;
	        this.labelPrimary();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	labelPrimary() {
	    let localctx = new LabelPrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 458, GQLParser.RULE_labelPrimary);
	    try {
	        this.state = 2623;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 56:
	        case 386:
	        case 387:
	        case 396:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2620;
	            this.labelName();
	            break;
	        case 53:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2621;
	            this.wildcardLabel();
	            break;
	        case 44:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2622;
	            this.parenthesizedLabelExpr();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	wildcardLabel() {
	    let localctx = new WildcardLabelContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 460, GQLParser.RULE_wildcardLabel);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2625;
	        this.match(GQLParser.PERCENT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parenthesizedLabelExpr() {
	    let localctx = new ParenthesizedLabelExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 462, GQLParser.RULE_parenthesizedLabelExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2627;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 2628;
	        this.labelExpr();
	        this.state = 2629;
	        this.match(GQLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphPatternQuantifier() {
	    let localctx = new GraphPatternQuantifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 464, GQLParser.RULE_graphPatternQuantifier);
	    try {
	        this.state = 2635;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,199,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2631;
	            this.match(GQLParser.ASTERISK);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2632;
	            this.match(GQLParser.PLUS);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2633;
	            this.fixedQuantifier();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2634;
	            this.generalQuantifier();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fixedQuantifier() {
	    let localctx = new FixedQuantifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 466, GQLParser.RULE_fixedQuantifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2637;
	        this.match(GQLParser.LEFT_BRACE);
	        this.state = 2638;
	        this.match(GQLParser.UNSIGNED_INT);
	        this.state = 2639;
	        this.match(GQLParser.RIGHT_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	generalQuantifier() {
	    let localctx = new GeneralQuantifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 468, GQLParser.RULE_generalQuantifier);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2641;
	        this.match(GQLParser.LEFT_BRACE);
	        this.state = 2643;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===379) {
	            this.state = 2642;
	            this.lowerBound();
	        }

	        this.state = 2645;
	        this.match(GQLParser.COMMA);
	        this.state = 2647;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===379) {
	            this.state = 2646;
	            this.upperBound();
	        }

	        this.state = 2649;
	        this.match(GQLParser.RIGHT_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lowerBound() {
	    let localctx = new LowerBoundContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 470, GQLParser.RULE_lowerBound);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2651;
	        this.match(GQLParser.UNSIGNED_INT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	upperBound() {
	    let localctx = new UpperBoundContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 472, GQLParser.RULE_upperBound);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2653;
	        this.match(GQLParser.UNSIGNED_INT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedPathPatternExpr() {
	    let localctx = new SimplifiedPathPatternExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 474, GQLParser.RULE_simplifiedPathPatternExpr);
	    try {
	        this.state = 2662;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,202,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2655;
	            this.simplifiedDefaultingLeft();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2656;
	            this.simplifiedDefaultingUndirected();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2657;
	            this.simplifiedDefaultingRight();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2658;
	            this.simplifiedDefaultingLeftOrUndirected();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2659;
	            this.simplifiedDefaultingUndirectedOrRight();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2660;
	            this.simplifiedDefaultingLeftOrRight();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 2661;
	            this.simplifiedDefaultingAnyDirection();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedDefaultingLeft() {
	    let localctx = new SimplifiedDefaultingLeftContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 476, GQLParser.RULE_simplifiedDefaultingLeft);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2664;
	        this.match(GQLParser.LEFT_MINUS_SLASH);
	        this.state = 2665;
	        this.simplifiedContents();
	        this.state = 2666;
	        this.match(GQLParser.SLASH_MINUS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedDefaultingUndirected() {
	    let localctx = new SimplifiedDefaultingUndirectedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 478, GQLParser.RULE_simplifiedDefaultingUndirected);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2668;
	        this.match(GQLParser.TILDE_SLASH);
	        this.state = 2669;
	        this.simplifiedContents();
	        this.state = 2670;
	        this.match(GQLParser.SLASH_TILDE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedDefaultingRight() {
	    let localctx = new SimplifiedDefaultingRightContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 480, GQLParser.RULE_simplifiedDefaultingRight);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2672;
	        this.match(GQLParser.MINUS_SLASH);
	        this.state = 2673;
	        this.simplifiedContents();
	        this.state = 2674;
	        this.match(GQLParser.SLASH_MINUS_RIGHT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedDefaultingLeftOrUndirected() {
	    let localctx = new SimplifiedDefaultingLeftOrUndirectedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 482, GQLParser.RULE_simplifiedDefaultingLeftOrUndirected);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2676;
	        this.match(GQLParser.LEFT_TILDE_SLASH);
	        this.state = 2677;
	        this.simplifiedContents();
	        this.state = 2678;
	        this.match(GQLParser.SLASH_TILDE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedDefaultingUndirectedOrRight() {
	    let localctx = new SimplifiedDefaultingUndirectedOrRightContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 484, GQLParser.RULE_simplifiedDefaultingUndirectedOrRight);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2680;
	        this.match(GQLParser.TILDE_SLASH);
	        this.state = 2681;
	        this.simplifiedContents();
	        this.state = 2682;
	        this.match(GQLParser.SLASH_TILDE_RIGHT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedDefaultingLeftOrRight() {
	    let localctx = new SimplifiedDefaultingLeftOrRightContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 486, GQLParser.RULE_simplifiedDefaultingLeftOrRight);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2684;
	        this.match(GQLParser.LEFT_MINUS_SLASH);
	        this.state = 2685;
	        this.simplifiedContents();
	        this.state = 2686;
	        this.match(GQLParser.SLASH_MINUS_RIGHT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedDefaultingAnyDirection() {
	    let localctx = new SimplifiedDefaultingAnyDirectionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 488, GQLParser.RULE_simplifiedDefaultingAnyDirection);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2688;
	        this.match(GQLParser.MINUS_SLASH);
	        this.state = 2689;
	        this.simplifiedContents();
	        this.state = 2690;
	        this.match(GQLParser.SLASH_MINUS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedContents() {
	    let localctx = new SimplifiedContentsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 490, GQLParser.RULE_simplifiedContents);
	    try {
	        this.state = 2695;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,203,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2692;
	            this.simplifiedTerm();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2693;
	            this.simplifiedPathUnion();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2694;
	            this.simplifiedMultisetAlternation();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedPathUnion() {
	    let localctx = new SimplifiedPathUnionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 492, GQLParser.RULE_simplifiedPathUnion);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2697;
	        this.simplifiedTerm();
	        this.state = 2702;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===52) {
	            this.state = 2698;
	            this.match(GQLParser.VERTICAL_BAR);
	            this.state = 2699;
	            this.simplifiedTerm();
	            this.state = 2704;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedMultisetAlternation() {
	    let localctx = new SimplifiedMultisetAlternationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 494, GQLParser.RULE_simplifiedMultisetAlternation);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2705;
	        this.simplifiedTerm();
	        this.state = 2710;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===58) {
	            this.state = 2706;
	            this.match(GQLParser.MULTISET_ALTERNATION);
	            this.state = 2707;
	            this.simplifiedTerm();
	            this.state = 2712;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedTerm() {
	    let localctx = new SimplifiedTermContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 496, GQLParser.RULE_simplifiedTerm);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2713;
	        this.simplifiedFactorLow();
	        this.state = 2717;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===2 || _la===27 || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 532611) !== 0) || ((((_la - 386)) & ~0x1f) === 0 && ((1 << (_la - 386)) & 1027) !== 0)) {
	            this.state = 2714;
	            this.simplifiedFactorLow();
	            this.state = 2719;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedFactorLow() {
	    let localctx = new SimplifiedFactorLowContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 498, GQLParser.RULE_simplifiedFactorLow);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2720;
	        this.simplifiedFactorHigh();
	        this.state = 2725;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===29) {
	            this.state = 2721;
	            this.match(GQLParser.AMPERSAND);
	            this.state = 2722;
	            this.simplifiedFactorHigh();
	            this.state = 2727;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedFactorHigh() {
	    let localctx = new SimplifiedFactorHighContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 500, GQLParser.RULE_simplifiedFactorHigh);
	    try {
	        this.state = 2731;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,208,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2728;
	            this.simplifiedTertiary();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2729;
	            this.simplifiedQuntified();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2730;
	            this.simplifiedQuestioned();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedQuntified() {
	    let localctx = new SimplifiedQuntifiedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 502, GQLParser.RULE_simplifiedQuntified);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2733;
	        this.simplifiedTertiary();
	        this.state = 2734;
	        this.graphPatternQuantifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedQuestioned() {
	    let localctx = new SimplifiedQuestionedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 504, GQLParser.RULE_simplifiedQuestioned);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2736;
	        this.simplifiedTertiary();
	        this.state = 2737;
	        this.match(GQLParser.QUESTION_MARK);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedTertiary() {
	    let localctx = new SimplifiedTertiaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 506, GQLParser.RULE_simplifiedTertiary);
	    try {
	        this.state = 2741;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,209,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2739;
	            this.simplifiedDirectionOverride();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2740;
	            this.simplifiedSecondary();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedDirectionOverride() {
	    let localctx = new SimplifiedDirectionOverrideContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 508, GQLParser.RULE_simplifiedDirectionOverride);
	    try {
	        this.state = 2750;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,210,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2743;
	            this.simplifiedOverrideLeft();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2744;
	            this.simplifiedOverrideUndirected();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2745;
	            this.simplifiedOverrideRight();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2746;
	            this.simplifiedOverrideLeftOrUndirected();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2747;
	            this.simplifiedOverrideUndirectedOrRight();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2748;
	            this.simplifiedOverrideLeftOrRight();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 2749;
	            this.simplifiedOverrideAnyDirection();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedOverrideLeft() {
	    let localctx = new SimplifiedOverrideLeftContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 510, GQLParser.RULE_simplifiedOverrideLeft);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2752;
	        this.match(GQLParser.LEFT_ANGLE_BRACKET);
	        this.state = 2753;
	        this.simplifiedSecondary();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedOverrideUndirected() {
	    let localctx = new SimplifiedOverrideUndirectedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 512, GQLParser.RULE_simplifiedOverrideUndirected);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2755;
	        this.match(GQLParser.TILDE);
	        this.state = 2756;
	        this.simplifiedSecondary();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedOverrideRight() {
	    let localctx = new SimplifiedOverrideRightContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 514, GQLParser.RULE_simplifiedOverrideRight);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2758;
	        this.simplifiedSecondary();
	        this.state = 2759;
	        this.match(GQLParser.RIGHT_ANGLE_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedOverrideLeftOrUndirected() {
	    let localctx = new SimplifiedOverrideLeftOrUndirectedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 516, GQLParser.RULE_simplifiedOverrideLeftOrUndirected);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2761;
	        this.match(GQLParser.LEFT_ARROW_TILDE);
	        this.state = 2762;
	        this.simplifiedSecondary();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedOverrideUndirectedOrRight() {
	    let localctx = new SimplifiedOverrideUndirectedOrRightContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 518, GQLParser.RULE_simplifiedOverrideUndirectedOrRight);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2764;
	        this.match(GQLParser.TILDE);
	        this.state = 2765;
	        this.simplifiedSecondary();
	        this.state = 2766;
	        this.match(GQLParser.RIGHT_ANGLE_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedOverrideLeftOrRight() {
	    let localctx = new SimplifiedOverrideLeftOrRightContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 520, GQLParser.RULE_simplifiedOverrideLeftOrRight);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2768;
	        this.match(GQLParser.LEFT_ANGLE_BRACKET);
	        this.state = 2769;
	        this.simplifiedSecondary();
	        this.state = 2770;
	        this.match(GQLParser.RIGHT_ANGLE_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedOverrideAnyDirection() {
	    let localctx = new SimplifiedOverrideAnyDirectionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 522, GQLParser.RULE_simplifiedOverrideAnyDirection);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2772;
	        this.match(GQLParser.MINUS);
	        this.state = 2773;
	        this.simplifiedSecondary();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedSecondary() {
	    let localctx = new SimplifiedSecondaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 524, GQLParser.RULE_simplifiedSecondary);
	    try {
	        this.state = 2777;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 44:
	        case 56:
	        case 386:
	        case 387:
	        case 396:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2775;
	            this.simplifiedPrimary();
	            break;
	        case 37:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2776;
	            this.simplifiedNegation();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedNegation() {
	    let localctx = new SimplifiedNegationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 526, GQLParser.RULE_simplifiedNegation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2779;
	        this.match(GQLParser.EXCLAMATION);
	        this.state = 2780;
	        this.simplifiedPrimary();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedPrimary() {
	    let localctx = new SimplifiedPrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 528, GQLParser.RULE_simplifiedPrimary);
	    try {
	        this.state = 2787;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 56:
	        case 386:
	        case 387:
	        case 396:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2782;
	            this.labelName();
	            break;
	        case 44:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2783;
	            this.match(GQLParser.LEFT_PAREN);
	            this.state = 2784;
	            this.simplifiedContents();
	            this.state = 2785;
	            this.match(GQLParser.RIGHT_PAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	whereClause() {
	    let localctx = new WhereClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 530, GQLParser.RULE_whereClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2789;
	        this.match(GQLParser.WHERE);
	        this.state = 2790;
	        this.searchCondition();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	yieldClause() {
	    let localctx = new YieldClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 532, GQLParser.RULE_yieldClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2792;
	        this.match(GQLParser.YIELD);
	        this.state = 2793;
	        this.yieldItemList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	yieldItemList() {
	    let localctx = new YieldItemListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 534, GQLParser.RULE_yieldItemList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2795;
	        this.yieldItem();
	        this.state = 2798; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 2796;
	            this.match(GQLParser.COMMA);
	            this.state = 2797;
	            this.yieldItem();
	            this.state = 2800; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===34);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	yieldItem() {
	    let localctx = new YieldItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 536, GQLParser.RULE_yieldItem);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2802;
	        this.yieldItemName();
	        this.state = 2804;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===67) {
	            this.state = 2803;
	            this.yieldItemAlias();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	yieldItemName() {
	    let localctx = new YieldItemNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 538, GQLParser.RULE_yieldItemName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2806;
	        this.fieldName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	yieldItemAlias() {
	    let localctx = new YieldItemAliasContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 540, GQLParser.RULE_yieldItemAlias);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2808;
	        this.match(GQLParser.AS);
	        this.state = 2809;
	        this.bindingVar();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	groupByClause() {
	    let localctx = new GroupByClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 542, GQLParser.RULE_groupByClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2811;
	        this.match(GQLParser.GROUP);
	        this.state = 2812;
	        this.match(GQLParser.BY);
	        this.state = 2813;
	        this.groupingElementList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	groupingElementList() {
	    let localctx = new GroupingElementListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 544, GQLParser.RULE_groupingElementList);
	    try {
	        this.state = 2823;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 396:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2815;
	            this.groupingElement();
	            this.state = 2818; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 2816;
	            		this.match(GQLParser.COMMA);
	            		this.state = 2817;
	            		this.groupingElement();
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 2820; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,215, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            break;
	        case 44:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2822;
	            this.emptyGroupingSet();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	groupingElement() {
	    let localctx = new GroupingElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 546, GQLParser.RULE_groupingElement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2825;
	        this.bindingVarRef();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	emptyGroupingSet() {
	    let localctx = new EmptyGroupingSetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 548, GQLParser.RULE_emptyGroupingSet);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2827;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 2828;
	        this.match(GQLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	orderByClause() {
	    let localctx = new OrderByClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 550, GQLParser.RULE_orderByClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2830;
	        this.match(GQLParser.ORDER);
	        this.state = 2831;
	        this.match(GQLParser.BY);
	        this.state = 2832;
	        this.sortSpecList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	aggregateFunction() {
	    let localctx = new AggregateFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 552, GQLParser.RULE_aggregateFunction);
	    try {
	        this.state = 2840;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,217,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2834;
	            this.match(GQLParser.COUNT);
	            this.state = 2835;
	            this.match(GQLParser.LEFT_PAREN);
	            this.state = 2836;
	            this.match(GQLParser.ASTERISK);
	            this.state = 2837;
	            this.match(GQLParser.RIGHT_PAREN);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2838;
	            this.generalSetFunction();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2839;
	            this.binarySetFunction();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	generalSetFunction() {
	    let localctx = new GeneralSetFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 554, GQLParser.RULE_generalSetFunction);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2842;
	        this.generalSetFunctionType();
	        this.state = 2843;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 2845;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===62 || _la===119) {
	            this.state = 2844;
	            this.setQuantifier();
	        }

	        this.state = 2847;
	        this.valueExpr();
	        this.state = 2848;
	        this.match(GQLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	generalSetFunctionType() {
	    let localctx = new GeneralSetFunctionTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 556, GQLParser.RULE_generalSetFunctionType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2850;
	        _la = this._input.LA(1);
	        if(!(((((_la - 73)) & ~0x1f) === 0 && ((1 << (_la - 73)) & 136314881) !== 0) || _la===183 || _la===184 || ((((_la - 236)) & ~0x1f) === 0 && ((1 << (_la - 236)) & 11) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setQuantifier() {
	    let localctx = new SetQuantifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 558, GQLParser.RULE_setQuantifier);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2852;
	        _la = this._input.LA(1);
	        if(!(_la===62 || _la===119)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	binarySetFunction() {
	    let localctx = new BinarySetFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 560, GQLParser.RULE_binarySetFunction);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2854;
	        _la = this._input.LA(1);
	        if(!(_la===208 || _la===209)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dependantValueExpr() {
	    let localctx = new DependantValueExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 562, GQLParser.RULE_dependantValueExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2857;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===62 || _la===119) {
	            this.state = 2856;
	            this.setQuantifier();
	        }

	        this.state = 2859;
	        this.numericValueExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	independentValueExpr() {
	    let localctx = new IndependentValueExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 564, GQLParser.RULE_independentValueExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2861;
	        this.numericValueExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sortSpecList() {
	    let localctx = new SortSpecListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 566, GQLParser.RULE_sortSpecList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2863;
	        this.sortSpec();
	        this.state = 2866; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 2864;
	        		this.match(GQLParser.COMMA);
	        		this.state = 2865;
	        		this.sortSpec();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 2868; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,220, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sortSpec() {
	    let localctx = new SortSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 568, GQLParser.RULE_sortSpec);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2870;
	        this.sortKey();
	        this.state = 2872;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,221,this._ctx);
	        if(la_===1) {
	            this.state = 2871;
	            this.orderingSpec();

	        }
	        this.state = 2875;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,222,this._ctx);
	        if(la_===1) {
	            this.state = 2874;
	            this.nullOrdering();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sortKey() {
	    let localctx = new SortKeyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 570, GQLParser.RULE_sortKey);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2877;
	        this.aggregatingValueExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	orderingSpec() {
	    let localctx = new OrderingSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 572, GQLParser.RULE_orderingSpec);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2879;
	        _la = this._input.LA(1);
	        if(!(_la===68 || _la===69 || _la===116 || _la===117)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nullOrdering() {
	    let localctx = new NullOrderingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 574, GQLParser.RULE_nullOrdering);
	    try {
	        this.state = 2885;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,223,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2881;
	            this.match(GQLParser.NULLS);
	            this.state = 2882;
	            this.match(GQLParser.FIRST);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2883;
	            this.match(GQLParser.NULLS);
	            this.state = 2884;
	            this.match(GQLParser.LAST);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	limitClause() {
	    let localctx = new LimitClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 576, GQLParser.RULE_limitClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2887;
	        this.match(GQLParser.LIMIT);
	        this.state = 2888;
	        this.unsignedIntSpec();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	offsetClause() {
	    let localctx = new OffsetClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 578, GQLParser.RULE_offsetClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2890;
	        this.offsetSynonym();
	        this.state = 2891;
	        this.unsignedIntSpec();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	offsetSynonym() {
	    let localctx = new OffsetSynonymContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 580, GQLParser.RULE_offsetSynonym);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2893;
	        _la = this._input.LA(1);
	        if(!(_la===197 || _la===231)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphTypeSpec() {
	    let localctx = new GraphTypeSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 582, GQLParser.RULE_graphTypeSpec);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2896;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===339) {
	            this.state = 2895;
	            this.match(GQLParser.PROPERTY);
	        }

	        this.state = 2898;
	        this.match(GQLParser.GRAPH);
	        this.state = 2899;
	        this.match(GQLParser.TYPE);
	        this.state = 2900;
	        this.nestedGraphTypeSpec();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nestedGraphTypeSpec() {
	    let localctx = new NestedGraphTypeSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 584, GQLParser.RULE_nestedGraphTypeSpec);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2902;
	        this.match(GQLParser.LEFT_BRACE);
	        this.state = 2903;
	        this.graphTypeSpecBody();
	        this.state = 2904;
	        this.match(GQLParser.RIGHT_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphTypeSpecBody() {
	    let localctx = new GraphTypeSpecBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 586, GQLParser.RULE_graphTypeSpecBody);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2906;
	        this.elementTypeDefList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementTypeDefList() {
	    let localctx = new ElementTypeDefListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 588, GQLParser.RULE_elementTypeDefList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2908;
	        this.elementTypeDef();
	        this.state = 2913;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===34) {
	            this.state = 2909;
	            this.match(GQLParser.COMMA);
	            this.state = 2910;
	            this.elementTypeDef();
	            this.state = 2915;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementTypeDef() {
	    let localctx = new ElementTypeDefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 590, GQLParser.RULE_elementTypeDef);
	    try {
	        this.state = 2918;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,226,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2916;
	            this.nodeTypeDef();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2917;
	            this.edgeTypeDef();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nodeTypeDef() {
	    let localctx = new NodeTypeDefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 592, GQLParser.RULE_nodeTypeDef);
	    try {
	        this.state = 2924;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 44:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2920;
	            this.nodeTypePattern();
	            break;
	        case 335:
	        case 355:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2921;
	            this.nodeSynonym();
	            this.state = 2922;
	            this.nodeTypePhrase();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nodeTypePattern() {
	    let localctx = new NodeTypePatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 594, GQLParser.RULE_nodeTypePattern);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2926;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 2927;
	        this.nodeTypeName();
	        this.state = 2928;
	        this.nodeTypeFiller();
	        this.state = 2929;
	        this.match(GQLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nodeTypePhrase() {
	    let localctx = new NodeTypePhraseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 596, GQLParser.RULE_nodeTypePhrase);
	    var _la = 0;
	    try {
	        this.state = 2939;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 56:
	        case 353:
	        case 386:
	        case 387:
	        case 396:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2932;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===353) {
	                this.state = 2931;
	                this.match(GQLParser.TYPE);
	            }

	            this.state = 2934;
	            this.nodeTypeName();
	            this.state = 2936;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===32 || _la===40 || _la===167 || _la===326 || _la===328) {
	                this.state = 2935;
	                this.nodeTypeFiller();
	            }

	            break;
	        case 32:
	        case 40:
	        case 167:
	        case 326:
	        case 328:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2938;
	            this.nodeTypeFiller();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nodeTypeName() {
	    let localctx = new NodeTypeNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 598, GQLParser.RULE_nodeTypeName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2941;
	        this.elementTypeName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nodeTypeFiller() {
	    let localctx = new NodeTypeFillerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 600, GQLParser.RULE_nodeTypeFiller);
	    try {
	        this.state = 2948;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,231,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2943;
	            this.nodeTypeLabelSetDef();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2944;
	            this.nodeTypePropertyTypeSetDef();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2945;
	            this.nodeTypeLabelSetDef();
	            this.state = 2946;
	            this.nodeTypePropertyTypeSetDef();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nodeTypeLabelSetDef() {
	    let localctx = new NodeTypeLabelSetDefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 602, GQLParser.RULE_nodeTypeLabelSetDef);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2950;
	        this.labelSetDef();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nodeTypePropertyTypeSetDef() {
	    let localctx = new NodeTypePropertyTypeSetDefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 604, GQLParser.RULE_nodeTypePropertyTypeSetDef);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2952;
	        this.propertyTypeSetDef();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	edgeTypeDef() {
	    let localctx = new EdgeTypeDefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 606, GQLParser.RULE_edgeTypeDef);
	    var _la = 0;
	    try {
	        this.state = 2961;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 44:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2954;
	            this.edgeTypePattern();
	            break;
	        case 317:
	        case 318:
	        case 341:
	        case 354:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2956;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===317 || _la===354) {
	                this.state = 2955;
	                this.edgeKind();
	            }

	            this.state = 2958;
	            this.edgeSynonym();
	            this.state = 2959;
	            this.edgeTypePhrase();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	edgeTypePattern() {
	    let localctx = new EdgeTypePatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 608, GQLParser.RULE_edgeTypePattern);
	    try {
	        this.state = 2965;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,234,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2963;
	            this.fullEdgeTypePattern();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2964;
	            this.abbreviatedEdgeTypePattern();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	edgeTypePhrase() {
	    let localctx = new EdgeTypePhraseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 610, GQLParser.RULE_edgeTypePhrase);
	    var _la = 0;
	    try {
	        this.state = 2977;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 56:
	        case 353:
	        case 386:
	        case 387:
	        case 396:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2968;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===353) {
	                this.state = 2967;
	                this.match(GQLParser.TYPE);
	            }

	            this.state = 2970;
	            this.edgeTypeName();

	            this.state = 2971;
	            this.edgeTypeFiller();
	            this.state = 2972;
	            this.endpointDef();
	            break;
	        case 32:
	        case 40:
	        case 167:
	        case 326:
	        case 328:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2974;
	            this.edgeTypeFiller();
	            this.state = 2975;
	            this.endpointDef();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	edgeTypeName() {
	    let localctx = new EdgeTypeNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 612, GQLParser.RULE_edgeTypeName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2979;
	        this.elementTypeName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	edgeTypeFiller() {
	    let localctx = new EdgeTypeFillerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 614, GQLParser.RULE_edgeTypeFiller);
	    try {
	        this.state = 2986;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,237,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2981;
	            this.edgeTypeLabelSetDef();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2982;
	            this.edgeTypePropertyTypeSetDef();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2983;
	            this.edgeTypeLabelSetDef();
	            this.state = 2984;
	            this.edgeTypePropertyTypeSetDef();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	edgeTypeLabelSetDef() {
	    let localctx = new EdgeTypeLabelSetDefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 616, GQLParser.RULE_edgeTypeLabelSetDef);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2988;
	        this.labelSetDef();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	edgeTypePropertyTypeSetDef() {
	    let localctx = new EdgeTypePropertyTypeSetDefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 618, GQLParser.RULE_edgeTypePropertyTypeSetDef);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2990;
	        this.propertyTypeSetDef();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fullEdgeTypePattern() {
	    let localctx = new FullEdgeTypePatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 620, GQLParser.RULE_fullEdgeTypePattern);
	    try {
	        this.state = 2995;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,238,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2992;
	            this.fullEdgeTypePatternPointingRight();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2993;
	            this.fullEdgeTypePatternPointingLeft();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2994;
	            this.fullEdgeTypePatternUndirected();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fullEdgeTypePatternPointingRight() {
	    let localctx = new FullEdgeTypePatternPointingRightContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 622, GQLParser.RULE_fullEdgeTypePatternPointingRight);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2997;
	        this.sourceNodeTypeRef();
	        this.state = 2998;
	        this.arcTypePointingRight();
	        this.state = 2999;
	        this.destinationNodeTypeRef();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fullEdgeTypePatternPointingLeft() {
	    let localctx = new FullEdgeTypePatternPointingLeftContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 624, GQLParser.RULE_fullEdgeTypePatternPointingLeft);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3001;
	        this.destinationNodeTypeRef();
	        this.state = 3002;
	        this.arcTypePointingLeft();
	        this.state = 3003;
	        this.sourceNodeTypeRef();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fullEdgeTypePatternUndirected() {
	    let localctx = new FullEdgeTypePatternUndirectedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 626, GQLParser.RULE_fullEdgeTypePatternUndirected);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3005;
	        this.sourceNodeTypeRef();
	        this.state = 3006;
	        this.arcTypeUndirected();
	        this.state = 3007;
	        this.destinationNodeTypeRef();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arcTypePointingRight() {
	    let localctx = new ArcTypePointingRightContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 628, GQLParser.RULE_arcTypePointingRight);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3009;
	        this.match(GQLParser.MINUS_LEFT_BRACKET);
	        this.state = 3010;
	        this.arcTypeFiller();
	        this.state = 3011;
	        this.match(GQLParser.BRACKET_RIGHT_ARROW);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arcTypePointingLeft() {
	    let localctx = new ArcTypePointingLeftContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 630, GQLParser.RULE_arcTypePointingLeft);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3013;
	        this.match(GQLParser.LEFT_ARROW_BRACKET);
	        this.state = 3014;
	        this.arcTypeFiller();
	        this.state = 3015;
	        this.match(GQLParser.RIGHT_BRACKET_MINUS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arcTypeUndirected() {
	    let localctx = new ArcTypeUndirectedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 632, GQLParser.RULE_arcTypeUndirected);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3017;
	        this.match(GQLParser.TILDE_LEFT_BRACKET);
	        this.state = 3018;
	        this.arcTypeFiller();
	        this.state = 3019;
	        this.match(GQLParser.RIGHT_BRACKET_TILDE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arcTypeFiller() {
	    let localctx = new ArcTypeFillerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 634, GQLParser.RULE_arcTypeFiller);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3021;
	        this.edgeTypeName();
	        this.state = 3022;
	        this.edgeTypeFiller();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	abbreviatedEdgeTypePattern() {
	    let localctx = new AbbreviatedEdgeTypePatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 636, GQLParser.RULE_abbreviatedEdgeTypePattern);
	    try {
	        this.state = 3027;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,239,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3024;
	            this.abbreviatedEdgeTypePatternPointingRight();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3025;
	            this.abbreviatedEdgeTypePatternPointingLeft();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3026;
	            this.abbreviatedEdgeTypePatternUndirected();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	abbreviatedEdgeTypePatternPointingRight() {
	    let localctx = new AbbreviatedEdgeTypePatternPointingRightContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 638, GQLParser.RULE_abbreviatedEdgeTypePatternPointingRight);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3029;
	        this.sourceNodeTypeRef();
	        this.state = 3030;
	        this.match(GQLParser.RIGHT_ARROW);
	        this.state = 3031;
	        this.destinationNodeTypeRef();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	abbreviatedEdgeTypePatternPointingLeft() {
	    let localctx = new AbbreviatedEdgeTypePatternPointingLeftContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 640, GQLParser.RULE_abbreviatedEdgeTypePatternPointingLeft);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3033;
	        this.destinationNodeTypeRef();
	        this.state = 3034;
	        this.match(GQLParser.LEFT_ARROW);
	        this.state = 3035;
	        this.sourceNodeTypeRef();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	abbreviatedEdgeTypePatternUndirected() {
	    let localctx = new AbbreviatedEdgeTypePatternUndirectedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 642, GQLParser.RULE_abbreviatedEdgeTypePatternUndirected);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3037;
	        this.sourceNodeTypeRef();
	        this.state = 3038;
	        this.match(GQLParser.TILDE);
	        this.state = 3039;
	        this.destinationNodeTypeRef();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nodeTypeRef() {
	    let localctx = new NodeTypeRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 644, GQLParser.RULE_nodeTypeRef);
	    try {
	        this.state = 3043;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,240,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3041;
	            this.sourceNodeTypeRef();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3042;
	            this.destinationNodeTypeRef();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sourceNodeTypeRef() {
	    let localctx = new SourceNodeTypeRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 646, GQLParser.RULE_sourceNodeTypeRef);
	    var _la = 0;
	    try {
	        this.state = 3054;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,242,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3045;
	            this.match(GQLParser.LEFT_PAREN);
	            this.state = 3046;
	            this.sourceNodeTypeName();
	            this.state = 3047;
	            this.match(GQLParser.RIGHT_PAREN);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3049;
	            this.match(GQLParser.LEFT_PAREN);
	            this.state = 3051;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===32 || _la===40 || _la===167 || _la===326 || _la===328) {
	                this.state = 3050;
	                this.nodeTypeFiller();
	            }

	            this.state = 3053;
	            this.match(GQLParser.RIGHT_PAREN);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	destinationNodeTypeRef() {
	    let localctx = new DestinationNodeTypeRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 648, GQLParser.RULE_destinationNodeTypeRef);
	    var _la = 0;
	    try {
	        this.state = 3065;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,244,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3056;
	            this.match(GQLParser.LEFT_PAREN);
	            this.state = 3057;
	            this.destinationNodeTypeName();
	            this.state = 3058;
	            this.match(GQLParser.RIGHT_PAREN);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3060;
	            this.match(GQLParser.LEFT_PAREN);
	            this.state = 3062;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===32 || _la===40 || _la===167 || _la===326 || _la===328) {
	                this.state = 3061;
	                this.nodeTypeFiller();
	            }

	            this.state = 3064;
	            this.match(GQLParser.RIGHT_PAREN);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	edgeKind() {
	    let localctx = new EdgeKindContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 650, GQLParser.RULE_edgeKind);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3067;
	        _la = this._input.LA(1);
	        if(!(_la===317 || _la===354)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	endpointDef() {
	    let localctx = new EndpointDefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 652, GQLParser.RULE_endpointDef);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3069;
	        this.match(GQLParser.CONNECTING);
	        this.state = 3070;
	        this.enpointPairDef();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enpointPairDef() {
	    let localctx = new EnpointPairDefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 654, GQLParser.RULE_enpointPairDef);
	    try {
	        this.state = 3076;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,245,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3072;
	            this.endpointPairDefPointingRight();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3073;
	            this.endpointPairDefPointingLeft();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3074;
	            this.endpointPairDefUndirected();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3075;
	            this.abbreviatedEdgeTypePattern();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	endpointPairDefPointingRight() {
	    let localctx = new EndpointPairDefPointingRightContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 656, GQLParser.RULE_endpointPairDefPointingRight);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3078;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 3079;
	        this.sourceNodeTypeName();
	        this.state = 3080;
	        this.connectorPointingRight();
	        this.state = 3081;
	        this.destinationNodeTypeName();
	        this.state = 3082;
	        this.match(GQLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	endpointPairDefPointingLeft() {
	    let localctx = new EndpointPairDefPointingLeftContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 658, GQLParser.RULE_endpointPairDefPointingLeft);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3084;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 3085;
	        this.destinationNodeTypeName();
	        this.state = 3086;
	        this.connectorPointingLeft();
	        this.state = 3087;
	        this.sourceNodeTypeName();
	        this.state = 3088;
	        this.match(GQLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	endpointPairDefUndirected() {
	    let localctx = new EndpointPairDefUndirectedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 660, GQLParser.RULE_endpointPairDefUndirected);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3090;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 3091;
	        this.sourceNodeTypeName();
	        this.state = 3092;
	        this.connectorUndirected();
	        this.state = 3093;
	        this.destinationNodeTypeName();
	        this.state = 3094;
	        this.match(GQLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	connectorPointingRight() {
	    let localctx = new ConnectorPointingRightContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 662, GQLParser.RULE_connectorPointingRight);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3096;
	        _la = this._input.LA(1);
	        if(!(_la===10 || _la===350)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	connectorPointingLeft() {
	    let localctx = new ConnectorPointingLeftContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 664, GQLParser.RULE_connectorPointingLeft);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3098;
	        this.match(GQLParser.LEFT_ARROW);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	connectorUndirected() {
	    let localctx = new ConnectorUndirectedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 666, GQLParser.RULE_connectorUndirected);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3100;
	        _la = this._input.LA(1);
	        if(!(_la===50 || _la===350)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sourceNodeTypeName() {
	    let localctx = new SourceNodeTypeNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 668, GQLParser.RULE_sourceNodeTypeName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3102;
	        this.elementTypeName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	destinationNodeTypeName() {
	    let localctx = new DestinationNodeTypeNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 670, GQLParser.RULE_destinationNodeTypeName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3104;
	        this.elementTypeName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	labelSetDef() {
	    let localctx = new LabelSetDefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 672, GQLParser.RULE_labelSetDef);
	    try {
	        this.state = 3114;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 326:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3106;
	            this.match(GQLParser.LABEL);
	            this.state = 3107;
	            this.labelName();
	            break;
	        case 328:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3108;
	            this.match(GQLParser.LABELS);
	            this.state = 3109;
	            this.labelSetSpec();
	            break;
	        case 167:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3110;
	            this.match(GQLParser.IS);
	            this.state = 3111;
	            this.labelSetSpec();
	            break;
	        case 32:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3112;
	            this.match(GQLParser.COLON);
	            this.state = 3113;
	            this.labelSetSpec();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertyTypeSetDef() {
	    let localctx = new PropertyTypeSetDefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 674, GQLParser.RULE_propertyTypeSetDef);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3116;
	        this.match(GQLParser.LEFT_BRACE);
	        this.state = 3118;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===56 || ((((_la - 386)) & ~0x1f) === 0 && ((1 << (_la - 386)) & 1027) !== 0)) {
	            this.state = 3117;
	            this.propertyTypeDefList();
	        }

	        this.state = 3120;
	        this.match(GQLParser.RIGHT_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertyTypeDefList() {
	    let localctx = new PropertyTypeDefListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 676, GQLParser.RULE_propertyTypeDefList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3122;
	        this.propertyTypeDef();
	        this.state = 3127;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===34) {
	            this.state = 3123;
	            this.match(GQLParser.COMMA);
	            this.state = 3124;
	            this.propertyTypeDef();
	            this.state = 3129;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertyTypeDef() {
	    let localctx = new PropertyTypeDefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 678, GQLParser.RULE_propertyTypeDef);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3130;
	        this.propertyName();
	        this.state = 3132;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===33 || _la===248) {
	            this.state = 3131;
	            this.typed();
	        }

	        this.state = 3134;
	        this.propertyValueType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertyValueType() {
	    let localctx = new PropertyValueTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 680, GQLParser.RULE_propertyValueType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3136;
	        this.valueType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bindingTableType() {
	    let localctx = new BindingTableTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 682, GQLParser.RULE_bindingTableType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3139;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===312) {
	            this.state = 3138;
	            this.match(GQLParser.BINDING);
	        }

	        this.state = 3141;
	        this.match(GQLParser.TABLE);
	        this.state = 3142;
	        this.fieldTypesSpec();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	valueType() {
	    let localctx = new ValueTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 684, GQLParser.RULE_valueType);
	    try {
	        this.state = 3147;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,251,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3144;
	            this.predefinedType();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3145;
	            this.constructedType();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3146;
	            this.dynamicUnionType();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typed() {
	    let localctx = new TypedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 686, GQLParser.RULE_typed);
	    try {
	        this.state = 3151;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 33:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3149;
	            this.match(GQLParser.DOUBLE_COLON);
	            break;
	        case 248:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3150;
	            this.match(GQLParser.TYPED);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	predefinedType() {
	    let localctx = new PredefinedTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 688, GQLParser.RULE_predefinedType);
	    try {
	        this.state = 3160;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 77:
	        case 78:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3153;
	            this.booleanType();
	            break;
	        case 238:
	        case 265:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3154;
	            this.charStringType();
	            break;
	        case 76:
	        case 83:
	        case 264:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3155;
	            this.byteStringType();
	            break;
	        case 74:
	        case 75:
	        case 112:
	        case 113:
	        case 120:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 214:
	        case 228:
	        case 232:
	        case 233:
	        case 249:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 255:
	        case 256:
	        case 259:
	        case 262:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3156;
	            this.numericType();
	            break;
	        case 109:
	        case 122:
	        case 174:
	        case 243:
	        case 244:
	        case 273:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3157;
	            this.temporalType();
	            break;
	        case 44:
	        case 198:
	        case 312:
	        case 317:
	        case 318:
	        case 323:
	        case 335:
	        case 339:
	        case 341:
	        case 347:
	        case 354:
	        case 355:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 3158;
	            this.refValueType();
	            break;
	        case 205:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 3159;
	            this.pathValueType();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	booleanType() {
	    let localctx = new BooleanTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 690, GQLParser.RULE_booleanType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3162;
	        _la = this._input.LA(1);
	        if(!(_la===77 || _la===78)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 3164;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,254,this._ctx);
	        if(la_===1) {
	            this.state = 3163;
	            this.notNull();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	charStringType() {
	    let localctx = new CharStringTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 692, GQLParser.RULE_charStringType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3166;
	        _la = this._input.LA(1);
	        if(!(_la===238 || _la===265)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 3171;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,255,this._ctx);
	        if(la_===1) {
	            this.state = 3167;
	            this.match(GQLParser.LEFT_PAREN);
	            this.state = 3168;
	            this.maxLength();
	            this.state = 3169;
	            this.match(GQLParser.RIGHT_PAREN);

	        }
	        this.state = 3174;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,256,this._ctx);
	        if(la_===1) {
	            this.state = 3173;
	            this.notNull();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	byteStringType() {
	    let localctx = new ByteStringTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 694, GQLParser.RULE_byteStringType);
	    var _la = 0;
	    try {
	        this.state = 3210;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 83:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3176;
	            this.match(GQLParser.BYTES);
	            this.state = 3185;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,258,this._ctx);
	            if(la_===1) {
	                this.state = 3177;
	                this.match(GQLParser.LEFT_PAREN);
	                this.state = 3178;
	                this.minLength();
	                this.state = 3180;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===34) {
	                    this.state = 3179;
	                    this.match(GQLParser.COMMA);
	                }

	                this.state = 3182;
	                this.maxLength();
	                this.state = 3183;
	                this.match(GQLParser.RIGHT_PAREN);

	            }
	            this.state = 3188;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,259,this._ctx);
	            if(la_===1) {
	                this.state = 3187;
	                this.notNull();

	            }
	            break;
	        case 76:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3190;
	            this.match(GQLParser.BINARY);
	            this.state = 3195;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,260,this._ctx);
	            if(la_===1) {
	                this.state = 3191;
	                this.match(GQLParser.LEFT_PAREN);
	                this.state = 3192;
	                this.fixedLength();
	                this.state = 3193;
	                this.match(GQLParser.RIGHT_PAREN);

	            }
	            this.state = 3198;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,261,this._ctx);
	            if(la_===1) {
	                this.state = 3197;
	                this.notNull();

	            }
	            break;
	        case 264:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3200;
	            this.match(GQLParser.VARBINARY);
	            this.state = 3205;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,262,this._ctx);
	            if(la_===1) {
	                this.state = 3201;
	                this.match(GQLParser.LEFT_PAREN);
	                this.state = 3202;
	                this.maxLength();
	                this.state = 3203;
	                this.match(GQLParser.RIGHT_PAREN);

	            }
	            this.state = 3208;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,263,this._ctx);
	            if(la_===1) {
	                this.state = 3207;
	                this.notNull();

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	minLength() {
	    let localctx = new MinLengthContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 696, GQLParser.RULE_minLength);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3212;
	        this.match(GQLParser.UNSIGNED_INT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	maxLength() {
	    let localctx = new MaxLengthContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 698, GQLParser.RULE_maxLength);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3214;
	        this.match(GQLParser.UNSIGNED_INT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fixedLength() {
	    let localctx = new FixedLengthContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 700, GQLParser.RULE_fixedLength);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3216;
	        this.match(GQLParser.UNSIGNED_INT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numericType() {
	    let localctx = new NumericTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 702, GQLParser.RULE_numericType);
	    try {
	        this.state = 3220;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 74:
	        case 75:
	        case 112:
	        case 113:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 228:
	        case 232:
	        case 233:
	        case 249:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 255:
	        case 256:
	        case 259:
	        case 262:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3218;
	            this.exactNumericType();
	            break;
	        case 120:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 214:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3219;
	            this.approximateNumericType();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exactNumericType() {
	    let localctx = new ExactNumericTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 704, GQLParser.RULE_exactNumericType);
	    try {
	        this.state = 3224;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 74:
	        case 75:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 228:
	        case 232:
	        case 233:
	        case 249:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 255:
	        case 256:
	        case 259:
	        case 262:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3222;
	            this.binaryExactNumericType();
	            break;
	        case 112:
	        case 113:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3223;
	            this.decimalExactNumericType();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	binaryExactNumericType() {
	    let localctx = new BinaryExactNumericTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 706, GQLParser.RULE_binaryExactNumericType);
	    try {
	        this.state = 3228;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 74:
	        case 75:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 228:
	        case 232:
	        case 233:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3226;
	            this.signedBinaryExactNumericType();
	            break;
	        case 249:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 255:
	        case 256:
	        case 259:
	        case 262:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3227;
	            this.unsignedBinaryExactNumericType();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	signedBinaryExactNumericType() {
	    let localctx = new SignedBinaryExactNumericTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 708, GQLParser.RULE_signedBinaryExactNumericType);
	    var _la = 0;
	    try {
	        this.state = 3276;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 153:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3230;
	            this.match(GQLParser.INT8);
	            this.state = 3232;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,268,this._ctx);
	            if(la_===1) {
	                this.state = 3231;
	                this.notNull();

	            }
	            break;
	        case 155:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3234;
	            this.match(GQLParser.INT16);
	            this.state = 3236;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,269,this._ctx);
	            if(la_===1) {
	                this.state = 3235;
	                this.notNull();

	            }
	            break;
	        case 157:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3238;
	            this.match(GQLParser.INT32);
	            this.state = 3240;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,270,this._ctx);
	            if(la_===1) {
	                this.state = 3239;
	                this.notNull();

	            }
	            break;
	        case 159:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3242;
	            this.match(GQLParser.INT64);
	            this.state = 3244;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,271,this._ctx);
	            if(la_===1) {
	                this.state = 3243;
	                this.notNull();

	            }
	            break;
	        case 161:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3246;
	            this.match(GQLParser.INT128);
	            this.state = 3248;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,272,this._ctx);
	            if(la_===1) {
	                this.state = 3247;
	                this.notNull();

	            }
	            break;
	        case 163:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 3250;
	            this.match(GQLParser.INT256);
	            this.state = 3252;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,273,this._ctx);
	            if(la_===1) {
	                this.state = 3251;
	                this.notNull();

	            }
	            break;
	        case 233:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 3254;
	            this.match(GQLParser.SMALLINT);
	            this.state = 3256;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,274,this._ctx);
	            if(la_===1) {
	                this.state = 3255;
	                this.notNull();

	            }
	            break;
	        case 151:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 3258;
	            this.match(GQLParser.INT);
	            this.state = 3263;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,275,this._ctx);
	            if(la_===1) {
	                this.state = 3259;
	                this.match(GQLParser.LEFT_PAREN);
	                this.state = 3260;
	                this.precision();
	                this.state = 3261;
	                this.match(GQLParser.RIGHT_PAREN);

	            }
	            this.state = 3266;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,276,this._ctx);
	            if(la_===1) {
	                this.state = 3265;
	                this.notNull();

	            }
	            break;
	        case 75:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 3268;
	            this.match(GQLParser.BIGINT);
	            this.state = 3270;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,277,this._ctx);
	            if(la_===1) {
	                this.state = 3269;
	                this.notNull();

	            }
	            break;
	        case 74:
	        case 152:
	        case 154:
	        case 156:
	        case 158:
	        case 160:
	        case 162:
	        case 164:
	        case 228:
	        case 232:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 3273;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===228) {
	                this.state = 3272;
	                this.match(GQLParser.SIGNED);
	            }

	            this.state = 3275;
	            this.verboseBinaryExactNumericType();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unsignedBinaryExactNumericType() {
	    let localctx = new UnsignedBinaryExactNumericTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 710, GQLParser.RULE_unsignedBinaryExactNumericType);
	    try {
	        this.state = 3322;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 251:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3278;
	            this.match(GQLParser.UINT8);
	            this.state = 3280;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,280,this._ctx);
	            if(la_===1) {
	                this.state = 3279;
	                this.notNull();

	            }
	            break;
	        case 252:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3282;
	            this.match(GQLParser.UINT16);
	            this.state = 3284;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,281,this._ctx);
	            if(la_===1) {
	                this.state = 3283;
	                this.notNull();

	            }
	            break;
	        case 253:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3286;
	            this.match(GQLParser.UINT32);
	            this.state = 3288;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,282,this._ctx);
	            if(la_===1) {
	                this.state = 3287;
	                this.notNull();

	            }
	            break;
	        case 254:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3290;
	            this.match(GQLParser.UINT64);
	            this.state = 3292;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,283,this._ctx);
	            if(la_===1) {
	                this.state = 3291;
	                this.notNull();

	            }
	            break;
	        case 255:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3294;
	            this.match(GQLParser.UINT128);
	            this.state = 3296;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,284,this._ctx);
	            if(la_===1) {
	                this.state = 3295;
	                this.notNull();

	            }
	            break;
	        case 256:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 3298;
	            this.match(GQLParser.UINT256);
	            this.state = 3300;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,285,this._ctx);
	            if(la_===1) {
	                this.state = 3299;
	                this.notNull();

	            }
	            break;
	        case 262:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 3302;
	            this.match(GQLParser.USMALLINT);
	            this.state = 3304;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,286,this._ctx);
	            if(la_===1) {
	                this.state = 3303;
	                this.notNull();

	            }
	            break;
	        case 250:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 3306;
	            this.match(GQLParser.UINT);
	            this.state = 3311;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,287,this._ctx);
	            if(la_===1) {
	                this.state = 3307;
	                this.match(GQLParser.LEFT_PAREN);
	                this.state = 3308;
	                this.precision();
	                this.state = 3309;
	                this.match(GQLParser.RIGHT_PAREN);

	            }
	            this.state = 3314;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,288,this._ctx);
	            if(la_===1) {
	                this.state = 3313;
	                this.notNull();

	            }
	            break;
	        case 249:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 3316;
	            this.match(GQLParser.UBIGINT);
	            this.state = 3318;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,289,this._ctx);
	            if(la_===1) {
	                this.state = 3317;
	                this.notNull();

	            }
	            break;
	        case 259:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 3320;
	            this.match(GQLParser.UNSIGNED);
	            this.state = 3321;
	            this.verboseBinaryExactNumericType();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	verboseBinaryExactNumericType() {
	    let localctx = new VerboseBinaryExactNumericTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 712, GQLParser.RULE_verboseBinaryExactNumericType);
	    try {
	        this.state = 3368;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 154:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3324;
	            this.match(GQLParser.INTEGER8);
	            this.state = 3326;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,291,this._ctx);
	            if(la_===1) {
	                this.state = 3325;
	                this.notNull();

	            }
	            break;
	        case 156:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3328;
	            this.match(GQLParser.INTEGER16);
	            this.state = 3330;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,292,this._ctx);
	            if(la_===1) {
	                this.state = 3329;
	                this.notNull();

	            }
	            break;
	        case 158:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3332;
	            this.match(GQLParser.INTEGER32);
	            this.state = 3334;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,293,this._ctx);
	            if(la_===1) {
	                this.state = 3333;
	                this.notNull();

	            }
	            break;
	        case 160:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3336;
	            this.match(GQLParser.INTEGER64);
	            this.state = 3338;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,294,this._ctx);
	            if(la_===1) {
	                this.state = 3337;
	                this.notNull();

	            }
	            break;
	        case 162:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3340;
	            this.match(GQLParser.INTEGER128);
	            this.state = 3342;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,295,this._ctx);
	            if(la_===1) {
	                this.state = 3341;
	                this.notNull();

	            }
	            break;
	        case 164:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 3344;
	            this.match(GQLParser.INTEGER256);
	            this.state = 3346;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,296,this._ctx);
	            if(la_===1) {
	                this.state = 3345;
	                this.notNull();

	            }
	            break;
	        case 232:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 3348;
	            this.match(GQLParser.SMALL);
	            this.state = 3349;
	            this.match(GQLParser.INTEGER);
	            this.state = 3351;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,297,this._ctx);
	            if(la_===1) {
	                this.state = 3350;
	                this.notNull();

	            }
	            break;
	        case 152:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 3353;
	            this.match(GQLParser.INTEGER);
	            this.state = 3358;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,298,this._ctx);
	            if(la_===1) {
	                this.state = 3354;
	                this.match(GQLParser.LEFT_PAREN);
	                this.state = 3355;
	                this.precision();
	                this.state = 3356;
	                this.match(GQLParser.RIGHT_PAREN);

	            }
	            this.state = 3361;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,299,this._ctx);
	            if(la_===1) {
	                this.state = 3360;
	                this.notNull();

	            }
	            break;
	        case 74:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 3363;
	            this.match(GQLParser.BIG);
	            this.state = 3364;
	            this.match(GQLParser.INTEGER);
	            this.state = 3366;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,300,this._ctx);
	            if(la_===1) {
	                this.state = 3365;
	                this.notNull();

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	decimalExactNumericType() {
	    let localctx = new DecimalExactNumericTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 714, GQLParser.RULE_decimalExactNumericType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3370;
	        _la = this._input.LA(1);
	        if(!(_la===112 || _la===113)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 3379;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,303,this._ctx);
	        if(la_===1) {
	            this.state = 3371;
	            this.match(GQLParser.LEFT_PAREN);
	            this.state = 3372;
	            this.precision();
	            this.state = 3373;
	            this.match(GQLParser.COMMA);
	            this.state = 3375;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===380) {
	                this.state = 3374;
	                this.scale();
	            }

	            this.state = 3377;
	            this.match(GQLParser.RIGHT_PAREN);

	        }
	        this.state = 3382;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,304,this._ctx);
	        if(la_===1) {
	            this.state = 3381;
	            this.notNull();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	precision() {
	    let localctx = new PrecisionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 716, GQLParser.RULE_precision);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3384;
	        this.match(GQLParser.UNSIGNED_DECIMAL_INT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	scale() {
	    let localctx = new ScaleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 718, GQLParser.RULE_scale);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3386;
	        this.match(GQLParser.UNSIGNED_DECIMAL_INT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	approximateNumericType() {
	    let localctx = new ApproximateNumericTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 720, GQLParser.RULE_approximateNumericType);
	    var _la = 0;
	    try {
	        this.state = 3431;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 134:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3388;
	            this.match(GQLParser.FLOAT16);
	            this.state = 3390;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,305,this._ctx);
	            if(la_===1) {
	                this.state = 3389;
	                this.notNull();

	            }
	            break;
	        case 135:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3392;
	            this.match(GQLParser.FLOAT32);
	            this.state = 3394;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,306,this._ctx);
	            if(la_===1) {
	                this.state = 3393;
	                this.notNull();

	            }
	            break;
	        case 136:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3396;
	            this.match(GQLParser.FLOAT64);
	            this.state = 3398;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,307,this._ctx);
	            if(la_===1) {
	                this.state = 3397;
	                this.notNull();

	            }
	            break;
	        case 137:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3400;
	            this.match(GQLParser.FLOAT128);
	            this.state = 3402;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,308,this._ctx);
	            if(la_===1) {
	                this.state = 3401;
	                this.notNull();

	            }
	            break;
	        case 138:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3404;
	            this.match(GQLParser.FLOAT256);
	            this.state = 3406;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,309,this._ctx);
	            if(la_===1) {
	                this.state = 3405;
	                this.notNull();

	            }
	            break;
	        case 133:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 3408;
	            this.match(GQLParser.FLOAT);
	            this.state = 3417;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,311,this._ctx);
	            if(la_===1) {
	                this.state = 3409;
	                this.match(GQLParser.LEFT_PAREN);
	                this.state = 3410;
	                this.precision();
	                this.state = 3411;
	                this.match(GQLParser.COMMA);
	                this.state = 3413;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===380) {
	                    this.state = 3412;
	                    this.scale();
	                }

	                this.state = 3415;
	                this.match(GQLParser.RIGHT_PAREN);

	            }
	            this.state = 3420;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,312,this._ctx);
	            if(la_===1) {
	                this.state = 3419;
	                this.notNull();

	            }
	            break;
	        case 214:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 3422;
	            this.match(GQLParser.REAL);
	            this.state = 3424;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,313,this._ctx);
	            if(la_===1) {
	                this.state = 3423;
	                this.notNull();

	            }
	            break;
	        case 120:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 3426;
	            this.match(GQLParser.DOUBLE);
	            this.state = 3428;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===211) {
	                this.state = 3427;
	                this.match(GQLParser.PRECISION);
	            }

	            this.state = 3430;
	            this.notNull();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	temporalType() {
	    let localctx = new TemporalTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 722, GQLParser.RULE_temporalType);
	    try {
	        this.state = 3435;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 109:
	        case 174:
	        case 243:
	        case 244:
	        case 273:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3433;
	            this.temporalInstantType();
	            break;
	        case 122:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3434;
	            this.temporalDurationType();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	temporalInstantType() {
	    let localctx = new TemporalInstantTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 724, GQLParser.RULE_temporalInstantType);
	    try {
	        this.state = 3442;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,317,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3437;
	            this.dateTimeType();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3438;
	            this.localDateTimeType();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3439;
	            this.dateType();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3440;
	            this.timeType();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3441;
	            this.localTimeType();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	temporalDurationType() {
	    let localctx = new TemporalDurationTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 726, GQLParser.RULE_temporalDurationType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3444;
	        this.durationType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dateTimeType() {
	    let localctx = new DateTimeTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 728, GQLParser.RULE_dateTimeType);
	    try {
	        this.state = 3457;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 273:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3446;
	            this.match(GQLParser.ZONED);
	            this.state = 3447;
	            this.match(GQLParser.DATETIME);
	            this.state = 3449;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,318,this._ctx);
	            if(la_===1) {
	                this.state = 3448;
	                this.notNull();

	            }
	            break;
	        case 244:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3451;
	            this.match(GQLParser.TIMESTAMP);
	            this.state = 3452;
	            this.match(GQLParser.WITH);
	            this.state = 3453;
	            this.match(GQLParser.TIMEZONE);
	            this.state = 3455;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,319,this._ctx);
	            if(la_===1) {
	                this.state = 3454;
	                this.notNull();

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	localDateTimeType() {
	    let localctx = new LocalDateTimeTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 730, GQLParser.RULE_localDateTimeType);
	    try {
	        this.state = 3471;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 174:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3459;
	            this.match(GQLParser.LOCAL);
	            this.state = 3460;
	            this.match(GQLParser.DATETIME);
	            this.state = 3462;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,321,this._ctx);
	            if(la_===1) {
	                this.state = 3461;
	                this.notNull();

	            }
	            break;
	        case 244:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3464;
	            this.match(GQLParser.TIMESTAMP);

	            this.state = 3465;
	            this.match(GQLParser.WITHOUT);
	            this.state = 3466;
	            this.match(GQLParser.TIMEZONE);
	            this.state = 3469;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,322,this._ctx);
	            if(la_===1) {
	                this.state = 3468;
	                this.notNull();

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dateType() {
	    let localctx = new DateTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 732, GQLParser.RULE_dateType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3473;
	        this.match(GQLParser.DATE);
	        this.state = 3475;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,324,this._ctx);
	        if(la_===1) {
	            this.state = 3474;
	            this.notNull();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	timeType() {
	    let localctx = new TimeTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 734, GQLParser.RULE_timeType);
	    try {
	        this.state = 3488;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 273:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3477;
	            this.match(GQLParser.ZONED);
	            this.state = 3478;
	            this.match(GQLParser.TIME);
	            this.state = 3480;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,325,this._ctx);
	            if(la_===1) {
	                this.state = 3479;
	                this.notNull();

	            }
	            break;
	        case 243:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3482;
	            this.match(GQLParser.TIME);
	            this.state = 3483;
	            this.match(GQLParser.WITH);
	            this.state = 3484;
	            this.match(GQLParser.TIMEZONE);
	            this.state = 3486;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,326,this._ctx);
	            if(la_===1) {
	                this.state = 3485;
	                this.notNull();

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	localTimeType() {
	    let localctx = new LocalTimeTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 736, GQLParser.RULE_localTimeType);
	    try {
	        this.state = 3501;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 174:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3490;
	            this.match(GQLParser.LOCAL);
	            this.state = 3491;
	            this.match(GQLParser.TIME);
	            this.state = 3493;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,328,this._ctx);
	            if(la_===1) {
	                this.state = 3492;
	                this.notNull();

	            }
	            break;
	        case 243:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3495;
	            this.match(GQLParser.TIME);
	            this.state = 3496;
	            this.match(GQLParser.WITHOUT);
	            this.state = 3497;
	            this.match(GQLParser.TIMEZONE);
	            this.state = 3499;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,329,this._ctx);
	            if(la_===1) {
	                this.state = 3498;
	                this.notNull();

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	durationType() {
	    let localctx = new DurationTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 738, GQLParser.RULE_durationType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3503;
	        this.match(GQLParser.DURATION);
	        this.state = 3505;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,331,this._ctx);
	        if(la_===1) {
	            this.state = 3504;
	            this.notNull();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	refValueType() {
	    let localctx = new RefValueTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 740, GQLParser.RULE_refValueType);
	    try {
	        this.state = 3511;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,332,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3507;
	            this.graphRefValueType();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3508;
	            this.bindingTableRefValueType();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3509;
	            this.nodeRefValueType();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3510;
	            this.edgeRefValueType();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphRefValueType() {
	    let localctx = new GraphRefValueTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 742, GQLParser.RULE_graphRefValueType);
	    try {
	        this.state = 3515;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 198:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3513;
	            this.openGraphRefValueType();
	            break;
	        case 323:
	        case 339:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3514;
	            this.closedGraphRefValueType();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	openGraphRefValueType() {
	    let localctx = new OpenGraphRefValueTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 744, GQLParser.RULE_openGraphRefValueType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3517;
	        this.match(GQLParser.OPEN);
	        this.state = 3519;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===339) {
	            this.state = 3518;
	            this.match(GQLParser.PROPERTY);
	        }

	        this.state = 3521;
	        this.match(GQLParser.GRAPH);
	        this.state = 3523;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,335,this._ctx);
	        if(la_===1) {
	            this.state = 3522;
	            this.notNull();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	closedGraphRefValueType() {
	    let localctx = new ClosedGraphRefValueTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 746, GQLParser.RULE_closedGraphRefValueType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3525;
	        this.graphTypeSpec();
	        this.state = 3527;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,336,this._ctx);
	        if(la_===1) {
	            this.state = 3526;
	            this.notNull();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bindingTableRefValueType() {
	    let localctx = new BindingTableRefValueTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 748, GQLParser.RULE_bindingTableRefValueType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3529;
	        this.bindingTableType();
	        this.state = 3531;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,337,this._ctx);
	        if(la_===1) {
	            this.state = 3530;
	            this.notNull();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nodeRefValueType() {
	    let localctx = new NodeRefValueTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 750, GQLParser.RULE_nodeRefValueType);
	    try {
	        this.state = 3535;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 198:
	        case 335:
	        case 355:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3533;
	            this.openNodeRefValueType();
	            break;
	        case 44:
	        case 317:
	        case 318:
	        case 341:
	        case 354:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3534;
	            this.closedNodeRefValueType();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	openNodeRefValueType() {
	    let localctx = new OpenNodeRefValueTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 752, GQLParser.RULE_openNodeRefValueType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3538;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===198) {
	            this.state = 3537;
	            this.match(GQLParser.OPEN);
	        }

	        this.state = 3540;
	        this.nodeSynonym();
	        this.state = 3542;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,340,this._ctx);
	        if(la_===1) {
	            this.state = 3541;
	            this.notNull();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	closedNodeRefValueType() {
	    let localctx = new ClosedNodeRefValueTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 754, GQLParser.RULE_closedNodeRefValueType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3544;
	        this.edgeTypeDef();
	        this.state = 3546;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,341,this._ctx);
	        if(la_===1) {
	            this.state = 3545;
	            this.notNull();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	edgeRefValueType() {
	    let localctx = new EdgeRefValueTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 756, GQLParser.RULE_edgeRefValueType);
	    try {
	        this.state = 3550;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,342,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3548;
	            this.openEdgeRefValueType();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3549;
	            this.closedEdgeRefValueType();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	openEdgeRefValueType() {
	    let localctx = new OpenEdgeRefValueTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 758, GQLParser.RULE_openEdgeRefValueType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3553;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===198) {
	            this.state = 3552;
	            this.match(GQLParser.OPEN);
	        }

	        this.state = 3555;
	        this.edgeSynonym();
	        this.state = 3557;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,344,this._ctx);
	        if(la_===1) {
	            this.state = 3556;
	            this.notNull();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	closedEdgeRefValueType() {
	    let localctx = new ClosedEdgeRefValueTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 760, GQLParser.RULE_closedEdgeRefValueType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3559;
	        this.edgeTypeDef();
	        this.state = 3561;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,345,this._ctx);
	        if(la_===1) {
	            this.state = 3560;
	            this.notNull();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constructedType() {
	    let localctx = new ConstructedTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 762, GQLParser.RULE_constructedType);
	    try {
	        this.state = 3565;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,346,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3563;
	            this.listValueType();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3564;
	            this.recordType();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	listValueType() {
	    let localctx = new ListValueTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 764, GQLParser.RULE_listValueType);
	    try {
	        this.state = 3591;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 66:
	        case 142:
	        case 172:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3567;
	            this.listValueTypeName();
	            this.state = 3568;
	            this.match(GQLParser.LEFT_ANGLE_BRACKET);
	            this.state = 3569;
	            this.predefinedType();
	            this.state = 3570;
	            this.match(GQLParser.RIGHT_ANGLE_BRACKET);
	            this.state = 3575;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,347,this._ctx);
	            if(la_===1) {
	                this.state = 3571;
	                this.match(GQLParser.LEFT_BRACKET);
	                this.state = 3572;
	                this.maxLength();
	                this.state = 3573;
	                this.match(GQLParser.RIGHT_BRACKET);

	            }
	            this.state = 3578;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,348,this._ctx);
	            if(la_===1) {
	                this.state = 3577;
	                this.notNull();

	            }
	            break;
	        case 44:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 83:
	        case 109:
	        case 112:
	        case 113:
	        case 120:
	        case 122:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 174:
	        case 198:
	        case 205:
	        case 214:
	        case 228:
	        case 232:
	        case 233:
	        case 238:
	        case 243:
	        case 244:
	        case 249:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 255:
	        case 256:
	        case 259:
	        case 262:
	        case 264:
	        case 265:
	        case 273:
	        case 312:
	        case 317:
	        case 318:
	        case 323:
	        case 335:
	        case 339:
	        case 341:
	        case 347:
	        case 354:
	        case 355:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3580;
	            this.predefinedType();
	            this.state = 3581;
	            this.listValueTypeName();
	            this.state = 3586;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,349,this._ctx);
	            if(la_===1) {
	                this.state = 3582;
	                this.match(GQLParser.LEFT_BRACKET);
	                this.state = 3583;
	                this.maxLength();
	                this.state = 3584;
	                this.match(GQLParser.RIGHT_BRACKET);

	            }
	            this.state = 3589;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,350,this._ctx);
	            if(la_===1) {
	                this.state = 3588;
	                this.notNull();

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	listValueTypeName() {
	    let localctx = new ListValueTypeNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 766, GQLParser.RULE_listValueTypeName);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3594;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===142) {
	            this.state = 3593;
	            this.match(GQLParser.GROUP);
	        }

	        this.state = 3596;
	        this.listValueTypeNameSynonym();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	listValueTypeNameSynonym() {
	    let localctx = new ListValueTypeNameSynonymContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 768, GQLParser.RULE_listValueTypeNameSynonym);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3598;
	        _la = this._input.LA(1);
	        if(!(_la===66 || _la===172)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	recordType() {
	    let localctx = new RecordTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 770, GQLParser.RULE_recordType);
	    var _la = 0;
	    try {
	        this.state = 3614;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,357,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3601;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===198) {
	                this.state = 3600;
	                this.match(GQLParser.OPEN);
	            }

	            this.state = 3603;
	            this.match(GQLParser.RECORD);
	            this.state = 3605;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,354,this._ctx);
	            if(la_===1) {
	                this.state = 3604;
	                this.notNull();

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3608;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===215) {
	                this.state = 3607;
	                this.match(GQLParser.RECORD);
	            }

	            this.state = 3610;
	            this.fieldTypesSpec();
	            this.state = 3612;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,356,this._ctx);
	            if(la_===1) {
	                this.state = 3611;
	                this.notNull();

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fieldTypesSpec() {
	    let localctx = new FieldTypesSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 772, GQLParser.RULE_fieldTypesSpec);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3616;
	        this.match(GQLParser.LEFT_BRACE);
	        this.state = 3618;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===56 || ((((_la - 386)) & ~0x1f) === 0 && ((1 << (_la - 386)) & 1027) !== 0)) {
	            this.state = 3617;
	            this.fieldTypeList();
	        }

	        this.state = 3620;
	        this.match(GQLParser.RIGHT_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fieldTypeList() {
	    let localctx = new FieldTypeListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 774, GQLParser.RULE_fieldTypeList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3622;
	        this.fieldType();
	        this.state = 3625; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 3623;
	            this.match(GQLParser.COMMA);
	            this.state = 3624;
	            this.fieldType();
	            this.state = 3627; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===34);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dynamicUnionType() {
	    let localctx = new DynamicUnionTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 776, GQLParser.RULE_dynamicUnionType);
	    try {
	        this.state = 3632;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,360,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3629;
	            this.openDynamicUnionType();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3630;
	            this.dynamicPropertyValueType();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3631;
	            this.closedDynamicUnionType();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	openDynamicUnionType() {
	    let localctx = new OpenDynamicUnionTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 778, GQLParser.RULE_openDynamicUnionType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3634;
	        this.match(GQLParser.ANY);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dynamicPropertyValueType() {
	    let localctx = new DynamicPropertyValueTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 780, GQLParser.RULE_dynamicPropertyValueType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3637;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===65) {
	            this.state = 3636;
	            this.match(GQLParser.ANY);
	        }

	        this.state = 3639;
	        this.match(GQLParser.PROPERTY);
	        this.state = 3640;
	        this.match(GQLParser.VALUE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	closedDynamicUnionType() {
	    let localctx = new ClosedDynamicUnionTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 782, GQLParser.RULE_closedDynamicUnionType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3642;
	        this.match(GQLParser.ANY);
	        this.state = 3643;
	        this.match(GQLParser.LEFT_ANGLE_BRACKET);
	        this.state = 3644;
	        this.componentTypeList();
	        this.state = 3645;
	        this.match(GQLParser.RIGHT_ANGLE_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	componentTypeList() {
	    let localctx = new ComponentTypeListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 784, GQLParser.RULE_componentTypeList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3647;
	        this.componentType();
	        this.state = 3652;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===52) {
	            this.state = 3648;
	            this.match(GQLParser.VERTICAL_BAR);
	            this.state = 3649;
	            this.componentType();
	            this.state = 3654;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	componentType() {
	    let localctx = new ComponentTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 786, GQLParser.RULE_componentType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3655;
	        this.valueType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathValueType() {
	    let localctx = new PathValueTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 788, GQLParser.RULE_pathValueType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3657;
	        this.match(GQLParser.PATH);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	notNull() {
	    let localctx = new NotNullContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 790, GQLParser.RULE_notNull);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3659;
	        this.match(GQLParser.NOT);
	        this.state = 3660;
	        this.match(GQLParser.NULL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fieldType() {
	    let localctx = new FieldTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 792, GQLParser.RULE_fieldType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3662;
	        this.fieldName();

	        this.state = 3663;
	        this.typed();
	        this.state = 3664;
	        this.valueType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	schemaRef() {
	    let localctx = new SchemaRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 794, GQLParser.RULE_schemaRef);
	    try {
	        this.state = 3669;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 48:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3666;
	            this.absoluteCatalogSchemaRef();
	            break;
	        case 54:
	        case 55:
	        case 105:
	        case 146:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3667;
	            this.relativeCatalogSchemaRef();
	            break;
	        case 35:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3668;
	            this.refParameter();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	absoluteCatalogSchemaRef() {
	    let localctx = new AbsoluteCatalogSchemaRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 796, GQLParser.RULE_absoluteCatalogSchemaRef);
	    try {
	        this.state = 3675;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,364,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3671;
	            this.match(GQLParser.SOLIDUS);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3672;
	            this.absoluteDirectoryPath();
	            this.state = 3673;
	            this.schemaName();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	catalogSchemaParentAndName() {
	    let localctx = new CatalogSchemaParentAndNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 798, GQLParser.RULE_catalogSchemaParentAndName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3677;
	        this.absoluteDirectoryPath();
	        this.state = 3678;
	        this.schemaName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	relativeCatalogSchemaRef() {
	    let localctx = new RelativeCatalogSchemaRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 800, GQLParser.RULE_relativeCatalogSchemaRef);
	    try {
	        this.state = 3684;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 54:
	        case 105:
	        case 146:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3680;
	            this.predefinedSchemaRef();
	            break;
	        case 55:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3681;
	            this.relativeDirectoryPath();
	            this.state = 3682;
	            this.schemaName();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	predefinedSchemaRef() {
	    let localctx = new PredefinedSchemaRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 802, GQLParser.RULE_predefinedSchemaRef);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3686;
	        _la = this._input.LA(1);
	        if(!(_la===54 || _la===105 || _la===146)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	absoluteDirectoryPath() {
	    let localctx = new AbsoluteDirectoryPathContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 804, GQLParser.RULE_absoluteDirectoryPath);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3688;
	        this.match(GQLParser.SOLIDUS);
	        this.state = 3690;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,366,this._ctx);
	        if(la_===1) {
	            this.state = 3689;
	            this.simpleDirectoryPath();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	relativeDirectoryPath() {
	    let localctx = new RelativeDirectoryPathContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 806, GQLParser.RULE_relativeDirectoryPath);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3692;
	        this.match(GQLParser.DOUBLE_PERIOD);
	        this.state = 3704;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===48) {
	            this.state = 3697;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,367,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 3693;
	                    this.match(GQLParser.SOLIDUS);
	                    this.state = 3694;
	                    this.match(GQLParser.DOUBLE_PERIOD); 
	                }
	                this.state = 3699;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,367,this._ctx);
	            }

	            this.state = 3700;
	            this.match(GQLParser.SOLIDUS);
	            this.state = 3702;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,368,this._ctx);
	            if(la_===1) {
	                this.state = 3701;
	                this.simpleDirectoryPath();

	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleDirectoryPath() {
	    let localctx = new SimpleDirectoryPathContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 808, GQLParser.RULE_simpleDirectoryPath);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3709; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 3706;
	        		this.directoryName();
	        		this.state = 3707;
	        		this.match(GQLParser.SOLIDUS);
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 3711; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,370, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphRef() {
	    let localctx = new GraphRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 810, GQLParser.RULE_graphRef);
	    try {
	        this.state = 3719;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,371,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3713;
	            this.catalogObjectParentRef();
	            this.state = 3714;
	            this.graphName();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3716;
	            this.delimitedGraphName();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3717;
	            this.homeGraph();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3718;
	            this.refParameter();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	catalogGraphParentAndName() {
	    let localctx = new CatalogGraphParentAndNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 812, GQLParser.RULE_catalogGraphParentAndName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3722;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,372,this._ctx);
	        if(la_===1) {
	            this.state = 3721;
	            this.catalogObjectParentRef();

	        }
	        this.state = 3724;
	        this.graphName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	homeGraph() {
	    let localctx = new HomeGraphContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 814, GQLParser.RULE_homeGraph);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3726;
	        _la = this._input.LA(1);
	        if(!(_la===144 || _la===145)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphTypeRef() {
	    let localctx = new GraphTypeRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 816, GQLParser.RULE_graphTypeRef);
	    try {
	        this.state = 3730;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,373,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3728;
	            this.catalogGraphTypeParentAndName();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3729;
	            this.refParameter();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	catalogGraphTypeParentAndName() {
	    let localctx = new CatalogGraphTypeParentAndNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 818, GQLParser.RULE_catalogGraphTypeParentAndName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3733;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,374,this._ctx);
	        if(la_===1) {
	            this.state = 3732;
	            this.catalogObjectParentRef();

	        }
	        this.state = 3735;
	        this.graphTypeName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bindingTableRef() {
	    let localctx = new BindingTableRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 820, GQLParser.RULE_bindingTableRef);
	    try {
	        this.state = 3742;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,375,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3737;
	            this.catalogObjectParentRef();
	            this.state = 3738;
	            this.bindingTableName();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3740;
	            this.delimitedBindingTableName();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3741;
	            this.refParameter();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	catalogBindingTableParentAndName() {
	    let localctx = new CatalogBindingTableParentAndNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 822, GQLParser.RULE_catalogBindingTableParentAndName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3745;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,376,this._ctx);
	        if(la_===1) {
	            this.state = 3744;
	            this.catalogObjectParentRef();

	        }
	        this.state = 3747;
	        this.bindingTableName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedureRef() {
	    let localctx = new ProcedureRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 824, GQLParser.RULE_procedureRef);
	    try {
	        this.state = 3751;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,377,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3749;
	            this.catalogProcedureParentAndName();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3750;
	            this.refParameter();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	catalogProcedureParentAndName() {
	    let localctx = new CatalogProcedureParentAndNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 826, GQLParser.RULE_catalogProcedureParentAndName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3754;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,378,this._ctx);
	        if(la_===1) {
	            this.state = 3753;
	            this.catalogObjectParentRef();

	        }
	        this.state = 3756;
	        this.procedureName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	catalogObjectParentRef() {
	    let localctx = new CatalogObjectParentRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 828, GQLParser.RULE_catalogObjectParentRef);
	    var _la = 0;
	    try {
	        this.state = 3777;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 35:
	        case 48:
	        case 54:
	        case 55:
	        case 105:
	        case 146:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3758;
	            this.schemaRef();
	            this.state = 3760;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===48) {
	                this.state = 3759;
	                this.match(GQLParser.SOLIDUS);
	            }

	            this.state = 3767;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,380,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 3762;
	                    this.objectName();
	                    this.state = 3763;
	                    this.match(GQLParser.PERIOD); 
	                }
	                this.state = 3769;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,380,this._ctx);
	            }

	            break;
	        case 56:
	        case 386:
	        case 387:
	        case 396:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3773; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 3770;
	            		this.objectName();
	            		this.state = 3771;
	            		this.match(GQLParser.PERIOD);
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 3775; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,381, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	refParameter() {
	    let localctx = new RefParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 830, GQLParser.RULE_refParameter);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3779;
	        this.parameter();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	externalObjectRef() {
	    let localctx = new ExternalObjectRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 832, GQLParser.RULE_externalObjectRef);
	    try {
	        this.enterOuterAlt(localctx, 1);

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	searchCondition() {
	    let localctx = new SearchConditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 834, GQLParser.RULE_searchCondition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3783;
	        this.booleanValueExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	predicate() {
	    let localctx = new PredicateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 836, GQLParser.RULE_predicate);
	    try {
	        this.state = 3796;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,383,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3785;
	            this.comparisonPredicate();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3786;
	            this.existsPredicate();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3787;
	            this.nullPredicate();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3788;
	            this.valueTypePredicate();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3789;
	            this.normalizedPredicate();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 3790;
	            this.directedPredicate();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 3791;
	            this.labeledPredicate();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 3792;
	            this.sourceOrDestinationPredicate();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 3793;
	            this.allDifferentPredicate();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 3794;
	            this.samePredicate();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 3795;
	            this.propertyExistsPredicate();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	comparisonPredicate() {
	    let localctx = new ComparisonPredicateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 838, GQLParser.RULE_comparisonPredicate);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3798;
	        this.comparisonPredicand();
	        this.state = 3799;
	        this.comparisonPredicatePart2();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	comparisonPredicatePart2() {
	    let localctx = new ComparisonPredicatePart2Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 840, GQLParser.RULE_comparisonPredicatePart2);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3801;
	        this.comparisonOperator();
	        this.state = 3802;
	        this.comparisonPredicand();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	comparisonOperator() {
	    let localctx = new ComparisonOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 842, GQLParser.RULE_comparisonOperator);
	    try {
	        this.state = 3810;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,384,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3804;
	            this.equals();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3805;
	            this.notEquals();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3806;
	            this.lessThen();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3807;
	            this.greaterThan();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3808;
	            this.lessThanOrEquals();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 3809;
	            this.graterThanOrEquals();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	equals() {
	    let localctx = new EqualsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 844, GQLParser.RULE_equals);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3812;
	        this.match(GQLParser.EQUALS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	notEquals() {
	    let localctx = new NotEqualsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 846, GQLParser.RULE_notEquals);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3814;
	        this.match(GQLParser.LEFT_ANGLE_BRACKET);
	        this.state = 3815;
	        this.match(GQLParser.RIGHT_ANGLE_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lessThen() {
	    let localctx = new LessThenContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 848, GQLParser.RULE_lessThen);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3817;
	        this.match(GQLParser.LEFT_ANGLE_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	greaterThan() {
	    let localctx = new GreaterThanContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 850, GQLParser.RULE_greaterThan);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3819;
	        this.match(GQLParser.RIGHT_ANGLE_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lessThanOrEquals() {
	    let localctx = new LessThanOrEqualsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 852, GQLParser.RULE_lessThanOrEquals);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3821;
	        this.match(GQLParser.LEFT_ANGLE_BRACKET);
	        this.state = 3822;
	        this.match(GQLParser.EQUALS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graterThanOrEquals() {
	    let localctx = new GraterThanOrEqualsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 854, GQLParser.RULE_graterThanOrEquals);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3824;
	        this.match(GQLParser.RIGHT_ANGLE_BRACKET);
	        this.state = 3825;
	        this.match(GQLParser.EQUALS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	comparisonPredicand() {
	    let localctx = new ComparisonPredicandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 856, GQLParser.RULE_comparisonPredicand);
	    try {
	        this.state = 3829;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,385,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3827;
	            this.commonValueExpr();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3828;
	            this.booleanPredicand();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	existsPredicate() {
	    let localctx = new ExistsPredicateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 858, GQLParser.RULE_existsPredicate);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3831;
	        this.match(GQLParser.EXISTS);
	        this.state = 3849;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,386,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 3832;
	            this.match(GQLParser.LEFT_BRACE);
	            this.state = 3833;
	            this.graphPattern();
	            this.state = 3834;
	            this.match(GQLParser.RIGHT_BRACE);
	            break;

	        case 2:
	            this.state = 3836;
	            this.match(GQLParser.LEFT_PAREN);
	            this.state = 3837;
	            this.graphPattern();
	            this.state = 3838;
	            this.match(GQLParser.RIGHT_PAREN);
	            break;

	        case 3:
	            this.state = 3840;
	            this.match(GQLParser.LEFT_BRACE);
	            this.state = 3841;
	            this.matchStatmentBlock();
	            this.state = 3842;
	            this.match(GQLParser.RIGHT_BRACE);
	            break;

	        case 4:
	            this.state = 3844;
	            this.match(GQLParser.LEFT_PAREN);
	            this.state = 3845;
	            this.matchStatmentBlock();
	            this.state = 3846;
	            this.match(GQLParser.RIGHT_PAREN);
	            break;

	        case 5:
	            this.state = 3848;
	            this.nestedQuerySpec();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nullPredicate() {
	    let localctx = new NullPredicateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 860, GQLParser.RULE_nullPredicate);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3851;
	        this.valueExprPrimary();
	        this.state = 3852;
	        this.nullPredicatePart2();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nullPredicatePart2() {
	    let localctx = new NullPredicatePart2Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 862, GQLParser.RULE_nullPredicatePart2);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3854;
	        this.match(GQLParser.IS);
	        this.state = 3856;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===191) {
	            this.state = 3855;
	            this.match(GQLParser.NOT);
	        }

	        this.state = 3858;
	        this.match(GQLParser.NULL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	valueTypePredicate() {
	    let localctx = new ValueTypePredicateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 864, GQLParser.RULE_valueTypePredicate);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3860;
	        this.valueExprPrimary();
	        this.state = 3861;
	        this.valueTypePredicatePart2();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	valueTypePredicatePart2() {
	    let localctx = new ValueTypePredicatePart2Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 866, GQLParser.RULE_valueTypePredicatePart2);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3863;
	        this.match(GQLParser.IS);
	        this.state = 3865;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===191) {
	            this.state = 3864;
	            this.match(GQLParser.NOT);
	        }

	        this.state = 3867;
	        this.typed();
	        this.state = 3868;
	        this.valueType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	normalizedPredicate() {
	    let localctx = new NormalizedPredicateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 868, GQLParser.RULE_normalizedPredicate);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3870;
	        this.stringValueExpr();
	        this.state = 3871;
	        this.normalizedPredicatePart2();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	normalizedPredicatePart2() {
	    let localctx = new NormalizedPredicatePart2Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 870, GQLParser.RULE_normalizedPredicatePart2);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3873;
	        this.match(GQLParser.IS);
	        this.state = 3875;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===191) {
	            this.state = 3874;
	            this.match(GQLParser.NOT);
	        }

	        this.state = 3878;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 330)) & ~0x1f) === 0 && ((1 << (_la - 330)) & 15) !== 0)) {
	            this.state = 3877;
	            this.normalForm();
	        }

	        this.state = 3880;
	        this.match(GQLParser.NORMALIZED);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	directedPredicate() {
	    let localctx = new DirectedPredicateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 872, GQLParser.RULE_directedPredicate);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3882;
	        this.elementVarRef();
	        this.state = 3883;
	        this.directedPredicate();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	directedPredicatePart2() {
	    let localctx = new DirectedPredicatePart2Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 874, GQLParser.RULE_directedPredicatePart2);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3885;
	        this.match(GQLParser.IS);
	        this.state = 3887;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===191) {
	            this.state = 3886;
	            this.match(GQLParser.NOT);
	        }

	        this.state = 3889;
	        this.match(GQLParser.DIRECTED);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	labeledPredicate() {
	    let localctx = new LabeledPredicateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 876, GQLParser.RULE_labeledPredicate);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3891;
	        this.elementVarRef();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	labeledPredicatePart2() {
	    let localctx = new LabeledPredicatePart2Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 878, GQLParser.RULE_labeledPredicatePart2);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3893;
	        this.isLabeledOrColon();
	        this.state = 3894;
	        this.labelExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	isLabeledOrColon() {
	    let localctx = new IsLabeledOrColonContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 880, GQLParser.RULE_isLabeledOrColon);
	    var _la = 0;
	    try {
	        this.state = 3902;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 167:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3896;
	            this.match(GQLParser.IS);
	            this.state = 3898;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===191) {
	                this.state = 3897;
	                this.match(GQLParser.NOT);
	            }

	            this.state = 3900;
	            this.match(GQLParser.LABELED);
	            break;
	        case 32:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3901;
	            this.match(GQLParser.COLON);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sourceOrDestinationPredicate() {
	    let localctx = new SourceOrDestinationPredicateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 882, GQLParser.RULE_sourceOrDestinationPredicate);
	    try {
	        this.state = 3910;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,394,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3904;
	            this.nodeRef();
	            this.state = 3905;
	            this.sourcePredicatePart2();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3907;
	            this.nodeRef();
	            this.state = 3908;
	            this.destinationPredicatePart2();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nodeRef() {
	    let localctx = new NodeRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 884, GQLParser.RULE_nodeRef);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3912;
	        this.elementVarRef();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sourcePredicatePart2() {
	    let localctx = new SourcePredicatePart2Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 886, GQLParser.RULE_sourcePredicatePart2);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3914;
	        this.match(GQLParser.IS);
	        this.state = 3916;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===191) {
	            this.state = 3915;
	            this.match(GQLParser.NOT);
	        }

	        this.state = 3918;
	        this.match(GQLParser.SOURCE);
	        this.state = 3919;
	        this.match(GQLParser.OF);
	        this.state = 3920;
	        this.edgeRef();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	destinationPredicatePart2() {
	    let localctx = new DestinationPredicatePart2Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 888, GQLParser.RULE_destinationPredicatePart2);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3922;
	        this.match(GQLParser.IS);
	        this.state = 3924;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===191) {
	            this.state = 3923;
	            this.match(GQLParser.NOT);
	        }

	        this.state = 3926;
	        this.match(GQLParser.DESTINATION);
	        this.state = 3927;
	        this.match(GQLParser.OF);
	        this.state = 3928;
	        this.edgeRef();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	edgeRef() {
	    let localctx = new EdgeRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 890, GQLParser.RULE_edgeRef);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3930;
	        this.elementVarRef();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	allDifferentPredicate() {
	    let localctx = new AllDifferentPredicateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 892, GQLParser.RULE_allDifferentPredicate);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3932;
	        this.match(GQLParser.ALL_DIFFERENT);
	        this.state = 3933;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 3934;
	        this.elementVarRef();
	        this.state = 3937; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 3935;
	            this.match(GQLParser.COMMA);
	            this.state = 3936;
	            this.elementVarRef();
	            this.state = 3939; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===34);
	        this.state = 3941;
	        this.match(GQLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	samePredicate() {
	    let localctx = new SamePredicateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 894, GQLParser.RULE_samePredicate);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3943;
	        this.match(GQLParser.SAME);
	        this.state = 3944;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 3945;
	        this.elementVarRef();
	        this.state = 3948; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 3946;
	            this.match(GQLParser.COMMA);
	            this.state = 3947;
	            this.elementVarRef();
	            this.state = 3950; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===34);
	        this.state = 3952;
	        this.match(GQLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertyExistsPredicate() {
	    let localctx = new PropertyExistsPredicateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 896, GQLParser.RULE_propertyExistsPredicate);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3954;
	        this.match(GQLParser.PROPERTY_EXISTS);
	        this.state = 3955;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 3956;
	        this.elementVarRef();
	        this.state = 3957;
	        this.match(GQLParser.COMMA);
	        this.state = 3958;
	        this.propertyName();
	        this.state = 3959;
	        this.match(GQLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	valueSpec() {
	    let localctx = new ValueSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 898, GQLParser.RULE_valueSpec);
	    try {
	        this.state = 3963;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 40:
	        case 42:
	        case 56:
	        case 109:
	        case 110:
	        case 122:
	        case 130:
	        case 192:
	        case 215:
	        case 243:
	        case 244:
	        case 247:
	        case 258:
	        case 367:
	        case 379:
	        case 384:
	        case 385:
	        case 386:
	        case 387:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3961;
	            this.literal();
	            break;
	        case 35:
	        case 108:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3962;
	            this.parameterValueSpec();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unsignedValueSpec() {
	    let localctx = new UnsignedValueSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 900, GQLParser.RULE_unsignedValueSpec);
	    try {
	        this.state = 3967;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 40:
	        case 42:
	        case 56:
	        case 109:
	        case 110:
	        case 122:
	        case 130:
	        case 192:
	        case 215:
	        case 243:
	        case 244:
	        case 247:
	        case 258:
	        case 366:
	        case 379:
	        case 384:
	        case 385:
	        case 386:
	        case 387:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3965;
	            this.unsignedLiteral();
	            break;
	        case 35:
	        case 108:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3966;
	            this.parameterValueSpec();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unsignedIntSpec() {
	    let localctx = new UnsignedIntSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 902, GQLParser.RULE_unsignedIntSpec);
	    try {
	        this.state = 3971;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 379:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3969;
	            this.match(GQLParser.UNSIGNED_INT);
	            break;
	        case 35:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3970;
	            this.parameter();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parameterValueSpec() {
	    let localctx = new ParameterValueSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 904, GQLParser.RULE_parameterValueSpec);
	    try {
	        this.state = 3975;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 35:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3973;
	            this.parameter();
	            break;
	        case 108:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3974;
	            this.predefinedParameter();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	predefinedParameter() {
	    let localctx = new PredefinedParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 906, GQLParser.RULE_predefinedParameter);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3977;
	        this.match(GQLParser.CURRENT_USER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	valueExpr() {
	    let localctx = new ValueExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 908, GQLParser.RULE_valueExpr);
	    try {
	        this.state = 3981;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,403,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3979;
	            this.commonValueExpr();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3980;
	            this.booleanValueExpr();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	commonValueExpr() {
	    let localctx = new CommonValueExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 910, GQLParser.RULE_commonValueExpr);
	    try {
	        this.state = 3992;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,404,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3983;
	            this.numericValueExpr();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3984;
	            this.stringValueExpr();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3985;
	            this.dateTimeValueExpr(0);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3986;
	            this.durationValueExpr(0);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3987;
	            this.listValueExpr();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 3988;
	            this.recordValueExpr();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 3989;
	            this.pathValueExpr();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 3990;
	            this.refValueExpr();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 3991;
	            this.commonValuePropertiesGroup();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	commonValuePropertiesGroup() {
	    let localctx = new CommonValuePropertiesGroupContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 912, GQLParser.RULE_commonValuePropertiesGroup);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3994;
	        this.propertyName();
	        this.state = 3997; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 3995;
	        		this.match(GQLParser.PERIOD);
	        		this.state = 3996;
	        		this.propertyName();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 3999; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,405, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	refValueExpr() {
	    let localctx = new RefValueExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 914, GQLParser.RULE_refValueExpr);
	    try {
	        this.state = 4005;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,406,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4001;
	            this.graphRefValueExpr();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4002;
	            this.bindingTableRefValueExpr();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4003;
	            this.nodeRefValueExpr();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4004;
	            this.edgeRefValueExpr();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphRefValueExpr() {
	    let localctx = new GraphRefValueExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 916, GQLParser.RULE_graphRefValueExpr);
	    var _la = 0;
	    try {
	        this.state = 4013;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 323:
	        case 339:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4008;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===339) {
	                this.state = 4007;
	                this.match(GQLParser.PROPERTY);
	            }

	            this.state = 4010;
	            this.match(GQLParser.GRAPH);
	            this.state = 4011;
	            this.graphExpr();
	            break;
	        case 35:
	        case 40:
	        case 42:
	        case 44:
	        case 56:
	        case 73:
	        case 85:
	        case 86:
	        case 93:
	        case 94:
	        case 100:
	        case 108:
	        case 109:
	        case 110:
	        case 122:
	        case 124:
	        case 130:
	        case 169:
	        case 183:
	        case 184:
	        case 192:
	        case 194:
	        case 205:
	        case 208:
	        case 209:
	        case 215:
	        case 236:
	        case 237:
	        case 239:
	        case 243:
	        case 244:
	        case 247:
	        case 258:
	        case 263:
	        case 366:
	        case 379:
	        case 384:
	        case 385:
	        case 386:
	        case 387:
	        case 396:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4012;
	            this.valueExprPrimary();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bindingTableRefValueExpr() {
	    let localctx = new BindingTableRefValueExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 918, GQLParser.RULE_bindingTableRefValueExpr);
	    var _la = 0;
	    try {
	        this.state = 4021;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 312:
	        case 347:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4016;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===312) {
	                this.state = 4015;
	                this.match(GQLParser.BINDING);
	            }

	            this.state = 4018;
	            this.match(GQLParser.TABLE);
	            this.state = 4019;
	            this.bindingTableExpr();
	            break;
	        case 35:
	        case 40:
	        case 42:
	        case 44:
	        case 56:
	        case 73:
	        case 85:
	        case 86:
	        case 93:
	        case 94:
	        case 100:
	        case 108:
	        case 109:
	        case 110:
	        case 122:
	        case 124:
	        case 130:
	        case 169:
	        case 183:
	        case 184:
	        case 192:
	        case 194:
	        case 205:
	        case 208:
	        case 209:
	        case 215:
	        case 236:
	        case 237:
	        case 239:
	        case 243:
	        case 244:
	        case 247:
	        case 258:
	        case 263:
	        case 366:
	        case 379:
	        case 384:
	        case 385:
	        case 386:
	        case 387:
	        case 396:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4020;
	            this.valueExprPrimary();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nodeRefValueExpr() {
	    let localctx = new NodeRefValueExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 920, GQLParser.RULE_nodeRefValueExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4023;
	        this.valueExprPrimary();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	edgeRefValueExpr() {
	    let localctx = new EdgeRefValueExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 922, GQLParser.RULE_edgeRefValueExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4025;
	        this.valueExprPrimary();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	recordValueExpr() {
	    let localctx = new RecordValueExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 924, GQLParser.RULE_recordValueExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4027;
	        this.valueExprPrimary();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	aggregatingValueExpr() {
	    let localctx = new AggregatingValueExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 926, GQLParser.RULE_aggregatingValueExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4029;
	        this.valueExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	booleanValueExpr() {
	    let localctx = new BooleanValueExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 928, GQLParser.RULE_booleanValueExpr);
	    try {
	        this.state = 4040;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,411,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4031;
	            this.booleanTerm(0);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4032;
	            this.booleanTerm(0);
	            this.state = 4033;
	            this.match(GQLParser.OR);
	            this.state = 4034;
	            this.booleanValueExpr();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4036;
	            this.booleanTerm(0);
	            this.state = 4037;
	            this.match(GQLParser.XOR);
	            this.state = 4038;
	            this.booleanValueExpr();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	booleanTerm(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new BooleanTermContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 930;
	    this.enterRecursionRule(localctx, 930, GQLParser.RULE_booleanTerm, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4043;
	        this.booleanFactor();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 4050;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,412,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new BooleanTermContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, GQLParser.RULE_booleanTerm);
	                this.state = 4045;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 4046;
	                this.match(GQLParser.AND);
	                this.state = 4047;
	                this.booleanFactor(); 
	            }
	            this.state = 4052;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,412,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	booleanFactor() {
	    let localctx = new BooleanFactorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 932, GQLParser.RULE_booleanFactor);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4054;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===191) {
	            this.state = 4053;
	            this.match(GQLParser.NOT);
	        }

	        this.state = 4056;
	        this.booleanTest();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	booleanTest() {
	    let localctx = new BooleanTestContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 934, GQLParser.RULE_booleanTest);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4058;
	        this.booleanPrimary();
	        this.state = 4064;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,415,this._ctx);
	        if(la_===1) {
	            this.state = 4059;
	            this.match(GQLParser.IS);
	            this.state = 4061;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===191) {
	                this.state = 4060;
	                this.match(GQLParser.NOT);
	            }

	            this.state = 4063;
	            this.truthValue();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	truthValue() {
	    let localctx = new TruthValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 936, GQLParser.RULE_truthValue);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4066;
	        _la = this._input.LA(1);
	        if(!(_la===130 || _la===247 || _la===258)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	booleanPrimary() {
	    let localctx = new BooleanPrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 938, GQLParser.RULE_booleanPrimary);
	    try {
	        this.state = 4070;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,416,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4068;
	            this.predicate();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4069;
	            this.booleanPredicand();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	booleanPredicand() {
	    let localctx = new BooleanPredicandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 940, GQLParser.RULE_booleanPredicand);
	    try {
	        this.state = 4074;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 44:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4072;
	            this.paranthisedBooleanValueExpr();
	            break;
	        case 35:
	        case 40:
	        case 42:
	        case 56:
	        case 73:
	        case 85:
	        case 86:
	        case 93:
	        case 94:
	        case 100:
	        case 108:
	        case 109:
	        case 110:
	        case 122:
	        case 124:
	        case 130:
	        case 169:
	        case 183:
	        case 184:
	        case 192:
	        case 194:
	        case 205:
	        case 208:
	        case 209:
	        case 215:
	        case 236:
	        case 237:
	        case 239:
	        case 243:
	        case 244:
	        case 247:
	        case 258:
	        case 263:
	        case 366:
	        case 379:
	        case 384:
	        case 385:
	        case 386:
	        case 387:
	        case 396:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4073;
	            this.nonParenthesizedValueExprPrimary();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	paranthisedBooleanValueExpr() {
	    let localctx = new ParanthisedBooleanValueExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 942, GQLParser.RULE_paranthisedBooleanValueExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4076;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 4077;
	        this.booleanValueExpr();
	        this.state = 4078;
	        this.match(GQLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numericValueExpr() {
	    let localctx = new NumericValueExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 944, GQLParser.RULE_numericValueExpr);
	    try {
	        this.state = 4089;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,418,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4080;
	            this.term();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4081;
	            this.term();
	            this.state = 4082;
	            this.match(GQLParser.PLUS);
	            this.state = 4083;
	            this.numericValueExpr();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4085;
	            this.term();
	            this.state = 4086;
	            this.match(GQLParser.MINUS);
	            this.state = 4087;
	            this.numericValueExpr();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	term() {
	    let localctx = new TermContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 946, GQLParser.RULE_term);
	    try {
	        this.state = 4100;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,419,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4091;
	            this.factor();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4092;
	            this.factor();
	            this.state = 4093;
	            this.match(GQLParser.ASTERISK);
	            this.state = 4094;
	            this.term();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4096;
	            this.factor();
	            this.state = 4097;
	            this.match(GQLParser.SOLIDUS);
	            this.state = 4098;
	            this.term();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	factor() {
	    let localctx = new FactorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 948, GQLParser.RULE_factor);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4103;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===368) {
	            this.state = 4102;
	            this.match(GQLParser.SIGN);
	        }

	        this.state = 4105;
	        this.numericPrimary();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numericPrimary() {
	    let localctx = new NumericPrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 950, GQLParser.RULE_numericPrimary);
	    try {
	        this.state = 4109;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 35:
	        case 40:
	        case 42:
	        case 44:
	        case 56:
	        case 73:
	        case 85:
	        case 86:
	        case 93:
	        case 94:
	        case 100:
	        case 108:
	        case 109:
	        case 110:
	        case 122:
	        case 124:
	        case 130:
	        case 169:
	        case 183:
	        case 184:
	        case 192:
	        case 194:
	        case 205:
	        case 208:
	        case 209:
	        case 215:
	        case 236:
	        case 237:
	        case 239:
	        case 243:
	        case 244:
	        case 247:
	        case 258:
	        case 263:
	        case 366:
	        case 379:
	        case 384:
	        case 385:
	        case 386:
	        case 387:
	        case 396:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4107;
	            this.valueExprPrimary();
	            break;
	        case 60:
	        case 61:
	        case 70:
	        case 72:
	        case 82:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 97:
	        case 98:
	        case 99:
	        case 114:
	        case 129:
	        case 139:
	        case 173:
	        case 179:
	        case 186:
	        case 195:
	        case 206:
	        case 210:
	        case 213:
	        case 229:
	        case 230:
	        case 234:
	        case 240:
	        case 241:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4108;
	            this.numericValueFunction();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	valueExprPrimary() {
	    let localctx = new ValueExprPrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 952, GQLParser.RULE_valueExprPrimary);
	    try {
	        this.state = 4113;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 44:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4111;
	            this.parenthesizedValueExpr();
	            break;
	        case 35:
	        case 40:
	        case 42:
	        case 56:
	        case 73:
	        case 85:
	        case 86:
	        case 93:
	        case 94:
	        case 100:
	        case 108:
	        case 109:
	        case 110:
	        case 122:
	        case 124:
	        case 130:
	        case 169:
	        case 183:
	        case 184:
	        case 192:
	        case 194:
	        case 205:
	        case 208:
	        case 209:
	        case 215:
	        case 236:
	        case 237:
	        case 239:
	        case 243:
	        case 244:
	        case 247:
	        case 258:
	        case 263:
	        case 366:
	        case 379:
	        case 384:
	        case 385:
	        case 386:
	        case 387:
	        case 396:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4112;
	            this.nonParenthesizedValueExprPrimary();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parenthesizedValueExpr() {
	    let localctx = new ParenthesizedValueExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 954, GQLParser.RULE_parenthesizedValueExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4115;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 4116;
	        this.valueExpr();
	        this.state = 4117;
	        this.match(GQLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nonParenthesizedValueExprPrimary() {
	    let localctx = new NonParenthesizedValueExprPrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 956, GQLParser.RULE_nonParenthesizedValueExprPrimary);
	    try {
	        this.state = 4121;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 35:
	        case 40:
	        case 42:
	        case 56:
	        case 73:
	        case 85:
	        case 86:
	        case 93:
	        case 94:
	        case 100:
	        case 108:
	        case 109:
	        case 110:
	        case 122:
	        case 124:
	        case 130:
	        case 169:
	        case 183:
	        case 184:
	        case 192:
	        case 194:
	        case 205:
	        case 208:
	        case 209:
	        case 215:
	        case 236:
	        case 237:
	        case 239:
	        case 243:
	        case 244:
	        case 247:
	        case 258:
	        case 263:
	        case 366:
	        case 379:
	        case 384:
	        case 385:
	        case 386:
	        case 387:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4119;
	            this.nonParenthesizedValueExprPrimarySpecialCase();
	            break;
	        case 396:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4120;
	            this.bindingVarRef();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nonParenthesizedValueExprPrimarySpecialCase() {
	    let localctx = new NonParenthesizedValueExprPrimarySpecialCaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 958, GQLParser.RULE_nonParenthesizedValueExprPrimarySpecialCase);
	    try {
	        this.state = 4131;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,424,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4123;
	            this.unsignedValueSpec();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4124;
	            this.aggregateFunction();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4125;
	            this.collectionValueConstructor();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4126;
	            this.valueQueryExpr();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 4127;
	            this.caseExpr();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 4128;
	            this.letValueExpr();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 4129;
	            this.castSpec();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 4130;
	            this.elementIdFunction();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	collectionValueConstructor() {
	    let localctx = new CollectionValueConstructorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 960, GQLParser.RULE_collectionValueConstructor);
	    try {
	        this.state = 4136;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 42:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4133;
	            this.listValueConstructor();
	            break;
	        case 40:
	        case 215:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4134;
	            this.recordValueConstructor();
	            break;
	        case 205:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4135;
	            this.pathValueConstructor();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numericValueFunction() {
	    let localctx = new NumericValueFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 962, GQLParser.RULE_numericValueFunction);
	    try {
	        this.state = 4148;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,426,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4138;
	            this.lengthExpr();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4139;
	            this.absoluteValueExpr();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4140;
	            this.modulusExpr();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4141;
	            this.trigonometricFunction();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 4142;
	            this.logarithmFunction();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 4143;
	            this.exponentialFunction();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 4144;
	            this.powerFunction();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 4145;
	            this.squareRootFunciton();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 4146;
	            this.floorFunction();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 4147;
	            this.ceilingFunction();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lengthExpr() {
	    let localctx = new LengthExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 964, GQLParser.RULE_lengthExpr);
	    try {
	        this.state = 4153;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 89:
	        case 90:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4150;
	            this.charLengthExpr();
	            break;
	        case 82:
	        case 195:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4151;
	            this.byteLengthExpr();
	            break;
	        case 206:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4152;
	            this.pathLengthExpr();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	charLengthExpr() {
	    let localctx = new CharLengthExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 966, GQLParser.RULE_charLengthExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4155;
	        _la = this._input.LA(1);
	        if(!(_la===89 || _la===90)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 4156;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 4157;
	        this.charStringValueExpr();
	        this.state = 4158;
	        this.match(GQLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	byteLengthExpr() {
	    let localctx = new ByteLengthExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 968, GQLParser.RULE_byteLengthExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4160;
	        _la = this._input.LA(1);
	        if(!(_la===82 || _la===195)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 4161;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 4162;
	        this.byteStringValueExpr();
	        this.state = 4163;
	        this.match(GQLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathLengthExpr() {
	    let localctx = new PathLengthExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 970, GQLParser.RULE_pathLengthExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4165;
	        this.match(GQLParser.PATH_LENGTH);
	        this.state = 4166;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 4167;
	        this.pathValueExpr();
	        this.state = 4168;
	        this.match(GQLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	absoluteValueExpr() {
	    let localctx = new AbsoluteValueExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 972, GQLParser.RULE_absoluteValueExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4170;
	        this.match(GQLParser.ABS);
	        this.state = 4171;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 4172;
	        this.numericValueExpr();
	        this.state = 4173;
	        this.match(GQLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	modulusExpr() {
	    let localctx = new ModulusExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 974, GQLParser.RULE_modulusExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4175;
	        this.match(GQLParser.MOD);
	        this.state = 4176;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 4177;
	        this.numericValueExprDividen();
	        this.state = 4178;
	        this.match(GQLParser.COMMA);
	        this.state = 4179;
	        this.numericValueExprDivisor();
	        this.state = 4180;
	        this.match(GQLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numericValueExprDividen() {
	    let localctx = new NumericValueExprDividenContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 976, GQLParser.RULE_numericValueExprDividen);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4182;
	        this.numericValueExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numericValueExprDivisor() {
	    let localctx = new NumericValueExprDivisorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 978, GQLParser.RULE_numericValueExprDivisor);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4184;
	        this.numericValueExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	trigonometricFunction() {
	    let localctx = new TrigonometricFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 980, GQLParser.RULE_trigonometricFunction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4186;
	        this.trigonometricFunctionName();
	        this.state = 4187;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 4188;
	        this.numericValueExpr();
	        this.state = 4189;
	        this.match(GQLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	trigonometricFunctionName() {
	    let localctx = new TrigonometricFunctionNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 982, GQLParser.RULE_trigonometricFunctionName);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4191;
	        _la = this._input.LA(1);
	        if(!(((((_la - 61)) & ~0x1f) === 0 && ((1 << (_la - 61)) & 2561) !== 0) || ((((_la - 97)) & ~0x1f) === 0 && ((1 << (_la - 97)) & 131079) !== 0) || ((((_la - 213)) & ~0x1f) === 0 && ((1 << (_la - 213)) & 402849793) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	logarithmFunction() {
	    let localctx = new LogarithmFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 984, GQLParser.RULE_logarithmFunction);
	    try {
	        this.state = 4196;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 186:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4193;
	            this.generalLogarithmFunction();
	            break;
	        case 179:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4194;
	            this.commonLogarithmFunction();
	            break;
	        case 173:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4195;
	            this.naturalLogarithmFunction();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	generalLogarithmFunction() {
	    let localctx = new GeneralLogarithmFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 986, GQLParser.RULE_generalLogarithmFunction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4198;
	        this.match(GQLParser.MOD);
	        this.state = 4199;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 4200;
	        this.generalLogarithmBase();
	        this.state = 4201;
	        this.match(GQLParser.COMMA);
	        this.state = 4202;
	        this.generalLogarithmArgument();
	        this.state = 4203;
	        this.match(GQLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	generalLogarithmBase() {
	    let localctx = new GeneralLogarithmBaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 988, GQLParser.RULE_generalLogarithmBase);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4205;
	        this.numericValueExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	generalLogarithmArgument() {
	    let localctx = new GeneralLogarithmArgumentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 990, GQLParser.RULE_generalLogarithmArgument);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4207;
	        this.numericValueExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	commonLogarithmFunction() {
	    let localctx = new CommonLogarithmFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 992, GQLParser.RULE_commonLogarithmFunction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4209;
	        this.match(GQLParser.LOG10);
	        this.state = 4210;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 4211;
	        this.numericValueExpr();
	        this.state = 4212;
	        this.match(GQLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	naturalLogarithmFunction() {
	    let localctx = new NaturalLogarithmFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 994, GQLParser.RULE_naturalLogarithmFunction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4214;
	        this.match(GQLParser.LN);
	        this.state = 4215;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 4216;
	        this.numericValueExpr();
	        this.state = 4217;
	        this.match(GQLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exponentialFunction() {
	    let localctx = new ExponentialFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 996, GQLParser.RULE_exponentialFunction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4219;
	        this.match(GQLParser.EXP);
	        this.state = 4220;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 4221;
	        this.numericValueExpr();
	        this.state = 4222;
	        this.match(GQLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	powerFunction() {
	    let localctx = new PowerFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 998, GQLParser.RULE_powerFunction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4224;
	        this.match(GQLParser.POWER);
	        this.state = 4225;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 4226;
	        this.numericValueExprBase();
	        this.state = 4227;
	        this.match(GQLParser.COMMA);
	        this.state = 4228;
	        this.numericValueExprExponent();
	        this.state = 4229;
	        this.match(GQLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numericValueExprBase() {
	    let localctx = new NumericValueExprBaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1000, GQLParser.RULE_numericValueExprBase);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4231;
	        this.numericValueExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numericValueExprExponent() {
	    let localctx = new NumericValueExprExponentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1002, GQLParser.RULE_numericValueExprExponent);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4233;
	        this.numericValueExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	squareRootFunciton() {
	    let localctx = new SquareRootFuncitonContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1004, GQLParser.RULE_squareRootFunciton);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4235;
	        this.match(GQLParser.SQRT);
	        this.state = 4236;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 4237;
	        this.numericValueExpr();
	        this.state = 4238;
	        this.match(GQLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	floorFunction() {
	    let localctx = new FloorFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1006, GQLParser.RULE_floorFunction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4240;
	        this.match(GQLParser.FLOOR);
	        this.state = 4241;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 4242;
	        this.numericValueExpr();
	        this.state = 4243;
	        this.match(GQLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ceilingFunction() {
	    let localctx = new CeilingFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1008, GQLParser.RULE_ceilingFunction);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4245;
	        _la = this._input.LA(1);
	        if(!(_la===87 || _la===88)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 4246;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 4247;
	        this.numericValueExpr();
	        this.state = 4248;
	        this.match(GQLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stringValueExpr() {
	    let localctx = new StringValueExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1010, GQLParser.RULE_stringValueExpr);
	    try {
	        this.state = 4252;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,429,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4250;
	            this.charStringValueExpr();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4251;
	            this.byteStringValueExpr();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	charStringValueExpr() {
	    let localctx = new CharStringValueExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1012, GQLParser.RULE_charStringValueExpr);
	    try {
	        this.state = 4256;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,430,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4254;
	            this.charStringConcatenation();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4255;
	            this.charStringFactor();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	charStringConcatenation() {
	    let localctx = new CharStringConcatenationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1014, GQLParser.RULE_charStringConcatenation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4258;
	        this.charStringFactor();
	        this.state = 4259;
	        this.match(GQLParser.CONCATENATION);
	        this.state = 4260;
	        this.charStringValueExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	charStringFactor() {
	    let localctx = new CharStringFactorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1016, GQLParser.RULE_charStringFactor);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4262;
	        this.charStringPrimary();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	charStringPrimary() {
	    let localctx = new CharStringPrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1018, GQLParser.RULE_charStringPrimary);
	    try {
	        this.state = 4266;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 35:
	        case 40:
	        case 42:
	        case 44:
	        case 56:
	        case 73:
	        case 85:
	        case 86:
	        case 93:
	        case 94:
	        case 100:
	        case 108:
	        case 109:
	        case 110:
	        case 122:
	        case 124:
	        case 130:
	        case 169:
	        case 183:
	        case 184:
	        case 192:
	        case 194:
	        case 205:
	        case 208:
	        case 209:
	        case 215:
	        case 236:
	        case 237:
	        case 239:
	        case 243:
	        case 244:
	        case 247:
	        case 258:
	        case 263:
	        case 366:
	        case 379:
	        case 384:
	        case 385:
	        case 386:
	        case 387:
	        case 396:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4264;
	            this.valueExprPrimary();
	            break;
	        case 80:
	        case 180:
	        case 181:
	        case 190:
	        case 221:
	        case 246:
	        case 260:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4265;
	            this.stringValueFunction();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	byteStringValueExpr() {
	    let localctx = new ByteStringValueExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1020, GQLParser.RULE_byteStringValueExpr);
	    try {
	        this.state = 4270;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,432,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4268;
	            this.byteStringConcatenation();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4269;
	            this.byteStringFactor();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	byteStringFactor() {
	    let localctx = new ByteStringFactorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1022, GQLParser.RULE_byteStringFactor);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4272;
	        this.byteStringPrimary();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	byteStringPrimary() {
	    let localctx = new ByteStringPrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1024, GQLParser.RULE_byteStringPrimary);
	    try {
	        this.state = 4276;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 35:
	        case 40:
	        case 42:
	        case 44:
	        case 56:
	        case 73:
	        case 85:
	        case 86:
	        case 93:
	        case 94:
	        case 100:
	        case 108:
	        case 109:
	        case 110:
	        case 122:
	        case 124:
	        case 130:
	        case 169:
	        case 183:
	        case 184:
	        case 192:
	        case 194:
	        case 205:
	        case 208:
	        case 209:
	        case 215:
	        case 236:
	        case 237:
	        case 239:
	        case 243:
	        case 244:
	        case 247:
	        case 258:
	        case 263:
	        case 366:
	        case 379:
	        case 384:
	        case 385:
	        case 386:
	        case 387:
	        case 396:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4274;
	            this.valueExprPrimary();
	            break;
	        case 80:
	        case 180:
	        case 181:
	        case 190:
	        case 221:
	        case 246:
	        case 260:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4275;
	            this.stringValueFunction();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	byteStringConcatenation() {
	    let localctx = new ByteStringConcatenationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1026, GQLParser.RULE_byteStringConcatenation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4278;
	        this.byteStringFactor();
	        this.state = 4279;
	        this.match(GQLParser.CONCATENATION);
	        this.state = 4280;
	        this.byteStringValueExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stringValueFunction() {
	    let localctx = new StringValueFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1028, GQLParser.RULE_stringValueFunction);
	    try {
	        this.state = 4284;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,434,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4282;
	            this.charStringFunction();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4283;
	            this.byteStringFunction();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	charStringFunction() {
	    let localctx = new CharStringFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1030, GQLParser.RULE_charStringFunction);
	    try {
	        this.state = 4289;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 180:
	        case 260:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4286;
	            this.foldFunction();
	            break;
	        case 80:
	        case 181:
	        case 221:
	        case 246:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4287;
	            this.trimFunction();
	            break;
	        case 190:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4288;
	            this.normalizeFunction();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	foldFunction() {
	    let localctx = new FoldFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1032, GQLParser.RULE_foldFunction);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4291;
	        _la = this._input.LA(1);
	        if(!(_la===180 || _la===260)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 4292;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 4293;
	        this.charStringValueExpr();
	        this.state = 4294;
	        this.match(GQLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	trimFunction() {
	    let localctx = new TrimFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1034, GQLParser.RULE_trimFunction);
	    try {
	        this.state = 4298;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 246:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4296;
	            this.singleCharTrimFunction();
	            break;
	        case 80:
	        case 181:
	        case 221:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4297;
	            this.multiCharTrimFunction();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	singleCharTrimFunction() {
	    let localctx = new SingleCharTrimFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1036, GQLParser.RULE_singleCharTrimFunction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4300;
	        this.match(GQLParser.TRIM);
	        this.state = 4301;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 4302;
	        this.trimOperands();
	        this.state = 4303;
	        this.match(GQLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	multiCharTrimFunction() {
	    let localctx = new MultiCharTrimFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1038, GQLParser.RULE_multiCharTrimFunction);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4305;
	        _la = this._input.LA(1);
	        if(!(_la===80 || _la===181 || _la===221)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 4306;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 4307;
	        this.trimSource();

	        this.state = 4308;
	        this.match(GQLParser.COMMA);
	        this.state = 4309;
	        this.trimCharString();
	        this.state = 4311;
	        this.match(GQLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	trimOperands() {
	    let localctx = new TrimOperandsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1040, GQLParser.RULE_trimOperands);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4320;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,439,this._ctx);
	        if(la_===1) {
	            this.state = 4314;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===79 || _la===168 || _la===245) {
	                this.state = 4313;
	                this.trimSpec();
	            }

	            this.state = 4317;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 35)) & ~0x1f) === 0 && ((1 << (_la - 35)) & 2097825) !== 0) || ((((_la - 73)) & ~0x1f) === 0 && ((1 << (_la - 73)) & 137375873) !== 0) || ((((_la - 108)) & ~0x1f) === 0 && ((1 << (_la - 108)) & 4276231) !== 0) || ((((_la - 169)) & ~0x1f) === 0 && ((1 << (_la - 169)) & 44095489) !== 0) || ((((_la - 205)) & ~0x1f) === 0 && ((1 << (_la - 205)) & 2147550233) !== 0) || ((((_la - 237)) & ~0x1f) === 0 && ((1 << (_la - 237)) & 77596357) !== 0) || ((((_la - 366)) & ~0x1f) === 0 && ((1 << (_la - 366)) & 1077682177) !== 0)) {
	                this.state = 4316;
	                this.trimCharString();
	            }

	            this.state = 4319;
	            this.match(GQLParser.FROM);

	        }
	        this.state = 4322;
	        this.trimSource();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	trimSource() {
	    let localctx = new TrimSourceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1042, GQLParser.RULE_trimSource);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4324;
	        this.charStringValueExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	trimSpec() {
	    let localctx = new TrimSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1044, GQLParser.RULE_trimSpec);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4326;
	        _la = this._input.LA(1);
	        if(!(_la===79 || _la===168 || _la===245)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	trimCharString() {
	    let localctx = new TrimCharStringContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1046, GQLParser.RULE_trimCharString);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4328;
	        this.charStringValueExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	normalizeFunction() {
	    let localctx = new NormalizeFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1048, GQLParser.RULE_normalizeFunction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4330;
	        this.match(GQLParser.NORMALIZE);
	        this.state = 4331;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 4332;
	        this.charStringValueExpr();

	        this.state = 4333;
	        this.match(GQLParser.COMMA);
	        this.state = 4334;
	        this.normalForm();
	        this.state = 4336;
	        this.match(GQLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	normalForm() {
	    let localctx = new NormalFormContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1050, GQLParser.RULE_normalForm);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4338;
	        _la = this._input.LA(1);
	        if(!(((((_la - 330)) & ~0x1f) === 0 && ((1 << (_la - 330)) & 15) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	byteStringFunction() {
	    let localctx = new ByteStringFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1052, GQLParser.RULE_byteStringFunction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4340;
	        this.byteStrinTrimFunction();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	byteStrinTrimFunction() {
	    let localctx = new ByteStrinTrimFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1054, GQLParser.RULE_byteStrinTrimFunction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4342;
	        this.match(GQLParser.TRIM);
	        this.state = 4343;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 4344;
	        this.byteStringTrimOperands();
	        this.state = 4345;
	        this.match(GQLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	byteStringTrimOperands() {
	    let localctx = new ByteStringTrimOperandsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1056, GQLParser.RULE_byteStringTrimOperands);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4354;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,442,this._ctx);
	        if(la_===1) {
	            this.state = 4348;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===79 || _la===168 || _la===245) {
	                this.state = 4347;
	                this.trimSpec();
	            }

	            this.state = 4351;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 35)) & ~0x1f) === 0 && ((1 << (_la - 35)) & 2097825) !== 0) || ((((_la - 73)) & ~0x1f) === 0 && ((1 << (_la - 73)) & 137375873) !== 0) || ((((_la - 108)) & ~0x1f) === 0 && ((1 << (_la - 108)) & 4276231) !== 0) || ((((_la - 169)) & ~0x1f) === 0 && ((1 << (_la - 169)) & 44095489) !== 0) || ((((_la - 205)) & ~0x1f) === 0 && ((1 << (_la - 205)) & 2147550233) !== 0) || ((((_la - 237)) & ~0x1f) === 0 && ((1 << (_la - 237)) & 77596357) !== 0) || ((((_la - 366)) & ~0x1f) === 0 && ((1 << (_la - 366)) & 1077682177) !== 0)) {
	                this.state = 4350;
	                this.trimByteString();
	            }

	            this.state = 4353;
	            this.match(GQLParser.FROM);

	        }
	        this.state = 4356;
	        this.byteStringTrimSource();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	byteStringTrimSource() {
	    let localctx = new ByteStringTrimSourceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1058, GQLParser.RULE_byteStringTrimSource);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4358;
	        this.byteStringValueExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	trimByteString() {
	    let localctx = new TrimByteStringContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1060, GQLParser.RULE_trimByteString);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4360;
	        this.byteStringValueExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stringLength() {
	    let localctx = new StringLengthContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1062, GQLParser.RULE_stringLength);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4362;
	        this.numericValueExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	dateTimeValueExpr(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new DateTimeValueExprContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 1064;
	    this.enterRecursionRule(localctx, 1064, GQLParser.RULE_dateTimeValueExpr, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4370;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,443,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 4365;
	            this.dateTimeTerm();
	            break;

	        case 2:
	            this.state = 4366;
	            this.durationValueExpr(0);
	            this.state = 4367;
	            this.match(GQLParser.PLUS);
	            this.state = 4368;
	            this.dateTimeTerm();
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 4380;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,445,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 4378;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,444,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new DateTimeValueExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, GQLParser.RULE_dateTimeValueExpr);
	                    this.state = 4372;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 4373;
	                    this.match(GQLParser.PLUS);
	                    this.state = 4374;
	                    this.durationTerm(0);
	                    break;

	                case 2:
	                    localctx = new DateTimeValueExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, GQLParser.RULE_dateTimeValueExpr);
	                    this.state = 4375;
	                    if (!( this.precpred(this._ctx, 1))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                    }
	                    this.state = 4376;
	                    this.match(GQLParser.MINUS);
	                    this.state = 4377;
	                    this.durationTerm(0);
	                    break;

	                } 
	            }
	            this.state = 4382;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,445,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	dateTimeTerm() {
	    let localctx = new DateTimeTermContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1066, GQLParser.RULE_dateTimeTerm);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4383;
	        this.dateTimeFactor();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dateTimeFactor() {
	    let localctx = new DateTimeFactorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1068, GQLParser.RULE_dateTimeFactor);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4385;
	        this.dateTimePrimary();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dateTimePrimary() {
	    let localctx = new DateTimePrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1070, GQLParser.RULE_dateTimePrimary);
	    try {
	        this.state = 4389;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,446,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4387;
	            this.valueExprPrimary();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4388;
	            this.dateTimeValueFunction();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dateTimeValueFunction() {
	    let localctx = new DateTimeValueFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1072, GQLParser.RULE_dateTimeValueFunction);
	    try {
	        this.state = 4396;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 102:
	        case 109:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4391;
	            this.dateFunction();
	            break;
	        case 106:
	        case 275:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4392;
	            this.timeFunction();
	            break;
	        case 107:
	        case 274:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4393;
	            this.dateTimeFunction();
	            break;
	        case 176:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4394;
	            this.localTimeFunction();
	            break;
	        case 175:
	        case 177:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 4395;
	            this.localDatetimeFunction();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dateFunction() {
	    let localctx = new DateFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1074, GQLParser.RULE_dateFunction);
	    var _la = 0;
	    try {
	        this.state = 4405;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 102:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4398;
	            this.match(GQLParser.CURRENT_DATE);
	            break;
	        case 109:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4399;
	            this.match(GQLParser.DATE);
	            this.state = 4400;
	            this.match(GQLParser.LEFT_PAREN);
	            this.state = 4402;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===40 || _la===56 || _la===215 || _la===385 || _la===386) {
	                this.state = 4401;
	                this.dateFunctionParameters();
	            }

	            this.state = 4404;
	            this.match(GQLParser.RIGHT_PAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	timeFunction() {
	    let localctx = new TimeFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1076, GQLParser.RULE_timeFunction);
	    var _la = 0;
	    try {
	        this.state = 4414;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 106:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4407;
	            this.match(GQLParser.CURRENT_TIME);
	            break;
	        case 275:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4408;
	            this.match(GQLParser.ZONED_TIME);
	            this.state = 4409;
	            this.match(GQLParser.LEFT_PAREN);
	            this.state = 4411;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===40 || _la===56 || _la===215 || _la===385 || _la===386) {
	                this.state = 4410;
	                this.timeFunctionParameters();
	            }

	            this.state = 4413;
	            this.match(GQLParser.RIGHT_PAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	localTimeFunction() {
	    let localctx = new LocalTimeFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1078, GQLParser.RULE_localTimeFunction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4416;
	        this.match(GQLParser.LOCAL_TIME);
	        this.state = 4417;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 4419;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,452,this._ctx);
	        if(la_===1) {
	            this.state = 4418;
	            this.timeFunctionParameters();

	        }
	        this.state = 4422;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,453,this._ctx);
	        if(la_===1) {
	            this.state = 4421;
	            this.match(GQLParser.RIGHT_PAREN);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dateTimeFunction() {
	    let localctx = new DateTimeFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1080, GQLParser.RULE_dateTimeFunction);
	    var _la = 0;
	    try {
	        this.state = 4431;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 107:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4424;
	            this.match(GQLParser.CURRENT_TIMESTAMP);
	            break;
	        case 274:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4425;
	            this.match(GQLParser.ZONED_DATETIME);
	            this.state = 4426;
	            this.match(GQLParser.LEFT_PAREN);
	            this.state = 4428;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===40 || _la===56 || _la===215 || _la===385 || _la===386) {
	                this.state = 4427;
	                this.dateTimeFunctionParameters();
	            }

	            this.state = 4430;
	            this.match(GQLParser.RIGHT_PAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	localDatetimeFunction() {
	    let localctx = new LocalDatetimeFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1082, GQLParser.RULE_localDatetimeFunction);
	    var _la = 0;
	    try {
	        this.state = 4440;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 177:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4433;
	            this.match(GQLParser.LOCAL_TIMESTAMP);
	            break;
	        case 175:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4434;
	            this.match(GQLParser.LOCAL_DATETIME);
	            this.state = 4435;
	            this.match(GQLParser.LEFT_PAREN);
	            this.state = 4437;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===40 || _la===56 || _la===215 || _la===385 || _la===386) {
	                this.state = 4436;
	                this.dateTimeFunctionParameters();
	            }

	            this.state = 4439;
	            this.match(GQLParser.RIGHT_PAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dateFunctionParameters() {
	    let localctx = new DateFunctionParametersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1084, GQLParser.RULE_dateFunctionParameters);
	    try {
	        this.state = 4444;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 56:
	        case 385:
	        case 386:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4442;
	            this.dateString();
	            break;
	        case 40:
	        case 215:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4443;
	            this.recordValueConstructor();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	timeFunctionParameters() {
	    let localctx = new TimeFunctionParametersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1086, GQLParser.RULE_timeFunctionParameters);
	    try {
	        this.state = 4448;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 56:
	        case 385:
	        case 386:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4446;
	            this.timeString();
	            break;
	        case 40:
	        case 215:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4447;
	            this.recordValueConstructor();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dateTimeFunctionParameters() {
	    let localctx = new DateTimeFunctionParametersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1088, GQLParser.RULE_dateTimeFunctionParameters);
	    try {
	        this.state = 4452;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 56:
	        case 385:
	        case 386:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4450;
	            this.dateTimeString();
	            break;
	        case 40:
	        case 215:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4451;
	            this.recordValueConstructor();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	durationValueExpr(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new DurationValueExprContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 1090;
	    this.enterRecursionRule(localctx, 1090, GQLParser.RULE_durationValueExpr, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4457;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 35:
	        case 40:
	        case 42:
	        case 44:
	        case 56:
	        case 60:
	        case 61:
	        case 70:
	        case 72:
	        case 73:
	        case 82:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 93:
	        case 94:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 108:
	        case 109:
	        case 110:
	        case 114:
	        case 122:
	        case 124:
	        case 129:
	        case 130:
	        case 139:
	        case 169:
	        case 173:
	        case 179:
	        case 183:
	        case 184:
	        case 186:
	        case 192:
	        case 194:
	        case 195:
	        case 205:
	        case 206:
	        case 208:
	        case 209:
	        case 210:
	        case 213:
	        case 215:
	        case 229:
	        case 230:
	        case 234:
	        case 236:
	        case 237:
	        case 239:
	        case 240:
	        case 241:
	        case 243:
	        case 244:
	        case 247:
	        case 258:
	        case 263:
	        case 366:
	        case 368:
	        case 379:
	        case 384:
	        case 385:
	        case 386:
	        case 387:
	        case 396:
	            this.state = 4455;
	            this.durationTerm(0);
	            break;
	        case 123:
	            this.state = 4456;
	            this.dateTimeSubtraction();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 4467;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,463,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 4465;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,462,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new DurationValueExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, GQLParser.RULE_durationValueExpr);
	                    this.state = 4459;
	                    if (!( this.precpred(this._ctx, 3))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
	                    }
	                    this.state = 4460;
	                    this.match(GQLParser.PLUS);
	                    this.state = 4461;
	                    this.durationTerm(0);
	                    break;

	                case 2:
	                    localctx = new DurationValueExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, GQLParser.RULE_durationValueExpr);
	                    this.state = 4462;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 4463;
	                    this.match(GQLParser.MINUS);
	                    this.state = 4464;
	                    this.durationTerm(0);
	                    break;

	                } 
	            }
	            this.state = 4469;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,463,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	dateTimeSubtraction() {
	    let localctx = new DateTimeSubtractionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1092, GQLParser.RULE_dateTimeSubtraction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4470;
	        this.match(GQLParser.DURATION_BETWEEN);
	        this.state = 4471;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 4472;
	        this.dateTimeSubtractionParameters();
	        this.state = 4473;
	        this.match(GQLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dateTimeSubtractionParameters() {
	    let localctx = new DateTimeSubtractionParametersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1094, GQLParser.RULE_dateTimeSubtractionParameters);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4475;
	        this.dateTimeValueExpr(0);
	        this.state = 4476;
	        this.match(GQLParser.COMMA);
	        this.state = 4477;
	        this.dateTimeValueExpr(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	durationTerm(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new DurationTermContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 1096;
	    this.enterRecursionRule(localctx, 1096, GQLParser.RULE_durationTerm, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4485;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,464,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 4480;
	            this.durationFactor();
	            break;

	        case 2:
	            this.state = 4481;
	            this.term();
	            this.state = 4482;
	            this.match(GQLParser.ASTERISK);
	            this.state = 4483;
	            this.durationFactor();
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 4495;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,466,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 4493;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,465,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new DurationTermContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, GQLParser.RULE_durationTerm);
	                    this.state = 4487;
	                    if (!( this.precpred(this._ctx, 3))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
	                    }
	                    this.state = 4488;
	                    this.match(GQLParser.ASTERISK);
	                    this.state = 4489;
	                    this.factor();
	                    break;

	                case 2:
	                    localctx = new DurationTermContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, GQLParser.RULE_durationTerm);
	                    this.state = 4490;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 4491;
	                    this.match(GQLParser.SOLIDUS);
	                    this.state = 4492;
	                    this.factor();
	                    break;

	                } 
	            }
	            this.state = 4497;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,466,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	durationFactor() {
	    let localctx = new DurationFactorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1098, GQLParser.RULE_durationFactor);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4499;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===368) {
	            this.state = 4498;
	            this.match(GQLParser.SIGN);
	        }

	        this.state = 4501;
	        this.durationPrimary();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	durationPrimary() {
	    let localctx = new DurationPrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1100, GQLParser.RULE_durationPrimary);
	    try {
	        this.state = 4505;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,468,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4503;
	            this.valueExprPrimary();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4504;
	            this.durationValueFunction();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	durationValueExpr1() {
	    let localctx = new DurationValueExpr1Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 1102, GQLParser.RULE_durationValueExpr1);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4507;
	        this.durationValueExpr(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	durationTerm1() {
	    let localctx = new DurationTerm1Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 1104, GQLParser.RULE_durationTerm1);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4509;
	        this.durationTerm(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	durationTerm2() {
	    let localctx = new DurationTerm2Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 1106, GQLParser.RULE_durationTerm2);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4511;
	        this.durationTerm(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dateTimeValueExpr1() {
	    let localctx = new DateTimeValueExpr1Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 1108, GQLParser.RULE_dateTimeValueExpr1);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4513;
	        this.dateTimeValueExpr(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dateTimeValueExpr2() {
	    let localctx = new DateTimeValueExpr2Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 1110, GQLParser.RULE_dateTimeValueExpr2);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4515;
	        this.dateTimeValueExpr(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	durationValueFunction() {
	    let localctx = new DurationValueFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1112, GQLParser.RULE_durationValueFunction);
	    try {
	        this.state = 4519;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 122:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4517;
	            this.durationFunction();
	            break;
	        case 60:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4518;
	            this.durationAbsoluteValueFunction();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	durationFunction() {
	    let localctx = new DurationFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1114, GQLParser.RULE_durationFunction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4521;
	        this.match(GQLParser.DURATION);
	        this.state = 4522;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 4523;
	        this.durationFunctionParameters();
	        this.state = 4524;
	        this.match(GQLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	durationFunctionParameters() {
	    let localctx = new DurationFunctionParametersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1116, GQLParser.RULE_durationFunctionParameters);
	    try {
	        this.state = 4528;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 56:
	        case 385:
	        case 386:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4526;
	            this.durationString();
	            break;
	        case 40:
	        case 215:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4527;
	            this.recordValueConstructor();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	durationAbsoluteValueFunction() {
	    let localctx = new DurationAbsoluteValueFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1118, GQLParser.RULE_durationAbsoluteValueFunction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4530;
	        this.match(GQLParser.ABS);
	        this.state = 4531;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 4532;
	        this.durationValueExpr(0);
	        this.state = 4533;
	        this.match(GQLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	listValueExpr() {
	    let localctx = new ListValueExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1120, GQLParser.RULE_listValueExpr);
	    try {
	        this.state = 4537;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,471,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4535;
	            this.listConcatenation();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4536;
	            this.listPrimary();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	listConcatenation() {
	    let localctx = new ListConcatenationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1122, GQLParser.RULE_listConcatenation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4539;
	        this.listPrimary();
	        this.state = 4540;
	        this.match(GQLParser.CONCATENATION);
	        this.state = 4541;
	        this.listValueExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	listPrimary() {
	    let localctx = new ListPrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1124, GQLParser.RULE_listPrimary);
	    try {
	        this.state = 4545;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 246:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4543;
	            this.listValueFunction();
	            break;
	        case 35:
	        case 40:
	        case 42:
	        case 44:
	        case 56:
	        case 73:
	        case 85:
	        case 86:
	        case 93:
	        case 94:
	        case 100:
	        case 108:
	        case 109:
	        case 110:
	        case 122:
	        case 124:
	        case 130:
	        case 169:
	        case 183:
	        case 184:
	        case 192:
	        case 194:
	        case 205:
	        case 208:
	        case 209:
	        case 215:
	        case 236:
	        case 237:
	        case 239:
	        case 243:
	        case 244:
	        case 247:
	        case 258:
	        case 263:
	        case 366:
	        case 379:
	        case 384:
	        case 385:
	        case 386:
	        case 387:
	        case 396:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4544;
	            this.valueExprPrimary();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	listValueFunction() {
	    let localctx = new ListValueFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1126, GQLParser.RULE_listValueFunction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4547;
	        this.trimListFunction();
	        this.state = 4548;
	        this.elementsFunction();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	trimListFunction() {
	    let localctx = new TrimListFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1128, GQLParser.RULE_trimListFunction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4550;
	        this.match(GQLParser.TRIM);
	        this.state = 4551;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 4552;
	        this.listValueExpr();
	        this.state = 4553;
	        this.match(GQLParser.COMMA);
	        this.state = 4554;
	        this.numericValueExpr();
	        this.state = 4555;
	        this.match(GQLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementsFunction() {
	    let localctx = new ElementsFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1130, GQLParser.RULE_elementsFunction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4557;
	        this.match(GQLParser.ELEMENTS);
	        this.state = 4558;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 4559;
	        this.pathValueExpr();
	        this.state = 4560;
	        this.match(GQLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	listValueConstructor() {
	    let localctx = new ListValueConstructorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1132, GQLParser.RULE_listValueConstructor);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4562;
	        this.listValueConstructorByEnumeration();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	listValueConstructorByEnumeration() {
	    let localctx = new ListValueConstructorByEnumerationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1134, GQLParser.RULE_listValueConstructorByEnumeration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4564;
	        this.match(GQLParser.LEFT_BRACKET);
	        this.state = 4565;
	        this.listValueTypeName();
	        this.state = 4566;
	        this.match(GQLParser.RIGHT_BRACKET);
	        this.state = 4567;
	        this.match(GQLParser.LEFT_BRACKET);
	        this.state = 4568;
	        this.listElementList();
	        this.state = 4569;
	        this.match(GQLParser.RIGHT_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	listElementList() {
	    let localctx = new ListElementListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1136, GQLParser.RULE_listElementList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4571;
	        this.listElement();
	        this.state = 4576;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===34) {
	            this.state = 4572;
	            this.match(GQLParser.COMMA);
	            this.state = 4573;
	            this.listElement();
	            this.state = 4578;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	listElement() {
	    let localctx = new ListElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1138, GQLParser.RULE_listElement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4579;
	        this.valueExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	recordValueConstructor() {
	    let localctx = new RecordValueConstructorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1140, GQLParser.RULE_recordValueConstructor);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4582;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===215) {
	            this.state = 4581;
	            this.match(GQLParser.RECORD);
	        }

	        this.state = 4584;
	        this.fieldsSpec();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fieldsSpec() {
	    let localctx = new FieldsSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1142, GQLParser.RULE_fieldsSpec);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4586;
	        this.match(GQLParser.LEFT_BRACE);
	        this.state = 4588;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===56 || ((((_la - 386)) & ~0x1f) === 0 && ((1 << (_la - 386)) & 1027) !== 0)) {
	            this.state = 4587;
	            this.fieldList();
	        }

	        this.state = 4590;
	        this.match(GQLParser.RIGHT_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fieldList() {
	    let localctx = new FieldListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1144, GQLParser.RULE_fieldList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4592;
	        this.field();
	        this.state = 4597;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===34) {
	            this.state = 4593;
	            this.match(GQLParser.COMMA);
	            this.state = 4594;
	            this.field();
	            this.state = 4599;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	field() {
	    let localctx = new FieldContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1146, GQLParser.RULE_field);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4600;
	        this.fieldName();
	        this.state = 4601;
	        this.match(GQLParser.COLON);
	        this.state = 4602;
	        this.valueExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathValueExpr() {
	    let localctx = new PathValueExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1148, GQLParser.RULE_pathValueExpr);
	    try {
	        this.state = 4606;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,477,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4604;
	            this.pathValueConcatenation();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4605;
	            this.pathValuePrimary();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathValueConcatenation() {
	    let localctx = new PathValueConcatenationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1150, GQLParser.RULE_pathValueConcatenation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4608;
	        this.pathValuePrimary();
	        this.state = 4609;
	        this.match(GQLParser.CONCATENATION);
	        this.state = 4610;
	        this.pathValueExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathValuePrimary() {
	    let localctx = new PathValuePrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1152, GQLParser.RULE_pathValuePrimary);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4612;
	        this.valueExprPrimary();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathValueConstructor() {
	    let localctx = new PathValueConstructorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1154, GQLParser.RULE_pathValueConstructor);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4614;
	        this.pathValueConstructorByEnumeration();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathValueConstructorByEnumeration() {
	    let localctx = new PathValueConstructorByEnumerationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1156, GQLParser.RULE_pathValueConstructorByEnumeration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4616;
	        this.match(GQLParser.PATH);
	        this.state = 4617;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 4618;
	        this.pathElementList();
	        this.state = 4619;
	        this.match(GQLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathElementList() {
	    let localctx = new PathElementListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1158, GQLParser.RULE_pathElementList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4621;
	        this.pathElementListStart();
	        this.state = 4623;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===34) {
	            this.state = 4622;
	            this.pathElementListStep();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathElementListStart() {
	    let localctx = new PathElementListStartContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1160, GQLParser.RULE_pathElementListStart);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4625;
	        this.nodeRefValueExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathElementListStep() {
	    let localctx = new PathElementListStepContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1162, GQLParser.RULE_pathElementListStep);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4627;
	        this.match(GQLParser.COMMA);
	        this.state = 4628;
	        this.edgeRefValueExpr();
	        this.state = 4629;
	        this.match(GQLParser.COMMA);
	        this.state = 4630;
	        this.nodeRefValueExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertyRef() {
	    let localctx = new PropertyRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1164, GQLParser.RULE_propertyRef);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4632;
	        this.propertySource();
	        this.state = 4633;
	        this.match(GQLParser.PERIOD);
	        this.state = 4634;
	        this.propertyName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertySource() {
	    let localctx = new PropertySourceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1166, GQLParser.RULE_propertySource);
	    try {
	        this.state = 4639;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,479,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4636;
	            this.nodeRefValueExpr();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4637;
	            this.edgeRefValueExpr();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4638;
	            this.recordValueExpr();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	valueQueryExpr() {
	    let localctx = new ValueQueryExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1168, GQLParser.RULE_valueQueryExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4641;
	        this.match(GQLParser.VALUE);
	        this.state = 4642;
	        this.nestedQuerySpec();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	caseExpr() {
	    let localctx = new CaseExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1170, GQLParser.RULE_caseExpr);
	    try {
	        this.state = 4646;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 93:
	        case 194:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4644;
	            this.caseAbbreviation();
	            break;
	        case 85:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4645;
	            this.caseSpecification();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	caseAbbreviation() {
	    let localctx = new CaseAbbreviationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1172, GQLParser.RULE_caseAbbreviation);
	    var _la = 0;
	    try {
	        this.state = 4667;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 194:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4648;
	            this.match(GQLParser.NULLIF);
	            this.state = 4649;
	            this.match(GQLParser.LEFT_PAREN);
	            this.state = 4650;
	            this.valueExpr();
	            this.state = 4651;
	            this.match(GQLParser.COMMA);
	            this.state = 4652;
	            this.valueExpr();
	            this.state = 4653;
	            this.match(GQLParser.RIGHT_PAREN);
	            break;
	        case 93:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4655;
	            this.match(GQLParser.COALESCE);
	            this.state = 4656;
	            this.match(GQLParser.LEFT_PAREN);
	            this.state = 4657;
	            this.valueExpr();
	            this.state = 4662;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===34) {
	                this.state = 4658;
	                this.match(GQLParser.COMMA);
	                this.state = 4659;
	                this.valueExpr();
	                this.state = 4664;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 4665;
	            this.match(GQLParser.RIGHT_PAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	caseSpecification() {
	    let localctx = new CaseSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1174, GQLParser.RULE_caseSpecification);
	    try {
	        this.state = 4671;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,483,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4669;
	            this.simpleCase();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4670;
	            this.searchedCase();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleCase() {
	    let localctx = new SimpleCaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1176, GQLParser.RULE_simpleCase);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4673;
	        this.match(GQLParser.CASE);
	        this.state = 4674;
	        this.caseOperand();
	        this.state = 4675;
	        this.simpleWhenClause();
	        this.state = 4677;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===125) {
	            this.state = 4676;
	            this.elseClause();
	        }

	        this.state = 4679;
	        this.match(GQLParser.END);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	searchedCase() {
	    let localctx = new SearchedCaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1178, GQLParser.RULE_searchedCase);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4681;
	        this.match(GQLParser.CASE);
	        this.state = 4682;
	        this.searchedWhenClause();
	        this.state = 4684;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===125) {
	            this.state = 4683;
	            this.elseClause();
	        }

	        this.state = 4686;
	        this.match(GQLParser.END);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleWhenClause() {
	    let localctx = new SimpleWhenClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1180, GQLParser.RULE_simpleWhenClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4688;
	        this.match(GQLParser.WHEN);
	        this.state = 4689;
	        this.whenOperandList();
	        this.state = 4690;
	        this.match(GQLParser.THEN);
	        this.state = 4691;
	        this.result();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	searchedWhenClause() {
	    let localctx = new SearchedWhenClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1182, GQLParser.RULE_searchedWhenClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4693;
	        this.match(GQLParser.WHEN);
	        this.state = 4694;
	        this.searchCondition();
	        this.state = 4695;
	        this.match(GQLParser.THEN);
	        this.state = 4696;
	        this.result();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elseClause() {
	    let localctx = new ElseClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1184, GQLParser.RULE_elseClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4698;
	        this.match(GQLParser.ELSE);
	        this.state = 4699;
	        this.result();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	caseOperand() {
	    let localctx = new CaseOperandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1186, GQLParser.RULE_caseOperand);
	    try {
	        this.state = 4703;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,486,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4701;
	            this.nonParenthesizedValueExprPrimary();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4702;
	            this.elementVarRef();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	whenOperandList() {
	    let localctx = new WhenOperandListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1188, GQLParser.RULE_whenOperandList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4705;
	        this.whenOperand();
	        this.state = 4710;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===34) {
	            this.state = 4706;
	            this.match(GQLParser.COMMA);
	            this.state = 4707;
	            this.whenOperand();
	            this.state = 4712;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	whenOperand() {
	    let localctx = new WhenOperandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1190, GQLParser.RULE_whenOperand);
	    try {
	        this.state = 4721;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,488,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4713;
	            this.nonParenthesizedValueExprPrimary();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4714;
	            this.comparisonPredicatePart2();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4715;
	            this.nullPredicatePart2();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4716;
	            this.valueTypePredicatePart2();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 4717;
	            this.directedPredicatePart2();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 4718;
	            this.labeledPredicatePart2();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 4719;
	            this.sourcePredicatePart2();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 4720;
	            this.destinationPredicatePart2();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	result() {
	    let localctx = new ResultContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1192, GQLParser.RULE_result);
	    try {
	        this.state = 4725;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,489,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4723;
	            this.resultExpr();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4724;
	            this.match(GQLParser.NULL);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resultExpr() {
	    let localctx = new ResultExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1194, GQLParser.RULE_resultExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4727;
	        this.valueExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	castSpec() {
	    let localctx = new CastSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1196, GQLParser.RULE_castSpec);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4729;
	        this.match(GQLParser.CAST);
	        this.state = 4730;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 4731;
	        this.castOperand();
	        this.state = 4732;
	        this.match(GQLParser.AS);
	        this.state = 4733;
	        this.castTarget();
	        this.state = 4734;
	        this.match(GQLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	castOperand() {
	    let localctx = new CastOperandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1198, GQLParser.RULE_castOperand);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4736;
	        this.valueExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	castTarget() {
	    let localctx = new CastTargetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1200, GQLParser.RULE_castTarget);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4738;
	        this.valueType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementIdFunction() {
	    let localctx = new ElementIdFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1202, GQLParser.RULE_elementIdFunction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4740;
	        this.match(GQLParser.ELEMENT_ID);
	        this.state = 4741;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 4742;
	        this.elementVarRef();
	        this.state = 4743;
	        this.match(GQLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	letValueExpr() {
	    let localctx = new LetValueExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1204, GQLParser.RULE_letValueExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4745;
	        this.match(GQLParser.LET);
	        this.state = 4746;
	        this.letVarDefList();
	        this.state = 4747;
	        this.match(GQLParser.IN);
	        this.state = 4748;
	        this.valueExpr();
	        this.state = 4749;
	        this.match(GQLParser.END);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	literal() {
	    let localctx = new LiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1206, GQLParser.RULE_literal);
	    try {
	        this.state = 4753;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 367:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4751;
	            this.match(GQLParser.SIGNED_NUMERIC_LITERAL);
	            break;
	        case 40:
	        case 42:
	        case 56:
	        case 109:
	        case 110:
	        case 122:
	        case 130:
	        case 192:
	        case 215:
	        case 243:
	        case 244:
	        case 247:
	        case 258:
	        case 379:
	        case 384:
	        case 385:
	        case 386:
	        case 387:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4752;
	            this.generalLiteral();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	generalLiteral() {
	    let localctx = new GeneralLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1208, GQLParser.RULE_generalLiteral);
	    try {
	        this.state = 4758;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 56:
	        case 109:
	        case 110:
	        case 122:
	        case 130:
	        case 192:
	        case 243:
	        case 244:
	        case 247:
	        case 258:
	        case 379:
	        case 384:
	        case 385:
	        case 386:
	        case 387:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4755;
	            this.predefinedTypeLiteral();
	            break;
	        case 42:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4756;
	            this.listLiteral();
	            break;
	        case 40:
	        case 215:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4757;
	            this.recordLiteral();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	predefinedTypeLiteral() {
	    let localctx = new PredefinedTypeLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1210, GQLParser.RULE_predefinedTypeLiteral);
	    try {
	        this.state = 4766;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 130:
	        case 247:
	        case 258:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4760;
	            this.booleanLiteral();
	            break;
	        case 56:
	        case 385:
	        case 386:
	        case 387:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4761;
	            this.characterStringLiteral();
	            break;
	        case 384:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4762;
	            this.match(GQLParser.BYTE_STRING_LITERAL);
	            break;
	        case 109:
	        case 110:
	        case 243:
	        case 244:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4763;
	            this.temporalLiteral();
	            break;
	        case 122:
	        case 379:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 4764;
	            this.durationLiteral();
	            break;
	        case 192:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 4765;
	            this.nullLiteral();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unsignedLiteral() {
	    let localctx = new UnsignedLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1212, GQLParser.RULE_unsignedLiteral);
	    try {
	        this.state = 4770;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 366:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4768;
	            this.match(GQLParser.UNSIGNED_NUMERIC_LITERAL);
	            break;
	        case 40:
	        case 42:
	        case 56:
	        case 109:
	        case 110:
	        case 122:
	        case 130:
	        case 192:
	        case 215:
	        case 243:
	        case 244:
	        case 247:
	        case 258:
	        case 379:
	        case 384:
	        case 385:
	        case 386:
	        case 387:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4769;
	            this.generalLiteral();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	booleanLiteral() {
	    let localctx = new BooleanLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1214, GQLParser.RULE_booleanLiteral);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4772;
	        _la = this._input.LA(1);
	        if(!(_la===130 || _la===247 || _la===258)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	characterStringLiteral() {
	    let localctx = new CharacterStringLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1216, GQLParser.RULE_characterStringLiteral);
	    try {
	        this.state = 4777;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,494,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4774;
	            this.singleQuotedCharacterSequence();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4775;
	            this.doubleQuotedCharacterSequence();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4776;
	            this.accentQuotedCharacterSequence();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unbrokenCharacterStringLiteral() {
	    let localctx = new UnbrokenCharacterStringLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1218, GQLParser.RULE_unbrokenCharacterStringLiteral);
	    var _la = 0;
	    try {
	        this.state = 4787;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,497,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4780;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===56) {
	                this.state = 4779;
	                this.noEscape();
	            }

	            this.state = 4782;
	            this.unbrokenSingleQuotedCharacterSequence();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4784;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===56) {
	                this.state = 4783;
	                this.noEscape();
	            }

	            this.state = 4786;
	            this.unbrokenDoubleQuotedCharacterSequence();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	singleQuotedCharacterSequence() {
	    let localctx = new SingleQuotedCharacterSequenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1220, GQLParser.RULE_singleQuotedCharacterSequence);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4790;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===56) {
	            this.state = 4789;
	            this.noEscape();
	        }

	        this.state = 4792;
	        this.unbrokenSingleQuotedCharacterSequence();
	        this.state = 4797;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,499,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 4793;
	                this.match(GQLParser.VERTICAL_BAR);
	                this.state = 4794;
	                this.unbrokenSingleQuotedCharacterSequence(); 
	            }
	            this.state = 4799;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,499,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	doubleQuotedCharacterSequence() {
	    let localctx = new DoubleQuotedCharacterSequenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1222, GQLParser.RULE_doubleQuotedCharacterSequence);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4801;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===56) {
	            this.state = 4800;
	            this.noEscape();
	        }

	        this.state = 4803;
	        this.unbrokenDoubleQuotedCharacterSequence();
	        this.state = 4808;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,501,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 4804;
	                this.match(GQLParser.VERTICAL_BAR);
	                this.state = 4805;
	                this.unbrokenDoubleQuotedCharacterSequence(); 
	            }
	            this.state = 4810;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,501,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	accentQuotedCharacterSequence() {
	    let localctx = new AccentQuotedCharacterSequenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1224, GQLParser.RULE_accentQuotedCharacterSequence);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4812;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===56) {
	            this.state = 4811;
	            this.noEscape();
	        }

	        this.state = 4814;
	        this.unbrokenAccentQuotedCharacterSequence();
	        this.state = 4819;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,503,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 4815;
	                this.match(GQLParser.VERTICAL_BAR);
	                this.state = 4816;
	                this.unbrokenAccentQuotedCharacterSequence(); 
	            }
	            this.state = 4821;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,503,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	noEscape() {
	    let localctx = new NoEscapeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1226, GQLParser.RULE_noEscape);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4822;
	        this.match(GQLParser.COMMERCIAL_AT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unbrokenSingleQuotedCharacterSequence() {
	    let localctx = new UnbrokenSingleQuotedCharacterSequenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1228, GQLParser.RULE_unbrokenSingleQuotedCharacterSequence);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4824;
	        this.match(GQLParser.SINGLE_QUOTED_STRING_LITERAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unbrokenDoubleQuotedCharacterSequence() {
	    let localctx = new UnbrokenDoubleQuotedCharacterSequenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1230, GQLParser.RULE_unbrokenDoubleQuotedCharacterSequence);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4826;
	        this.match(GQLParser.DOUBLE_QUOTED_STRING_LITERAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unbrokenAccentQuotedCharacterSequence() {
	    let localctx = new UnbrokenAccentQuotedCharacterSequenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1232, GQLParser.RULE_unbrokenAccentQuotedCharacterSequence);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4828;
	        this.match(GQLParser.ACCENT_QUOTED_STRING_LITERAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	temporalLiteral() {
	    let localctx = new TemporalLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1234, GQLParser.RULE_temporalLiteral);
	    try {
	        this.state = 4834;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,504,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4830;
	            this.dateLiteral();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4831;
	            this.timeLiteral();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4832;
	            this.dateTimeLiteral();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4833;
	            this.sqlDateTimeLiteral();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dateLiteral() {
	    let localctx = new DateLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1236, GQLParser.RULE_dateLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4836;
	        this.match(GQLParser.DATE);
	        this.state = 4837;
	        this.unbrokenCharacterStringLiteral();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	timeLiteral() {
	    let localctx = new TimeLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1238, GQLParser.RULE_timeLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4839;
	        this.match(GQLParser.TIME);
	        this.state = 4840;
	        this.unbrokenCharacterStringLiteral();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dateTimeLiteral() {
	    let localctx = new DateTimeLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1240, GQLParser.RULE_dateTimeLiteral);
	    try {
	        this.state = 4846;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 110:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4842;
	            this.match(GQLParser.DATETIME);
	            this.state = 4843;
	            this.unbrokenCharacterStringLiteral();
	            break;
	        case 244:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4844;
	            this.match(GQLParser.TIMESTAMP);
	            this.state = 4845;
	            this.unbrokenCharacterStringLiteral();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dateString() {
	    let localctx = new DateStringContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1242, GQLParser.RULE_dateString);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4848;
	        this.unbrokenCharacterStringLiteral();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	timeString() {
	    let localctx = new TimeStringContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1244, GQLParser.RULE_timeString);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4850;
	        this.unbrokenCharacterStringLiteral();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dateTimeString() {
	    let localctx = new DateTimeStringContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1246, GQLParser.RULE_dateTimeString);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4852;
	        this.unbrokenCharacterStringLiteral();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sqlDateTimeLiteral() {
	    let localctx = new SqlDateTimeLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1248, GQLParser.RULE_sqlDateTimeLiteral);
	    try {
	        this.state = 4896;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 109:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4854;
	            this.match(GQLParser.DATE);
	            this.state = 4855;
	            this.match(GQLParser.QUOTE);
	            this.state = 4856;
	            this.match(GQLParser.FOUR_DIGIT);
	            this.state = 4857;
	            this.match(GQLParser.MINUS);
	            this.state = 4858;
	            this.match(GQLParser.DOUBLE_DIGIT);
	            this.state = 4859;
	            this.match(GQLParser.MINUS);
	            this.state = 4860;
	            this.match(GQLParser.DOUBLE_DIGIT);
	            this.state = 4861;
	            this.match(GQLParser.QUOTE);
	            break;
	        case 243:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4862;
	            this.match(GQLParser.TIME);
	            this.state = 4863;
	            this.match(GQLParser.QUOTE);
	            this.state = 4864;
	            this.match(GQLParser.DOUBLE_DIGIT);
	            this.state = 4865;
	            this.match(GQLParser.COLON);
	            this.state = 4866;
	            this.match(GQLParser.DOUBLE_DIGIT);
	            this.state = 4867;
	            this.match(GQLParser.COLON);
	            this.state = 4868;
	            this.match(GQLParser.DOUBLE_DIGIT);
	            this.state = 4869;
	            this.match(GQLParser.QUOTE);
	            break;
	        case 244:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4870;
	            this.match(GQLParser.TIMESTAMP);
	            this.state = 4871;
	            this.match(GQLParser.QUOTE);
	            this.state = 4872;
	            this.match(GQLParser.FOUR_DIGIT);
	            this.state = 4873;
	            this.match(GQLParser.MINUS);
	            this.state = 4874;
	            this.match(GQLParser.DOUBLE_DIGIT);
	            this.state = 4875;
	            this.match(GQLParser.MINUS);
	            this.state = 4876;
	            this.match(GQLParser.DOUBLE_DIGIT);
	            this.state = 4877;
	            this.match(GQLParser.DOUBLE_DIGIT);
	            this.state = 4878;
	            this.match(GQLParser.COLON);
	            this.state = 4879;
	            this.match(GQLParser.DOUBLE_DIGIT);
	            this.state = 4880;
	            this.match(GQLParser.COLON);
	            this.state = 4881;
	            this.match(GQLParser.DOUBLE_DIGIT);
	            this.state = 4882;
	            this.match(GQLParser.QUOTE);
	            break;
	        case 110:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4883;
	            this.match(GQLParser.DATETIME);
	            this.state = 4884;
	            this.match(GQLParser.QUOTE);
	            this.state = 4885;
	            this.match(GQLParser.FOUR_DIGIT);
	            this.state = 4886;
	            this.match(GQLParser.MINUS);
	            this.state = 4887;
	            this.match(GQLParser.DOUBLE_DIGIT);
	            this.state = 4888;
	            this.match(GQLParser.MINUS);
	            this.state = 4889;
	            this.match(GQLParser.DOUBLE_DIGIT);
	            this.state = 4890;
	            this.match(GQLParser.DOUBLE_DIGIT);
	            this.state = 4891;
	            this.match(GQLParser.COLON);
	            this.state = 4892;
	            this.match(GQLParser.DOUBLE_DIGIT);
	            this.state = 4893;
	            this.match(GQLParser.COLON);
	            this.state = 4894;
	            this.match(GQLParser.DOUBLE_DIGIT);
	            this.state = 4895;
	            this.match(GQLParser.QUOTE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	durationLiteral() {
	    let localctx = new DurationLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1250, GQLParser.RULE_durationLiteral);
	    try {
	        this.state = 4901;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 122:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4898;
	            this.match(GQLParser.DURATION);
	            this.state = 4899;
	            this.durationString();
	            break;
	        case 379:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4900;
	            this.sqlIntervalLiteral();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	durationString() {
	    let localctx = new DurationStringContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1252, GQLParser.RULE_durationString);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4903;
	        this.unbrokenCharacterStringLiteral();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sqlIntervalLiteral() {
	    let localctx = new SqlIntervalLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1254, GQLParser.RULE_sqlIntervalLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4905;
	        this.match(GQLParser.UNSIGNED_INT);
	        this.state = 4906;
	        this.sqlIntervalType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sqlIntervalType() {
	    let localctx = new SqlIntervalTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1256, GQLParser.RULE_sqlIntervalType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4908;
	        _la = this._input.LA(1);
	        if(!(((((_la - 360)) & ~0x1f) === 0 && ((1 << (_la - 360)) & 15) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nullLiteral() {
	    let localctx = new NullLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1258, GQLParser.RULE_nullLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4910;
	        this.match(GQLParser.NULL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	listLiteral() {
	    let localctx = new ListLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1260, GQLParser.RULE_listLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4912;
	        this.listValueConstructorByEnumeration();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	recordLiteral() {
	    let localctx = new RecordLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1262, GQLParser.RULE_recordLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4914;
	        this.recordValueConstructor();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	objectName() {
	    let localctx = new ObjectNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1264, GQLParser.RULE_objectName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4916;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	objectNameOrBindingVar() {
	    let localctx = new ObjectNameOrBindingVarContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1266, GQLParser.RULE_objectNameOrBindingVar);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4918;
	        this.match(GQLParser.REGULAR_IDENTIFIER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	directoryName() {
	    let localctx = new DirectoryNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1268, GQLParser.RULE_directoryName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4920;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	schemaName() {
	    let localctx = new SchemaNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1270, GQLParser.RULE_schemaName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4922;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphName() {
	    let localctx = new GraphNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1272, GQLParser.RULE_graphName);
	    try {
	        this.state = 4926;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 396:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4924;
	            this.match(GQLParser.REGULAR_IDENTIFIER);
	            break;
	        case 56:
	        case 386:
	        case 387:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4925;
	            this.delimitedGraphName();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	delimitedGraphName() {
	    let localctx = new DelimitedGraphNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1274, GQLParser.RULE_delimitedGraphName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4928;
	        this.delimitedIdentifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphTypeName() {
	    let localctx = new GraphTypeNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1276, GQLParser.RULE_graphTypeName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4930;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementTypeName() {
	    let localctx = new ElementTypeNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1278, GQLParser.RULE_elementTypeName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4932;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bindingTableName() {
	    let localctx = new BindingTableNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1280, GQLParser.RULE_bindingTableName);
	    try {
	        this.state = 4936;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 396:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4934;
	            this.match(GQLParser.REGULAR_IDENTIFIER);
	            break;
	        case 56:
	        case 386:
	        case 387:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4935;
	            this.delimitedBindingTableName();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	delimitedBindingTableName() {
	    let localctx = new DelimitedBindingTableNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1282, GQLParser.RULE_delimitedBindingTableName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4938;
	        this.delimitedIdentifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedureName() {
	    let localctx = new ProcedureNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1284, GQLParser.RULE_procedureName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4940;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	labelName() {
	    let localctx = new LabelNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1286, GQLParser.RULE_labelName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4942;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertyName() {
	    let localctx = new PropertyNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1288, GQLParser.RULE_propertyName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4944;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fieldName() {
	    let localctx = new FieldNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1290, GQLParser.RULE_fieldName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4946;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parameterName() {
	    let localctx = new ParameterNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1292, GQLParser.RULE_parameterName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4948;
	        this.match(GQLParser.DOLLAR);
	        this.state = 4949;
	        this.separatedIdentifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	var_() {
	    let localctx = new VarContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1294, GQLParser.RULE_var);
	    try {
	        this.state = 4956;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,510,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4951;
	            this.graphVar();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4952;
	            this.graphPatternVar();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4953;
	            this.bindingTableVar();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4954;
	            this.valueVar();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 4955;
	            this.bindingVar();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphVar() {
	    let localctx = new GraphVarContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1296, GQLParser.RULE_graphVar);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4958;
	        this.bindingVar();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphPatternVar() {
	    let localctx = new GraphPatternVarContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1298, GQLParser.RULE_graphPatternVar);
	    try {
	        this.state = 4962;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,511,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4960;
	            this.elementVar();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4961;
	            this.pathOrSubpathVar();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathOrSubpathVar() {
	    let localctx = new PathOrSubpathVarContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1300, GQLParser.RULE_pathOrSubpathVar);
	    try {
	        this.state = 4966;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,512,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4964;
	            this.pathVar();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4965;
	            this.subpathVar();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementVar() {
	    let localctx = new ElementVarContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1302, GQLParser.RULE_elementVar);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4968;
	        this.bindingVar();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathVar() {
	    let localctx = new PathVarContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1304, GQLParser.RULE_pathVar);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4970;
	        this.bindingVar();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subpathVar() {
	    let localctx = new SubpathVarContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1306, GQLParser.RULE_subpathVar);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4972;
	        this.match(GQLParser.REGULAR_IDENTIFIER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bindingTableVar() {
	    let localctx = new BindingTableVarContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1308, GQLParser.RULE_bindingTableVar);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4974;
	        this.bindingVar();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	valueVar() {
	    let localctx = new ValueVarContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1310, GQLParser.RULE_valueVar);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4976;
	        this.bindingVar();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bindingVar() {
	    let localctx = new BindingVarContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1312, GQLParser.RULE_bindingVar);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4978;
	        this.match(GQLParser.REGULAR_IDENTIFIER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	token() {
	    let localctx = new TokenContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1314, GQLParser.RULE_token);
	    try {
	        this.state = 4982;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 35:
	        case 58:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 183:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 211:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 245:
	        case 246:
	        case 247:
	        case 248:
	        case 249:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	        case 328:
	        case 329:
	        case 330:
	        case 331:
	        case 332:
	        case 333:
	        case 334:
	        case 335:
	        case 336:
	        case 337:
	        case 338:
	        case 339:
	        case 340:
	        case 341:
	        case 342:
	        case 343:
	        case 344:
	        case 345:
	        case 346:
	        case 347:
	        case 348:
	        case 349:
	        case 350:
	        case 351:
	        case 352:
	        case 353:
	        case 354:
	        case 355:
	        case 356:
	        case 357:
	        case 358:
	        case 359:
	        case 366:
	        case 384:
	        case 396:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4980;
	            this.nonDelimiterToken();
	            break;
	        case 1:
	        case 2:
	        case 3:
	        case 4:
	        case 5:
	        case 6:
	        case 7:
	        case 8:
	        case 9:
	        case 10:
	        case 11:
	        case 12:
	        case 13:
	        case 14:
	        case 15:
	        case 16:
	        case 17:
	        case 18:
	        case 19:
	        case 20:
	        case 21:
	        case 28:
	        case 33:
	        case 38:
	        case 39:
	        case 55:
	        case 56:
	        case 59:
	        case 385:
	        case 386:
	        case 387:
	        case 429:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4981;
	            this.delimiterToken();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nonDelimiterToken() {
	    let localctx = new NonDelimiterTokenContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1316, GQLParser.RULE_nonDelimiterToken);
	    try {
	        this.state = 4990;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 396:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4984;
	            this.match(GQLParser.REGULAR_IDENTIFIER);
	            break;
	        case 35:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4985;
	            this.parameterName();
	            break;
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 183:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 211:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 245:
	        case 246:
	        case 247:
	        case 248:
	        case 249:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	        case 328:
	        case 329:
	        case 330:
	        case 331:
	        case 332:
	        case 333:
	        case 334:
	        case 335:
	        case 336:
	        case 337:
	        case 338:
	        case 339:
	        case 340:
	        case 341:
	        case 342:
	        case 343:
	        case 344:
	        case 345:
	        case 346:
	        case 347:
	        case 348:
	        case 349:
	        case 350:
	        case 351:
	        case 352:
	        case 353:
	        case 354:
	        case 355:
	        case 356:
	        case 357:
	        case 358:
	        case 359:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4986;
	            this.keyWord();
	            break;
	        case 366:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4987;
	            this.match(GQLParser.UNSIGNED_NUMERIC_LITERAL);
	            break;
	        case 384:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 4988;
	            this.match(GQLParser.BYTE_STRING_LITERAL);
	            break;
	        case 58:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 4989;
	            this.match(GQLParser.MULTISET_ALTERNATION);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifier() {
	    let localctx = new IdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1318, GQLParser.RULE_identifier);
	    try {
	        this.state = 4994;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 396:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4992;
	            this.match(GQLParser.REGULAR_IDENTIFIER);
	            break;
	        case 56:
	        case 386:
	        case 387:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4993;
	            this.delimitedIdentifier();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	separatedIdentifier() {
	    let localctx = new SeparatedIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1320, GQLParser.RULE_separatedIdentifier);
	    try {
	        this.state = 4998;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 396:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4996;
	            this.match(GQLParser.REGULAR_IDENTIFIER);
	            break;
	        case 56:
	        case 386:
	        case 387:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4997;
	            this.delimitedIdentifier();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nonDelimitedIdentifier() {
	    let localctx = new NonDelimitedIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1322, GQLParser.RULE_nonDelimitedIdentifier);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5000;
	        _la = this._input.LA(1);
	        if(!(_la===396 || _la===397)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	delimitedIdentifier() {
	    let localctx = new DelimitedIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1324, GQLParser.RULE_delimitedIdentifier);
	    try {
	        this.state = 5004;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,517,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5002;
	            this.doubleQuotedCharacterSequence();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5003;
	            this.accentQuotedCharacterSequence();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keyWord() {
	    let localctx = new KeyWordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1326, GQLParser.RULE_keyWord);
	    try {
	        this.state = 5008;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	        case 159:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 173:
	        case 174:
	        case 175:
	        case 176:
	        case 177:
	        case 178:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 183:
	        case 184:
	        case 185:
	        case 186:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 195:
	        case 196:
	        case 197:
	        case 198:
	        case 199:
	        case 200:
	        case 201:
	        case 202:
	        case 203:
	        case 204:
	        case 205:
	        case 206:
	        case 207:
	        case 208:
	        case 209:
	        case 210:
	        case 211:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 216:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 224:
	        case 225:
	        case 226:
	        case 227:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 245:
	        case 246:
	        case 247:
	        case 248:
	        case 249:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5006;
	            this.reservedWord();
	            break;
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	        case 328:
	        case 329:
	        case 330:
	        case 331:
	        case 332:
	        case 333:
	        case 334:
	        case 335:
	        case 336:
	        case 337:
	        case 338:
	        case 339:
	        case 340:
	        case 341:
	        case 342:
	        case 343:
	        case 344:
	        case 345:
	        case 346:
	        case 347:
	        case 348:
	        case 349:
	        case 350:
	        case 351:
	        case 352:
	        case 353:
	        case 354:
	        case 355:
	        case 356:
	        case 357:
	        case 358:
	        case 359:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5007;
	            this.nonReservedWord();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	reservedWord() {
	    let localctx = new ReservedWordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1328, GQLParser.RULE_reservedWord);
	    try {
	        this.state = 5227;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5010;
	            this.preReservedWord();
	            break;
	        case 60:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5011;
	            this.match(GQLParser.ABS);
	            break;
	        case 61:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5012;
	            this.match(GQLParser.ACOS);
	            break;
	        case 62:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 5013;
	            this.match(GQLParser.ALL);
	            break;
	        case 63:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 5014;
	            this.match(GQLParser.ALL_DIFFERENT);
	            break;
	        case 64:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 5015;
	            this.match(GQLParser.AND);
	            break;
	        case 65:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 5016;
	            this.match(GQLParser.ANY);
	            break;
	        case 66:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 5017;
	            this.match(GQLParser.ARRAY);
	            break;
	        case 67:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 5018;
	            this.match(GQLParser.AS);
	            break;
	        case 68:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 5019;
	            this.match(GQLParser.ASC);
	            break;
	        case 69:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 5020;
	            this.match(GQLParser.ASCENDING);
	            break;
	        case 70:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 5021;
	            this.match(GQLParser.ASIN);
	            break;
	        case 71:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 5022;
	            this.match(GQLParser.AT);
	            break;
	        case 72:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 5023;
	            this.match(GQLParser.ATAN);
	            break;
	        case 73:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 5024;
	            this.match(GQLParser.AVG);
	            break;
	        case 74:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 5025;
	            this.match(GQLParser.BIG);
	            break;
	        case 75:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 5026;
	            this.match(GQLParser.BIGINT);
	            break;
	        case 76:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 5027;
	            this.match(GQLParser.BINARY);
	            break;
	        case 77:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 5028;
	            this.match(GQLParser.BOOL);
	            break;
	        case 78:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 5029;
	            this.match(GQLParser.BOOLEAN);
	            break;
	        case 79:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 5030;
	            this.match(GQLParser.BOTH);
	            break;
	        case 80:
	            this.enterOuterAlt(localctx, 22);
	            this.state = 5031;
	            this.match(GQLParser.BTRIM);
	            break;
	        case 81:
	            this.enterOuterAlt(localctx, 23);
	            this.state = 5032;
	            this.match(GQLParser.BY);
	            break;
	        case 82:
	            this.enterOuterAlt(localctx, 24);
	            this.state = 5033;
	            this.match(GQLParser.BYTE_LENGTH);
	            break;
	        case 83:
	            this.enterOuterAlt(localctx, 25);
	            this.state = 5034;
	            this.match(GQLParser.BYTES);
	            break;
	        case 84:
	            this.enterOuterAlt(localctx, 26);
	            this.state = 5035;
	            this.match(GQLParser.CALL);
	            break;
	        case 85:
	            this.enterOuterAlt(localctx, 27);
	            this.state = 5036;
	            this.match(GQLParser.CASE);
	            break;
	        case 86:
	            this.enterOuterAlt(localctx, 28);
	            this.state = 5037;
	            this.match(GQLParser.CAST);
	            break;
	        case 87:
	            this.enterOuterAlt(localctx, 29);
	            this.state = 5038;
	            this.match(GQLParser.CEIL);
	            break;
	        case 88:
	            this.enterOuterAlt(localctx, 30);
	            this.state = 5039;
	            this.match(GQLParser.CEILING);
	            break;
	        case 89:
	            this.enterOuterAlt(localctx, 31);
	            this.state = 5040;
	            this.match(GQLParser.CHAR_LENGTH);
	            break;
	        case 90:
	            this.enterOuterAlt(localctx, 32);
	            this.state = 5041;
	            this.match(GQLParser.CHARACTER_LENGTH);
	            break;
	        case 91:
	            this.enterOuterAlt(localctx, 33);
	            this.state = 5042;
	            this.match(GQLParser.CHARACTERISTICS);
	            break;
	        case 92:
	            this.enterOuterAlt(localctx, 34);
	            this.state = 5043;
	            this.match(GQLParser.CLOSE);
	            break;
	        case 93:
	            this.enterOuterAlt(localctx, 35);
	            this.state = 5044;
	            this.match(GQLParser.COALESCE);
	            break;
	        case 94:
	            this.enterOuterAlt(localctx, 36);
	            this.state = 5045;
	            this.match(GQLParser.COLLECT);
	            break;
	        case 95:
	            this.enterOuterAlt(localctx, 37);
	            this.state = 5046;
	            this.match(GQLParser.COMMIT);
	            break;
	        case 96:
	            this.enterOuterAlt(localctx, 38);
	            this.state = 5047;
	            this.match(GQLParser.COPY);
	            break;
	        case 97:
	            this.enterOuterAlt(localctx, 39);
	            this.state = 5048;
	            this.match(GQLParser.COS);
	            break;
	        case 98:
	            this.enterOuterAlt(localctx, 40);
	            this.state = 5049;
	            this.match(GQLParser.COSH);
	            break;
	        case 99:
	            this.enterOuterAlt(localctx, 41);
	            this.state = 5050;
	            this.match(GQLParser.COT);
	            break;
	        case 100:
	            this.enterOuterAlt(localctx, 42);
	            this.state = 5051;
	            this.match(GQLParser.COUNT);
	            break;
	        case 101:
	            this.enterOuterAlt(localctx, 43);
	            this.state = 5052;
	            this.match(GQLParser.CREATE);
	            break;
	        case 102:
	            this.enterOuterAlt(localctx, 44);
	            this.state = 5053;
	            this.match(GQLParser.CURRENT_DATE);
	            break;
	        case 103:
	            this.enterOuterAlt(localctx, 45);
	            this.state = 5054;
	            this.match(GQLParser.CURRENT_GRAPH);
	            break;
	        case 104:
	            this.enterOuterAlt(localctx, 46);
	            this.state = 5055;
	            this.match(GQLParser.CURRENT_PROPERTY_GRAPH);
	            break;
	        case 105:
	            this.enterOuterAlt(localctx, 47);
	            this.state = 5056;
	            this.match(GQLParser.CURRENT_SCHEMA);
	            break;
	        case 106:
	            this.enterOuterAlt(localctx, 48);
	            this.state = 5057;
	            this.match(GQLParser.CURRENT_TIME);
	            break;
	        case 107:
	            this.enterOuterAlt(localctx, 49);
	            this.state = 5058;
	            this.match(GQLParser.CURRENT_TIMESTAMP);
	            break;
	        case 108:
	            this.enterOuterAlt(localctx, 50);
	            this.state = 5059;
	            this.match(GQLParser.CURRENT_USER);
	            break;
	        case 109:
	            this.enterOuterAlt(localctx, 51);
	            this.state = 5060;
	            this.match(GQLParser.DATE);
	            break;
	        case 110:
	            this.enterOuterAlt(localctx, 52);
	            this.state = 5061;
	            this.match(GQLParser.DATETIME);
	            break;
	        case 111:
	            this.enterOuterAlt(localctx, 53);
	            this.state = 5062;
	            this.match(GQLParser.DAY);
	            break;
	        case 112:
	            this.enterOuterAlt(localctx, 54);
	            this.state = 5063;
	            this.match(GQLParser.DEC);
	            break;
	        case 113:
	            this.enterOuterAlt(localctx, 55);
	            this.state = 5064;
	            this.match(GQLParser.DECIMAL);
	            break;
	        case 114:
	            this.enterOuterAlt(localctx, 56);
	            this.state = 5065;
	            this.match(GQLParser.DEGREES);
	            break;
	        case 115:
	            this.enterOuterAlt(localctx, 57);
	            this.state = 5066;
	            this.match(GQLParser.DELETE);
	            break;
	        case 116:
	            this.enterOuterAlt(localctx, 58);
	            this.state = 5067;
	            this.match(GQLParser.DESC);
	            break;
	        case 117:
	            this.enterOuterAlt(localctx, 59);
	            this.state = 5068;
	            this.match(GQLParser.DESCENDING);
	            break;
	        case 118:
	            this.enterOuterAlt(localctx, 60);
	            this.state = 5069;
	            this.match(GQLParser.DETACH);
	            break;
	        case 119:
	            this.enterOuterAlt(localctx, 61);
	            this.state = 5070;
	            this.match(GQLParser.DISTINCT);
	            break;
	        case 120:
	            this.enterOuterAlt(localctx, 62);
	            this.state = 5071;
	            this.match(GQLParser.DOUBLE);
	            break;
	        case 121:
	            this.enterOuterAlt(localctx, 63);
	            this.state = 5072;
	            this.match(GQLParser.DROP);
	            break;
	        case 122:
	            this.enterOuterAlt(localctx, 64);
	            this.state = 5073;
	            this.match(GQLParser.DURATION);
	            break;
	        case 123:
	            this.enterOuterAlt(localctx, 65);
	            this.state = 5074;
	            this.match(GQLParser.DURATION_BETWEEN);
	            break;
	        case 124:
	            this.enterOuterAlt(localctx, 66);
	            this.state = 5075;
	            this.match(GQLParser.ELEMENT_ID);
	            break;
	        case 125:
	            this.enterOuterAlt(localctx, 67);
	            this.state = 5076;
	            this.match(GQLParser.ELSE);
	            break;
	        case 126:
	            this.enterOuterAlt(localctx, 68);
	            this.state = 5077;
	            this.match(GQLParser.END);
	            break;
	        case 127:
	            this.enterOuterAlt(localctx, 69);
	            this.state = 5078;
	            this.match(GQLParser.EXCEPT);
	            break;
	        case 128:
	            this.enterOuterAlt(localctx, 70);
	            this.state = 5079;
	            this.match(GQLParser.EXISTS);
	            break;
	        case 129:
	            this.enterOuterAlt(localctx, 71);
	            this.state = 5080;
	            this.match(GQLParser.EXP);
	            break;
	        case 130:
	            this.enterOuterAlt(localctx, 72);
	            this.state = 5081;
	            this.match(GQLParser.FALSE);
	            break;
	        case 131:
	            this.enterOuterAlt(localctx, 73);
	            this.state = 5082;
	            this.match(GQLParser.FILTER);
	            break;
	        case 132:
	            this.enterOuterAlt(localctx, 74);
	            this.state = 5083;
	            this.match(GQLParser.FINISH);
	            break;
	        case 133:
	            this.enterOuterAlt(localctx, 75);
	            this.state = 5084;
	            this.match(GQLParser.FLOAT);
	            break;
	        case 134:
	            this.enterOuterAlt(localctx, 76);
	            this.state = 5085;
	            this.match(GQLParser.FLOAT16);
	            break;
	        case 135:
	            this.enterOuterAlt(localctx, 77);
	            this.state = 5086;
	            this.match(GQLParser.FLOAT32);
	            break;
	        case 136:
	            this.enterOuterAlt(localctx, 78);
	            this.state = 5087;
	            this.match(GQLParser.FLOAT64);
	            break;
	        case 137:
	            this.enterOuterAlt(localctx, 79);
	            this.state = 5088;
	            this.match(GQLParser.FLOAT128);
	            break;
	        case 138:
	            this.enterOuterAlt(localctx, 80);
	            this.state = 5089;
	            this.match(GQLParser.FLOAT256);
	            break;
	        case 139:
	            this.enterOuterAlt(localctx, 81);
	            this.state = 5090;
	            this.match(GQLParser.FLOOR);
	            break;
	        case 140:
	            this.enterOuterAlt(localctx, 82);
	            this.state = 5091;
	            this.match(GQLParser.FOR);
	            break;
	        case 141:
	            this.enterOuterAlt(localctx, 83);
	            this.state = 5092;
	            this.match(GQLParser.FROM);
	            break;
	        case 142:
	            this.enterOuterAlt(localctx, 84);
	            this.state = 5093;
	            this.match(GQLParser.GROUP);
	            break;
	        case 143:
	            this.enterOuterAlt(localctx, 85);
	            this.state = 5094;
	            this.match(GQLParser.HAVING);
	            break;
	        case 144:
	            this.enterOuterAlt(localctx, 86);
	            this.state = 5095;
	            this.match(GQLParser.HOME_GRAPH);
	            break;
	        case 145:
	            this.enterOuterAlt(localctx, 87);
	            this.state = 5096;
	            this.match(GQLParser.HOME_PROPERTY_GRAPH);
	            break;
	        case 146:
	            this.enterOuterAlt(localctx, 88);
	            this.state = 5097;
	            this.match(GQLParser.HOME_SCHEMA);
	            break;
	        case 147:
	            this.enterOuterAlt(localctx, 89);
	            this.state = 5098;
	            this.match(GQLParser.HOUR);
	            break;
	        case 148:
	            this.enterOuterAlt(localctx, 90);
	            this.state = 5099;
	            this.match(GQLParser.IF);
	            break;
	        case 149:
	            this.enterOuterAlt(localctx, 91);
	            this.state = 5100;
	            this.match(GQLParser.IN);
	            break;
	        case 150:
	            this.enterOuterAlt(localctx, 92);
	            this.state = 5101;
	            this.match(GQLParser.INSERT);
	            break;
	        case 151:
	            this.enterOuterAlt(localctx, 93);
	            this.state = 5102;
	            this.match(GQLParser.INT);
	            break;
	        case 152:
	            this.enterOuterAlt(localctx, 94);
	            this.state = 5103;
	            this.match(GQLParser.INTEGER);
	            break;
	        case 153:
	            this.enterOuterAlt(localctx, 95);
	            this.state = 5104;
	            this.match(GQLParser.INT8);
	            break;
	        case 154:
	            this.enterOuterAlt(localctx, 96);
	            this.state = 5105;
	            this.match(GQLParser.INTEGER8);
	            break;
	        case 155:
	            this.enterOuterAlt(localctx, 97);
	            this.state = 5106;
	            this.match(GQLParser.INT16);
	            break;
	        case 156:
	            this.enterOuterAlt(localctx, 98);
	            this.state = 5107;
	            this.match(GQLParser.INTEGER16);
	            break;
	        case 157:
	            this.enterOuterAlt(localctx, 99);
	            this.state = 5108;
	            this.match(GQLParser.INT32);
	            break;
	        case 158:
	            this.enterOuterAlt(localctx, 100);
	            this.state = 5109;
	            this.match(GQLParser.INTEGER32);
	            break;
	        case 159:
	            this.enterOuterAlt(localctx, 101);
	            this.state = 5110;
	            this.match(GQLParser.INT64);
	            break;
	        case 160:
	            this.enterOuterAlt(localctx, 102);
	            this.state = 5111;
	            this.match(GQLParser.INTEGER64);
	            break;
	        case 161:
	            this.enterOuterAlt(localctx, 103);
	            this.state = 5112;
	            this.match(GQLParser.INT128);
	            break;
	        case 162:
	            this.enterOuterAlt(localctx, 104);
	            this.state = 5113;
	            this.match(GQLParser.INTEGER128);
	            break;
	        case 163:
	            this.enterOuterAlt(localctx, 105);
	            this.state = 5114;
	            this.match(GQLParser.INT256);
	            break;
	        case 164:
	            this.enterOuterAlt(localctx, 106);
	            this.state = 5115;
	            this.match(GQLParser.INTEGER256);
	            break;
	        case 165:
	            this.enterOuterAlt(localctx, 107);
	            this.state = 5116;
	            this.match(GQLParser.INTERSECT);
	            break;
	        case 166:
	            this.enterOuterAlt(localctx, 108);
	            this.state = 5117;
	            this.match(GQLParser.INTERVAL);
	            break;
	        case 167:
	            this.enterOuterAlt(localctx, 109);
	            this.state = 5118;
	            this.match(GQLParser.IS);
	            break;
	        case 168:
	            this.enterOuterAlt(localctx, 110);
	            this.state = 5119;
	            this.match(GQLParser.LEADING);
	            break;
	        case 169:
	            this.enterOuterAlt(localctx, 111);
	            this.state = 5120;
	            this.match(GQLParser.LET);
	            break;
	        case 170:
	            this.enterOuterAlt(localctx, 112);
	            this.state = 5121;
	            this.match(GQLParser.LIKE);
	            break;
	        case 171:
	            this.enterOuterAlt(localctx, 113);
	            this.state = 5122;
	            this.match(GQLParser.LIMIT);
	            break;
	        case 172:
	            this.enterOuterAlt(localctx, 114);
	            this.state = 5123;
	            this.match(GQLParser.LIST);
	            break;
	        case 173:
	            this.enterOuterAlt(localctx, 115);
	            this.state = 5124;
	            this.match(GQLParser.LN);
	            break;
	        case 174:
	            this.enterOuterAlt(localctx, 116);
	            this.state = 5125;
	            this.match(GQLParser.LOCAL);
	            break;
	        case 175:
	            this.enterOuterAlt(localctx, 117);
	            this.state = 5126;
	            this.match(GQLParser.LOCAL_DATETIME);
	            break;
	        case 176:
	            this.enterOuterAlt(localctx, 118);
	            this.state = 5127;
	            this.match(GQLParser.LOCAL_TIME);
	            break;
	        case 177:
	            this.enterOuterAlt(localctx, 119);
	            this.state = 5128;
	            this.match(GQLParser.LOCAL_TIMESTAMP);
	            break;
	        case 178:
	            this.enterOuterAlt(localctx, 120);
	            this.state = 5129;
	            this.match(GQLParser.LOG);
	            break;
	        case 179:
	            this.enterOuterAlt(localctx, 121);
	            this.state = 5130;
	            this.match(GQLParser.LOG10);
	            break;
	        case 180:
	            this.enterOuterAlt(localctx, 122);
	            this.state = 5131;
	            this.match(GQLParser.LOWER);
	            break;
	        case 181:
	            this.enterOuterAlt(localctx, 123);
	            this.state = 5132;
	            this.match(GQLParser.LTRIM);
	            break;
	        case 182:
	            this.enterOuterAlt(localctx, 124);
	            this.state = 5133;
	            this.match(GQLParser.MATCH);
	            break;
	        case 183:
	            this.enterOuterAlt(localctx, 125);
	            this.state = 5134;
	            this.match(GQLParser.MAX);
	            break;
	        case 184:
	            this.enterOuterAlt(localctx, 126);
	            this.state = 5135;
	            this.match(GQLParser.MIN);
	            break;
	        case 185:
	            this.enterOuterAlt(localctx, 127);
	            this.state = 5136;
	            this.match(GQLParser.MINUTE);
	            break;
	        case 186:
	            this.enterOuterAlt(localctx, 128);
	            this.state = 5137;
	            this.match(GQLParser.MOD);
	            break;
	        case 187:
	            this.enterOuterAlt(localctx, 129);
	            this.state = 5138;
	            this.match(GQLParser.MONTH);
	            break;
	        case 188:
	            this.enterOuterAlt(localctx, 130);
	            this.state = 5139;
	            this.match(GQLParser.NEXT);
	            break;
	        case 189:
	            this.enterOuterAlt(localctx, 131);
	            this.state = 5140;
	            this.match(GQLParser.NODETACH);
	            break;
	        case 190:
	            this.enterOuterAlt(localctx, 132);
	            this.state = 5141;
	            this.match(GQLParser.NORMALIZE);
	            break;
	        case 191:
	            this.enterOuterAlt(localctx, 133);
	            this.state = 5142;
	            this.match(GQLParser.NOT);
	            break;
	        case 192:
	            this.enterOuterAlt(localctx, 134);
	            this.state = 5143;
	            this.match(GQLParser.NULL);
	            break;
	        case 193:
	            this.enterOuterAlt(localctx, 135);
	            this.state = 5144;
	            this.match(GQLParser.NULLS);
	            break;
	        case 194:
	            this.enterOuterAlt(localctx, 136);
	            this.state = 5145;
	            this.match(GQLParser.NULLIF);
	            break;
	        case 195:
	            this.enterOuterAlt(localctx, 137);
	            this.state = 5146;
	            this.match(GQLParser.OCTET_LENGTH);
	            break;
	        case 196:
	            this.enterOuterAlt(localctx, 138);
	            this.state = 5147;
	            this.match(GQLParser.OF);
	            break;
	        case 197:
	            this.enterOuterAlt(localctx, 139);
	            this.state = 5148;
	            this.match(GQLParser.OFFSET);
	            break;
	        case 198:
	            this.enterOuterAlt(localctx, 140);
	            this.state = 5149;
	            this.match(GQLParser.OPEN);
	            break;
	        case 199:
	            this.enterOuterAlt(localctx, 141);
	            this.state = 5150;
	            this.match(GQLParser.OPTIONAL);
	            break;
	        case 200:
	            this.enterOuterAlt(localctx, 142);
	            this.state = 5151;
	            this.match(GQLParser.OR);
	            break;
	        case 201:
	            this.enterOuterAlt(localctx, 143);
	            this.state = 5152;
	            this.match(GQLParser.ORDER);
	            break;
	        case 202:
	            this.enterOuterAlt(localctx, 144);
	            this.state = 5153;
	            this.match(GQLParser.OTHERWISE);
	            break;
	        case 203:
	            this.enterOuterAlt(localctx, 145);
	            this.state = 5154;
	            this.match(GQLParser.PARAMETER);
	            break;
	        case 204:
	            this.enterOuterAlt(localctx, 146);
	            this.state = 5155;
	            this.match(GQLParser.PARAMETERS);
	            break;
	        case 205:
	            this.enterOuterAlt(localctx, 147);
	            this.state = 5156;
	            this.match(GQLParser.PATH);
	            break;
	        case 206:
	            this.enterOuterAlt(localctx, 148);
	            this.state = 5157;
	            this.match(GQLParser.PATH_LENGTH);
	            break;
	        case 207:
	            this.enterOuterAlt(localctx, 149);
	            this.state = 5158;
	            this.match(GQLParser.PATHS);
	            break;
	        case 208:
	            this.enterOuterAlt(localctx, 150);
	            this.state = 5159;
	            this.match(GQLParser.PERCENTILE_CONT);
	            break;
	        case 209:
	            this.enterOuterAlt(localctx, 151);
	            this.state = 5160;
	            this.match(GQLParser.PERCENTILE_DISC);
	            break;
	        case 210:
	            this.enterOuterAlt(localctx, 152);
	            this.state = 5161;
	            this.match(GQLParser.POWER);
	            break;
	        case 211:
	            this.enterOuterAlt(localctx, 153);
	            this.state = 5162;
	            this.match(GQLParser.PRECISION);
	            break;
	        case 212:
	            this.enterOuterAlt(localctx, 154);
	            this.state = 5163;
	            this.match(GQLParser.PROPERTY_EXISTS);
	            break;
	        case 213:
	            this.enterOuterAlt(localctx, 155);
	            this.state = 5164;
	            this.match(GQLParser.RADIANS);
	            break;
	        case 214:
	            this.enterOuterAlt(localctx, 156);
	            this.state = 5165;
	            this.match(GQLParser.REAL);
	            break;
	        case 215:
	            this.enterOuterAlt(localctx, 157);
	            this.state = 5166;
	            this.match(GQLParser.RECORD);
	            break;
	        case 216:
	            this.enterOuterAlt(localctx, 158);
	            this.state = 5167;
	            this.match(GQLParser.REMOVE);
	            break;
	        case 217:
	            this.enterOuterAlt(localctx, 159);
	            this.state = 5168;
	            this.match(GQLParser.REPLACE);
	            break;
	        case 218:
	            this.enterOuterAlt(localctx, 160);
	            this.state = 5169;
	            this.match(GQLParser.RESET);
	            break;
	        case 219:
	            this.enterOuterAlt(localctx, 161);
	            this.state = 5170;
	            this.match(GQLParser.RETURN);
	            break;
	        case 220:
	            this.enterOuterAlt(localctx, 162);
	            this.state = 5171;
	            this.match(GQLParser.ROLLBACK);
	            break;
	        case 221:
	            this.enterOuterAlt(localctx, 163);
	            this.state = 5172;
	            this.match(GQLParser.RTRIM);
	            break;
	        case 222:
	            this.enterOuterAlt(localctx, 164);
	            this.state = 5173;
	            this.match(GQLParser.SAME);
	            break;
	        case 223:
	            this.enterOuterAlt(localctx, 165);
	            this.state = 5174;
	            this.match(GQLParser.SCHEMA);
	            break;
	        case 224:
	            this.enterOuterAlt(localctx, 166);
	            this.state = 5175;
	            this.match(GQLParser.SECOND);
	            break;
	        case 225:
	            this.enterOuterAlt(localctx, 167);
	            this.state = 5176;
	            this.match(GQLParser.SELECT);
	            break;
	        case 226:
	            this.enterOuterAlt(localctx, 168);
	            this.state = 5177;
	            this.match(GQLParser.SESSION);
	            break;
	        case 227:
	            this.enterOuterAlt(localctx, 169);
	            this.state = 5178;
	            this.match(GQLParser.SET);
	            break;
	        case 228:
	            this.enterOuterAlt(localctx, 170);
	            this.state = 5179;
	            this.match(GQLParser.SIGNED);
	            break;
	        case 229:
	            this.enterOuterAlt(localctx, 171);
	            this.state = 5180;
	            this.match(GQLParser.SIN);
	            break;
	        case 230:
	            this.enterOuterAlt(localctx, 172);
	            this.state = 5181;
	            this.match(GQLParser.SINH);
	            break;
	        case 231:
	            this.enterOuterAlt(localctx, 173);
	            this.state = 5182;
	            this.match(GQLParser.SKIP_);
	            break;
	        case 232:
	            this.enterOuterAlt(localctx, 174);
	            this.state = 5183;
	            this.match(GQLParser.SMALL);
	            break;
	        case 233:
	            this.enterOuterAlt(localctx, 175);
	            this.state = 5184;
	            this.match(GQLParser.SMALLINT);
	            break;
	        case 234:
	            this.enterOuterAlt(localctx, 176);
	            this.state = 5185;
	            this.match(GQLParser.SQRT);
	            break;
	        case 235:
	            this.enterOuterAlt(localctx, 177);
	            this.state = 5186;
	            this.match(GQLParser.START);
	            break;
	        case 236:
	            this.enterOuterAlt(localctx, 178);
	            this.state = 5187;
	            this.match(GQLParser.STDDEV_POP);
	            break;
	        case 237:
	            this.enterOuterAlt(localctx, 179);
	            this.state = 5188;
	            this.match(GQLParser.STDDEV_SAMP);
	            break;
	        case 238:
	            this.enterOuterAlt(localctx, 180);
	            this.state = 5189;
	            this.match(GQLParser.STRING);
	            break;
	        case 239:
	            this.enterOuterAlt(localctx, 181);
	            this.state = 5190;
	            this.match(GQLParser.SUM);
	            break;
	        case 240:
	            this.enterOuterAlt(localctx, 182);
	            this.state = 5191;
	            this.match(GQLParser.TAN);
	            break;
	        case 241:
	            this.enterOuterAlt(localctx, 183);
	            this.state = 5192;
	            this.match(GQLParser.TANH);
	            break;
	        case 242:
	            this.enterOuterAlt(localctx, 184);
	            this.state = 5193;
	            this.match(GQLParser.THEN);
	            break;
	        case 243:
	            this.enterOuterAlt(localctx, 185);
	            this.state = 5194;
	            this.match(GQLParser.TIME);
	            break;
	        case 244:
	            this.enterOuterAlt(localctx, 186);
	            this.state = 5195;
	            this.match(GQLParser.TIMESTAMP);
	            break;
	        case 245:
	            this.enterOuterAlt(localctx, 187);
	            this.state = 5196;
	            this.match(GQLParser.TRAILING);
	            break;
	        case 246:
	            this.enterOuterAlt(localctx, 188);
	            this.state = 5197;
	            this.match(GQLParser.TRIM);
	            break;
	        case 247:
	            this.enterOuterAlt(localctx, 189);
	            this.state = 5198;
	            this.match(GQLParser.TRUE);
	            break;
	        case 248:
	            this.enterOuterAlt(localctx, 190);
	            this.state = 5199;
	            this.match(GQLParser.TYPED);
	            break;
	        case 249:
	            this.enterOuterAlt(localctx, 191);
	            this.state = 5200;
	            this.match(GQLParser.UBIGINT);
	            break;
	        case 250:
	            this.enterOuterAlt(localctx, 192);
	            this.state = 5201;
	            this.match(GQLParser.UINT);
	            break;
	        case 251:
	            this.enterOuterAlt(localctx, 193);
	            this.state = 5202;
	            this.match(GQLParser.UINT8);
	            break;
	        case 252:
	            this.enterOuterAlt(localctx, 194);
	            this.state = 5203;
	            this.match(GQLParser.UINT16);
	            break;
	        case 253:
	            this.enterOuterAlt(localctx, 195);
	            this.state = 5204;
	            this.match(GQLParser.UINT32);
	            break;
	        case 254:
	            this.enterOuterAlt(localctx, 196);
	            this.state = 5205;
	            this.match(GQLParser.UINT64);
	            break;
	        case 255:
	            this.enterOuterAlt(localctx, 197);
	            this.state = 5206;
	            this.match(GQLParser.UINT128);
	            break;
	        case 256:
	            this.enterOuterAlt(localctx, 198);
	            this.state = 5207;
	            this.match(GQLParser.UINT256);
	            break;
	        case 257:
	            this.enterOuterAlt(localctx, 199);
	            this.state = 5208;
	            this.match(GQLParser.UNION);
	            break;
	        case 258:
	            this.enterOuterAlt(localctx, 200);
	            this.state = 5209;
	            this.match(GQLParser.UNKNOWN);
	            break;
	        case 259:
	            this.enterOuterAlt(localctx, 201);
	            this.state = 5210;
	            this.match(GQLParser.UNSIGNED);
	            break;
	        case 260:
	            this.enterOuterAlt(localctx, 202);
	            this.state = 5211;
	            this.match(GQLParser.UPPER);
	            break;
	        case 261:
	            this.enterOuterAlt(localctx, 203);
	            this.state = 5212;
	            this.match(GQLParser.USE);
	            break;
	        case 262:
	            this.enterOuterAlt(localctx, 204);
	            this.state = 5213;
	            this.match(GQLParser.USMALLINT);
	            break;
	        case 263:
	            this.enterOuterAlt(localctx, 205);
	            this.state = 5214;
	            this.match(GQLParser.VALUE);
	            break;
	        case 264:
	            this.enterOuterAlt(localctx, 206);
	            this.state = 5215;
	            this.match(GQLParser.VARBINARY);
	            break;
	        case 265:
	            this.enterOuterAlt(localctx, 207);
	            this.state = 5216;
	            this.match(GQLParser.VARCHAR);
	            break;
	        case 266:
	            this.enterOuterAlt(localctx, 208);
	            this.state = 5217;
	            this.match(GQLParser.VARIABLE);
	            break;
	        case 267:
	            this.enterOuterAlt(localctx, 209);
	            this.state = 5218;
	            this.match(GQLParser.WHEN);
	            break;
	        case 268:
	            this.enterOuterAlt(localctx, 210);
	            this.state = 5219;
	            this.match(GQLParser.WHERE);
	            break;
	        case 269:
	            this.enterOuterAlt(localctx, 211);
	            this.state = 5220;
	            this.match(GQLParser.WITH);
	            break;
	        case 270:
	            this.enterOuterAlt(localctx, 212);
	            this.state = 5221;
	            this.match(GQLParser.XOR);
	            break;
	        case 271:
	            this.enterOuterAlt(localctx, 213);
	            this.state = 5222;
	            this.match(GQLParser.YEAR);
	            break;
	        case 272:
	            this.enterOuterAlt(localctx, 214);
	            this.state = 5223;
	            this.match(GQLParser.YIELD);
	            break;
	        case 273:
	            this.enterOuterAlt(localctx, 215);
	            this.state = 5224;
	            this.match(GQLParser.ZONED);
	            break;
	        case 274:
	            this.enterOuterAlt(localctx, 216);
	            this.state = 5225;
	            this.match(GQLParser.ZONED_DATETIME);
	            break;
	        case 275:
	            this.enterOuterAlt(localctx, 217);
	            this.state = 5226;
	            this.match(GQLParser.ZONED_TIME);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	preReservedWord() {
	    let localctx = new PreReservedWordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1330, GQLParser.RULE_preReservedWord);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5229;
	        _la = this._input.LA(1);
	        if(!(((((_la - 276)) & ~0x1f) === 0 && ((1 << (_la - 276)) & 4294967295) !== 0) || ((((_la - 308)) & ~0x1f) === 0 && ((1 << (_la - 308)) & 7) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nonReservedWord() {
	    let localctx = new NonReservedWordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1332, GQLParser.RULE_nonReservedWord);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5231;
	        _la = this._input.LA(1);
	        if(!(((((_la - 311)) & ~0x1f) === 0 && ((1 << (_la - 311)) & 4294967295) !== 0) || ((((_la - 343)) & ~0x1f) === 0 && ((1 << (_la - 343)) & 131071) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	delimiterToken() {
	    let localctx = new DelimiterTokenContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1334, GQLParser.RULE_delimiterToken);
	    try {
	        this.state = 5270;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,520,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5233;
	            this.match(GQLParser.GQL_SPECIAL_CHAR);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5234;
	            this.characterStringLiteral();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5235;
	            this.dateString();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 5236;
	            this.dateTimeString();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 5237;
	            this.delimitedIdentifier();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 5238;
	            this.durationString();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 5239;
	            this.timeString();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 5240;
	            this.match(GQLParser.CONCATENATION);
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 5241;
	            this.match(GQLParser.DOUBLE_COLON);
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 5242;
	            this.match(GQLParser.DOUBLE_MINUS);
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 5243;
	            this.match(GQLParser.DOUBLE_PERIOD);
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 5244;
	            this.notEquals();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 5245;
	            this.lessThen();
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 5246;
	            this.graterThanOrEquals();
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 5247;
	            this.lessThanOrEquals();
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 5248;
	            this.graterThanOrEquals();
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 5249;
	            this.match(GQLParser.LEFT_ARROW);
	            break;

	        case 18:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 5250;
	            this.match(GQLParser.LEFT_ARROW_TILDE);
	            break;

	        case 19:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 5251;
	            this.match(GQLParser.LEFT_ARROW_BRACKET);
	            break;

	        case 20:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 5252;
	            this.match(GQLParser.LEFT_ARROW_TILDE_BRACKET);
	            break;

	        case 21:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 5253;
	            this.match(GQLParser.LEFT_MINUS_RIGHT);
	            break;

	        case 22:
	            this.enterOuterAlt(localctx, 22);
	            this.state = 5254;
	            this.match(GQLParser.LEFT_MINUS_SLASH);
	            break;

	        case 23:
	            this.enterOuterAlt(localctx, 23);
	            this.state = 5255;
	            this.match(GQLParser.LEFT_TILDE_SLASH);
	            break;

	        case 24:
	            this.enterOuterAlt(localctx, 24);
	            this.state = 5256;
	            this.match(GQLParser.MINUS_LEFT_BRACKET);
	            break;

	        case 25:
	            this.enterOuterAlt(localctx, 25);
	            this.state = 5257;
	            this.match(GQLParser.MINUS_SLASH);
	            break;

	        case 26:
	            this.enterOuterAlt(localctx, 26);
	            this.state = 5258;
	            this.match(GQLParser.RIGHT_ARROW);
	            break;

	        case 27:
	            this.enterOuterAlt(localctx, 27);
	            this.state = 5259;
	            this.match(GQLParser.RIGHT_BRACKET_MINUS);
	            break;

	        case 28:
	            this.enterOuterAlt(localctx, 28);
	            this.state = 5260;
	            this.match(GQLParser.RIGHT_BRACKET_TILDE);
	            break;

	        case 29:
	            this.enterOuterAlt(localctx, 29);
	            this.state = 5261;
	            this.match(GQLParser.BRACKET_RIGHT_ARROW);
	            break;

	        case 30:
	            this.enterOuterAlt(localctx, 30);
	            this.state = 5262;
	            this.match(GQLParser.BRACKET_TILDE_RIGHT_ARROW);
	            break;

	        case 31:
	            this.enterOuterAlt(localctx, 31);
	            this.state = 5263;
	            this.match(GQLParser.SLASH_MINUS);
	            break;

	        case 32:
	            this.enterOuterAlt(localctx, 32);
	            this.state = 5264;
	            this.match(GQLParser.SLASH_MINUS_RIGHT);
	            break;

	        case 33:
	            this.enterOuterAlt(localctx, 33);
	            this.state = 5265;
	            this.match(GQLParser.SLASH_TILDE);
	            break;

	        case 34:
	            this.enterOuterAlt(localctx, 34);
	            this.state = 5266;
	            this.match(GQLParser.SLASH_TILDE_RIGHT);
	            break;

	        case 35:
	            this.enterOuterAlt(localctx, 35);
	            this.state = 5267;
	            this.match(GQLParser.TILDE_LEFT_BRACKET);
	            break;

	        case 36:
	            this.enterOuterAlt(localctx, 36);
	            this.state = 5268;
	            this.match(GQLParser.TILDE_RIGHT_ARROW);
	            break;

	        case 37:
	            this.enterOuterAlt(localctx, 37);
	            this.state = 5269;
	            this.match(GQLParser.TILDE_SLASH);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	edgeSynonym() {
	    let localctx = new EdgeSynonymContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1336, GQLParser.RULE_edgeSynonym);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5272;
	        _la = this._input.LA(1);
	        if(!(_la===318 || _la===341)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	edgesSynonym() {
	    let localctx = new EdgesSynonymContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1338, GQLParser.RULE_edgesSynonym);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5274;
	        _la = this._input.LA(1);
	        if(!(_la===319 || _la===342)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nodeSynonym() {
	    let localctx = new NodeSynonymContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1340, GQLParser.RULE_nodeSynonym);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5276;
	        _la = this._input.LA(1);
	        if(!(_la===335 || _la===355)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

GQLParser.EOF = antlr4.Token.EOF;
GQLParser.LEFT_ARROW = 1;
GQLParser.LEFT_ARROW_TILDE = 2;
GQLParser.LEFT_ARROW_BRACKET = 3;
GQLParser.LEFT_ARROW_TILDE_BRACKET = 4;
GQLParser.LEFT_MINUS_RIGHT = 5;
GQLParser.LEFT_MINUS_SLASH = 6;
GQLParser.LEFT_TILDE_SLASH = 7;
GQLParser.MINUS_LEFT_BRACKET = 8;
GQLParser.MINUS_SLASH = 9;
GQLParser.RIGHT_ARROW = 10;
GQLParser.RIGHT_BRACKET_MINUS = 11;
GQLParser.RIGHT_BRACKET_TILDE = 12;
GQLParser.BRACKET_RIGHT_ARROW = 13;
GQLParser.BRACKET_TILDE_RIGHT_ARROW = 14;
GQLParser.SLASH_MINUS = 15;
GQLParser.SLASH_MINUS_RIGHT = 16;
GQLParser.SLASH_TILDE = 17;
GQLParser.SLASH_TILDE_RIGHT = 18;
GQLParser.TILDE_LEFT_BRACKET = 19;
GQLParser.TILDE_RIGHT_ARROW = 20;
GQLParser.TILDE_SLASH = 21;
GQLParser.QUOTE = 22;
GQLParser.DOUBLE_QUOTE = 23;
GQLParser.GRAVE_ACCENT = 24;
GQLParser.REVERS_SOLIDUS = 25;
GQLParser.PLUS = 26;
GQLParser.MINUS = 27;
GQLParser.DOUBLE_MINUS = 28;
GQLParser.AMPERSAND = 29;
GQLParser.ASTERISK = 30;
GQLParser.CIRCUMFLEX = 31;
GQLParser.COLON = 32;
GQLParser.DOUBLE_COLON = 33;
GQLParser.COMMA = 34;
GQLParser.DOLLAR = 35;
GQLParser.EQUALS = 36;
GQLParser.EXCLAMATION = 37;
GQLParser.LEFT_ANGLE_BRACKET = 38;
GQLParser.RIGHT_ANGLE_BRACKET = 39;
GQLParser.LEFT_BRACE = 40;
GQLParser.RIGHT_BRACE = 41;
GQLParser.LEFT_BRACKET = 42;
GQLParser.RIGHT_BRACKET = 43;
GQLParser.LEFT_PAREN = 44;
GQLParser.RIGHT_PAREN = 45;
GQLParser.QUESTION_MARK = 46;
GQLParser.SEMICOLON = 47;
GQLParser.SOLIDUS = 48;
GQLParser.DOUBLE_SOLIDUS = 49;
GQLParser.TILDE = 50;
GQLParser.UNDERSCORE = 51;
GQLParser.VERTICAL_BAR = 52;
GQLParser.PERCENT = 53;
GQLParser.PERIOD = 54;
GQLParser.DOUBLE_PERIOD = 55;
GQLParser.COMMERCIAL_AT = 56;
GQLParser.HASH = 57;
GQLParser.MULTISET_ALTERNATION = 58;
GQLParser.CONCATENATION = 59;
GQLParser.ABS = 60;
GQLParser.ACOS = 61;
GQLParser.ALL = 62;
GQLParser.ALL_DIFFERENT = 63;
GQLParser.AND = 64;
GQLParser.ANY = 65;
GQLParser.ARRAY = 66;
GQLParser.AS = 67;
GQLParser.ASC = 68;
GQLParser.ASCENDING = 69;
GQLParser.ASIN = 70;
GQLParser.AT = 71;
GQLParser.ATAN = 72;
GQLParser.AVG = 73;
GQLParser.BIG = 74;
GQLParser.BIGINT = 75;
GQLParser.BINARY = 76;
GQLParser.BOOL = 77;
GQLParser.BOOLEAN = 78;
GQLParser.BOTH = 79;
GQLParser.BTRIM = 80;
GQLParser.BY = 81;
GQLParser.BYTE_LENGTH = 82;
GQLParser.BYTES = 83;
GQLParser.CALL = 84;
GQLParser.CASE = 85;
GQLParser.CAST = 86;
GQLParser.CEIL = 87;
GQLParser.CEILING = 88;
GQLParser.CHAR_LENGTH = 89;
GQLParser.CHARACTER_LENGTH = 90;
GQLParser.CHARACTERISTICS = 91;
GQLParser.CLOSE = 92;
GQLParser.COALESCE = 93;
GQLParser.COLLECT = 94;
GQLParser.COMMIT = 95;
GQLParser.COPY = 96;
GQLParser.COS = 97;
GQLParser.COSH = 98;
GQLParser.COT = 99;
GQLParser.COUNT = 100;
GQLParser.CREATE = 101;
GQLParser.CURRENT_DATE = 102;
GQLParser.CURRENT_GRAPH = 103;
GQLParser.CURRENT_PROPERTY_GRAPH = 104;
GQLParser.CURRENT_SCHEMA = 105;
GQLParser.CURRENT_TIME = 106;
GQLParser.CURRENT_TIMESTAMP = 107;
GQLParser.CURRENT_USER = 108;
GQLParser.DATE = 109;
GQLParser.DATETIME = 110;
GQLParser.DAY = 111;
GQLParser.DEC = 112;
GQLParser.DECIMAL = 113;
GQLParser.DEGREES = 114;
GQLParser.DELETE = 115;
GQLParser.DESC = 116;
GQLParser.DESCENDING = 117;
GQLParser.DETACH = 118;
GQLParser.DISTINCT = 119;
GQLParser.DOUBLE = 120;
GQLParser.DROP = 121;
GQLParser.DURATION = 122;
GQLParser.DURATION_BETWEEN = 123;
GQLParser.ELEMENT_ID = 124;
GQLParser.ELSE = 125;
GQLParser.END = 126;
GQLParser.EXCEPT = 127;
GQLParser.EXISTS = 128;
GQLParser.EXP = 129;
GQLParser.FALSE = 130;
GQLParser.FILTER = 131;
GQLParser.FINISH = 132;
GQLParser.FLOAT = 133;
GQLParser.FLOAT16 = 134;
GQLParser.FLOAT32 = 135;
GQLParser.FLOAT64 = 136;
GQLParser.FLOAT128 = 137;
GQLParser.FLOAT256 = 138;
GQLParser.FLOOR = 139;
GQLParser.FOR = 140;
GQLParser.FROM = 141;
GQLParser.GROUP = 142;
GQLParser.HAVING = 143;
GQLParser.HOME_GRAPH = 144;
GQLParser.HOME_PROPERTY_GRAPH = 145;
GQLParser.HOME_SCHEMA = 146;
GQLParser.HOUR = 147;
GQLParser.IF = 148;
GQLParser.IN = 149;
GQLParser.INSERT = 150;
GQLParser.INT = 151;
GQLParser.INTEGER = 152;
GQLParser.INT8 = 153;
GQLParser.INTEGER8 = 154;
GQLParser.INT16 = 155;
GQLParser.INTEGER16 = 156;
GQLParser.INT32 = 157;
GQLParser.INTEGER32 = 158;
GQLParser.INT64 = 159;
GQLParser.INTEGER64 = 160;
GQLParser.INT128 = 161;
GQLParser.INTEGER128 = 162;
GQLParser.INT256 = 163;
GQLParser.INTEGER256 = 164;
GQLParser.INTERSECT = 165;
GQLParser.INTERVAL = 166;
GQLParser.IS = 167;
GQLParser.LEADING = 168;
GQLParser.LET = 169;
GQLParser.LIKE = 170;
GQLParser.LIMIT = 171;
GQLParser.LIST = 172;
GQLParser.LN = 173;
GQLParser.LOCAL = 174;
GQLParser.LOCAL_DATETIME = 175;
GQLParser.LOCAL_TIME = 176;
GQLParser.LOCAL_TIMESTAMP = 177;
GQLParser.LOG = 178;
GQLParser.LOG10 = 179;
GQLParser.LOWER = 180;
GQLParser.LTRIM = 181;
GQLParser.MATCH = 182;
GQLParser.MAX = 183;
GQLParser.MIN = 184;
GQLParser.MINUTE = 185;
GQLParser.MOD = 186;
GQLParser.MONTH = 187;
GQLParser.NEXT = 188;
GQLParser.NODETACH = 189;
GQLParser.NORMALIZE = 190;
GQLParser.NOT = 191;
GQLParser.NULL = 192;
GQLParser.NULLS = 193;
GQLParser.NULLIF = 194;
GQLParser.OCTET_LENGTH = 195;
GQLParser.OF = 196;
GQLParser.OFFSET = 197;
GQLParser.OPEN = 198;
GQLParser.OPTIONAL = 199;
GQLParser.OR = 200;
GQLParser.ORDER = 201;
GQLParser.OTHERWISE = 202;
GQLParser.PARAMETER = 203;
GQLParser.PARAMETERS = 204;
GQLParser.PATH = 205;
GQLParser.PATH_LENGTH = 206;
GQLParser.PATHS = 207;
GQLParser.PERCENTILE_CONT = 208;
GQLParser.PERCENTILE_DISC = 209;
GQLParser.POWER = 210;
GQLParser.PRECISION = 211;
GQLParser.PROPERTY_EXISTS = 212;
GQLParser.RADIANS = 213;
GQLParser.REAL = 214;
GQLParser.RECORD = 215;
GQLParser.REMOVE = 216;
GQLParser.REPLACE = 217;
GQLParser.RESET = 218;
GQLParser.RETURN = 219;
GQLParser.ROLLBACK = 220;
GQLParser.RTRIM = 221;
GQLParser.SAME = 222;
GQLParser.SCHEMA = 223;
GQLParser.SECOND = 224;
GQLParser.SELECT = 225;
GQLParser.SESSION = 226;
GQLParser.SET = 227;
GQLParser.SIGNED = 228;
GQLParser.SIN = 229;
GQLParser.SINH = 230;
GQLParser.SKIP_ = 231;
GQLParser.SMALL = 232;
GQLParser.SMALLINT = 233;
GQLParser.SQRT = 234;
GQLParser.START = 235;
GQLParser.STDDEV_POP = 236;
GQLParser.STDDEV_SAMP = 237;
GQLParser.STRING = 238;
GQLParser.SUM = 239;
GQLParser.TAN = 240;
GQLParser.TANH = 241;
GQLParser.THEN = 242;
GQLParser.TIME = 243;
GQLParser.TIMESTAMP = 244;
GQLParser.TRAILING = 245;
GQLParser.TRIM = 246;
GQLParser.TRUE = 247;
GQLParser.TYPED = 248;
GQLParser.UBIGINT = 249;
GQLParser.UINT = 250;
GQLParser.UINT8 = 251;
GQLParser.UINT16 = 252;
GQLParser.UINT32 = 253;
GQLParser.UINT64 = 254;
GQLParser.UINT128 = 255;
GQLParser.UINT256 = 256;
GQLParser.UNION = 257;
GQLParser.UNKNOWN = 258;
GQLParser.UNSIGNED = 259;
GQLParser.UPPER = 260;
GQLParser.USE = 261;
GQLParser.USMALLINT = 262;
GQLParser.VALUE = 263;
GQLParser.VARBINARY = 264;
GQLParser.VARCHAR = 265;
GQLParser.VARIABLE = 266;
GQLParser.WHEN = 267;
GQLParser.WHERE = 268;
GQLParser.WITH = 269;
GQLParser.XOR = 270;
GQLParser.YEAR = 271;
GQLParser.YIELD = 272;
GQLParser.ZONED = 273;
GQLParser.ZONED_DATETIME = 274;
GQLParser.ZONED_TIME = 275;
GQLParser.AGGREGATE = 276;
GQLParser.AGGREGATES = 277;
GQLParser.ALTER = 278;
GQLParser.CATALOG = 279;
GQLParser.CLEAR = 280;
GQLParser.CLONE = 281;
GQLParser.CONSTRAINT = 282;
GQLParser.CURRENT_ROLE = 283;
GQLParser.DATA = 284;
GQLParser.DIRECTORY = 285;
GQLParser.EXACT = 286;
GQLParser.EXISTING = 287;
GQLParser.FUNCTION = 288;
GQLParser.GQLSTATUS = 289;
GQLParser.GRANT = 290;
GQLParser.INSTANT = 291;
GQLParser.LEFT = 292;
GQLParser.NOTHING = 293;
GQLParser.NUMERIC = 294;
GQLParser.ON = 295;
GQLParser.PARTITION = 296;
GQLParser.PROCEDURE = 297;
GQLParser.PRODUCT = 298;
GQLParser.PROJECT = 299;
GQLParser.QUERY = 300;
GQLParser.RECORDS = 301;
GQLParser.REFERENCE = 302;
GQLParser.RENAME = 303;
GQLParser.REVOKE = 304;
GQLParser.RIGHT = 305;
GQLParser.SUBSTRING = 306;
GQLParser.TEMPORAL = 307;
GQLParser.UNIQUE = 308;
GQLParser.UNIT = 309;
GQLParser.VALUES = 310;
GQLParser.ACYCLIC = 311;
GQLParser.BINDING = 312;
GQLParser.BINDINGS = 313;
GQLParser.CONNECTING = 314;
GQLParser.DESTINATION = 315;
GQLParser.DIFFERENT = 316;
GQLParser.DIRECTED = 317;
GQLParser.EDGE = 318;
GQLParser.EDGES = 319;
GQLParser.ELEMENT = 320;
GQLParser.ELEMENTS = 321;
GQLParser.FIRST = 322;
GQLParser.GRAPH = 323;
GQLParser.GROUPS = 324;
GQLParser.KEEP = 325;
GQLParser.LABEL = 326;
GQLParser.LABELED = 327;
GQLParser.LABELS = 328;
GQLParser.LAST = 329;
GQLParser.NFC = 330;
GQLParser.NFD = 331;
GQLParser.NFKC = 332;
GQLParser.NFKD = 333;
GQLParser.NO = 334;
GQLParser.NODE = 335;
GQLParser.NORMALIZED = 336;
GQLParser.ONLY = 337;
GQLParser.ORDINALITY = 338;
GQLParser.PROPERTY = 339;
GQLParser.READ = 340;
GQLParser.RELATIONSHIP = 341;
GQLParser.RELATIONSHIPS = 342;
GQLParser.REPEATABLE = 343;
GQLParser.SHORTEST = 344;
GQLParser.SIMPLE = 345;
GQLParser.SOURCE = 346;
GQLParser.TABLE = 347;
GQLParser.TEMP = 348;
GQLParser.TIMEZONE = 349;
GQLParser.TO = 350;
GQLParser.TRAIL = 351;
GQLParser.TRANSACTION = 352;
GQLParser.TYPE = 353;
GQLParser.UNDIRECTED = 354;
GQLParser.VERTEX = 355;
GQLParser.WALK = 356;
GQLParser.WITHOUT = 357;
GQLParser.WRITE = 358;
GQLParser.ZONE = 359;
GQLParser.INTERVAL_DAY = 360;
GQLParser.INTERVAL_WEEK = 361;
GQLParser.INTERVAL_MONTH = 362;
GQLParser.INTERVAL_YEAR = 363;
GQLParser.IF_NOT_EXISTS = 364;
GQLParser.IF_EXISTS = 365;
GQLParser.UNSIGNED_NUMERIC_LITERAL = 366;
GQLParser.SIGNED_NUMERIC_LITERAL = 367;
GQLParser.SIGN = 368;
GQLParser.EXACT_NUMERIC_LITERAL = 369;
GQLParser.EXACT_UNSIGNED_DECIMAL_IN_COMMON_NOTATION = 370;
GQLParser.EXACT_UNSIGNED_INT = 371;
GQLParser.APROXIMATE_NUMERIC_LITERAL = 372;
GQLParser.APROXIMATE_UNSIGNED_DECIMAL_IN_COMMON_NOTATION = 373;
GQLParser.APROXIMATE_UNSIGNED_INT = 374;
GQLParser.UNSIGNED_DECIMAL_IN_COMMON_NOTATION = 375;
GQLParser.UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION = 376;
GQLParser.FOUR_DIGIT = 377;
GQLParser.DOUBLE_DIGIT = 378;
GQLParser.UNSIGNED_INT = 379;
GQLParser.UNSIGNED_DECIMAL_INT = 380;
GQLParser.UNSIGNED_HEX_INT = 381;
GQLParser.UNSIGNED_OCTAL_INT = 382;
GQLParser.UNSIGNED_BINARY_INT = 383;
GQLParser.BYTE_STRING_LITERAL = 384;
GQLParser.SINGLE_QUOTED_STRING_LITERAL = 385;
GQLParser.DOUBLE_QUOTED_STRING_LITERAL = 386;
GQLParser.ACCENT_QUOTED_STRING_LITERAL = 387;
GQLParser.COMMENT = 388;
GQLParser.SIMPLE_COMMENT_LITERAL = 389;
GQLParser.BRACKETED_COMMNET_LITERAL = 390;
GQLParser.WS = 391;
GQLParser.WHITESPACE = 392;
GQLParser.NEW_LINE = 393;
GQLParser.CARRIAGE_RETURN = 394;
GQLParser.RETURN_SIGN = 395;
GQLParser.REGULAR_IDENTIFIER = 396;
GQLParser.EXTENDED_IDENTIFIER = 397;
GQLParser.START_CHARS = 398;
GQLParser.CONTINUE_CHARS = 399;
GQLParser.BIDIRECTIONAL_CONTROL_CHARACTER = 400;
GQLParser.ESCAPED_CHARS = 401;
GQLParser.ESCAPED_REVERSE_SOLIDUS = 402;
GQLParser.ESCAPED_QUOTE = 403;
GQLParser.ESCAPED_SOUBLE_QUOTE = 404;
GQLParser.ESCAPED_GRAVE_ACCENT = 405;
GQLParser.ESCAPED_TAB = 406;
GQLParser.ESCAPED_BACKSPACE = 407;
GQLParser.ESCAPED_NEW_LINE = 408;
GQLParser.ESCAPED_CARRIAGE_RETURN = 409;
GQLParser.ESCAPED_FORM_FEED = 410;
GQLParser.ESCAPED_UNICODE4_DIGIT_VALUE = 411;
GQLParser.ESCAPED_UNICODE6_DIGIT_VALUE = 412;
GQLParser.FF = 413;
GQLParser.RS = 414;
GQLParser.GS = 415;
GQLParser.FS = 416;
GQLParser.CR = 417;
GQLParser.SPACE = 418;
GQLParser.TAB = 419;
GQLParser.LF = 420;
GQLParser.VT = 421;
GQLParser.US = 422;
GQLParser.DIGIT16 = 423;
GQLParser.DIGIT10 = 424;
GQLParser.DIGIT8 = 425;
GQLParser.DIGIT2 = 426;
GQLParser.LETTER = 427;
GQLParser.GQL_LANGUAGE_CHAR = 428;
GQLParser.GQL_SPECIAL_CHAR = 429;

GQLParser.RULE_gqlProgram = 0;
GQLParser.RULE_activity = 1;
GQLParser.RULE_programActivity = 2;
GQLParser.RULE_sessionActivity = 3;
GQLParser.RULE_sessionSetCommand = 4;
GQLParser.RULE_sessionSetSchemaClause = 5;
GQLParser.RULE_sessionSetGraphClause = 6;
GQLParser.RULE_sessionSetTimeZoneClause = 7;
GQLParser.RULE_setTimeZoneValue = 8;
GQLParser.RULE_sessionSetParameterClause = 9;
GQLParser.RULE_sessionSetGraphParameterClause = 10;
GQLParser.RULE_sessionSetBindingTableParameterCalues = 11;
GQLParser.RULE_sessionSetValuesParameterClause = 12;
GQLParser.RULE_sessionSetParameterName = 13;
GQLParser.RULE_sessionResetCommand = 14;
GQLParser.RULE_sessionResetArguments = 15;
GQLParser.RULE_sessionCloseCommand = 16;
GQLParser.RULE_transactionActivity = 17;
GQLParser.RULE_transactionStartCommand = 18;
GQLParser.RULE_transactionEndCommand = 19;
GQLParser.RULE_transactionCharacteristics = 20;
GQLParser.RULE_transactionMode = 21;
GQLParser.RULE_transactionAccessMode = 22;
GQLParser.RULE_implDefinedAccessMode = 23;
GQLParser.RULE_nestedProcedureSpec = 24;
GQLParser.RULE_procedureSpec = 25;
GQLParser.RULE_nestedDataModProcedureSpec = 26;
GQLParser.RULE_nestedQuerySpec = 27;
GQLParser.RULE_procedureBody = 28;
GQLParser.RULE_bindingVarDefBlock = 29;
GQLParser.RULE_bindingVarDef = 30;
GQLParser.RULE_statmentBlock = 31;
GQLParser.RULE_statement = 32;
GQLParser.RULE_nextStatment = 33;
GQLParser.RULE_graphVarDef = 34;
GQLParser.RULE_optTypedGraphInit = 35;
GQLParser.RULE_graphInit = 36;
GQLParser.RULE_bindingTableVarDef = 37;
GQLParser.RULE_optTypedBindingTableInit = 38;
GQLParser.RULE_bindingTableInit = 39;
GQLParser.RULE_valueVarDef = 40;
GQLParser.RULE_optTypedValueInit = 41;
GQLParser.RULE_valueInit = 42;
GQLParser.RULE_graphExpr = 43;
GQLParser.RULE_currentGraph = 44;
GQLParser.RULE_nestedGraphQuerySpec = 45;
GQLParser.RULE_bindingTableExpr = 46;
GQLParser.RULE_nestedBindingTableQuerySpec = 47;
GQLParser.RULE_objectExprPrimary = 48;
GQLParser.RULE_linearCatalogModStatment = 49;
GQLParser.RULE_simpleCatalogModStatment = 50;
GQLParser.RULE_primitiveCatalogModStatment = 51;
GQLParser.RULE_createSchemeStatment = 52;
GQLParser.RULE_dropSchemeStatment = 53;
GQLParser.RULE_createGraphStatment = 54;
GQLParser.RULE_createOnlyGraphStatment = 55;
GQLParser.RULE_createOrReplaceGraphStatment = 56;
GQLParser.RULE_openGraphType = 57;
GQLParser.RULE_ofGraphType = 58;
GQLParser.RULE_graphTypeLikeGraph = 59;
GQLParser.RULE_graphSource = 60;
GQLParser.RULE_dropGraphStatment = 61;
GQLParser.RULE_createGraphTypeStatment = 62;
GQLParser.RULE_graphTypeSource = 63;
GQLParser.RULE_copyOfGraphType = 64;
GQLParser.RULE_dropGraphTypeStatment = 65;
GQLParser.RULE_callCatalogModProcedureStatment = 66;
GQLParser.RULE_linearDataModStatment = 67;
GQLParser.RULE_focusedLinearDataModStatment = 68;
GQLParser.RULE_focusedLinearDataModStatmentBody = 69;
GQLParser.RULE_focusedNestedDataModProcedureSpec = 70;
GQLParser.RULE_ambientLinearDataModStatment = 71;
GQLParser.RULE_ambientLinearDataModStatmentBody = 72;
GQLParser.RULE_simpleLinearDataAccessingStatment = 73;
GQLParser.RULE_simpleDataAccessingStatment = 74;
GQLParser.RULE_simpleDataModStatment = 75;
GQLParser.RULE_primitiveDataModStatment = 76;
GQLParser.RULE_insertStatment = 77;
GQLParser.RULE_setStatment = 78;
GQLParser.RULE_setItemList = 79;
GQLParser.RULE_setItem = 80;
GQLParser.RULE_setPropertyItem = 81;
GQLParser.RULE_setAllPropertiesItem = 82;
GQLParser.RULE_setLabelItem = 83;
GQLParser.RULE_labelSetSpec = 84;
GQLParser.RULE_removeStatment = 85;
GQLParser.RULE_removeItemList = 86;
GQLParser.RULE_removeItem = 87;
GQLParser.RULE_removePropertyItem = 88;
GQLParser.RULE_removeLabelItem = 89;
GQLParser.RULE_deleteStatment = 90;
GQLParser.RULE_deleteItemList = 91;
GQLParser.RULE_deleteItem = 92;
GQLParser.RULE_callDataModProcedureStatment = 93;
GQLParser.RULE_compositeQueryStatment = 94;
GQLParser.RULE_compositeQueryExpr = 95;
GQLParser.RULE_queryConjunction = 96;
GQLParser.RULE_setOperator = 97;
GQLParser.RULE_compositeQueryPrimary = 98;
GQLParser.RULE_linearQueryStatment = 99;
GQLParser.RULE_focusedLinearQueryStatment = 100;
GQLParser.RULE_focusedLinearQueryStatmentPart = 101;
GQLParser.RULE_focusedLinearQueryAndPrimitiveResultStatmentPart = 102;
GQLParser.RULE_focusedPrimitiveResultStatment = 103;
GQLParser.RULE_focusedNestedQuerySpec = 104;
GQLParser.RULE_ambientLinearQueryStatment = 105;
GQLParser.RULE_simpleLinearQueryStatment = 106;
GQLParser.RULE_simpleQueryStatment = 107;
GQLParser.RULE_primitiveQueryStatment = 108;
GQLParser.RULE_matchStatment = 109;
GQLParser.RULE_simpleMatchStatment = 110;
GQLParser.RULE_optionalMatchStatment = 111;
GQLParser.RULE_optionalOperand = 112;
GQLParser.RULE_matchStatmentBlock = 113;
GQLParser.RULE_callQueryStatment = 114;
GQLParser.RULE_filterStatment = 115;
GQLParser.RULE_letStatment = 116;
GQLParser.RULE_letVarDefList = 117;
GQLParser.RULE_letVarDef = 118;
GQLParser.RULE_forStatment = 119;
GQLParser.RULE_forItem = 120;
GQLParser.RULE_forItemAlias = 121;
GQLParser.RULE_forOrdinalityOrOffset = 122;
GQLParser.RULE_orderByAndPageStatment = 123;
GQLParser.RULE_primitiveResultStatment = 124;
GQLParser.RULE_returnStatment = 125;
GQLParser.RULE_returnStatmentBody = 126;
GQLParser.RULE_returnItemList = 127;
GQLParser.RULE_returnItem = 128;
GQLParser.RULE_returnItemAlias = 129;
GQLParser.RULE_selectStatment = 130;
GQLParser.RULE_selectItemList = 131;
GQLParser.RULE_selectItem = 132;
GQLParser.RULE_selectItemAlias = 133;
GQLParser.RULE_havingClause = 134;
GQLParser.RULE_selectStatmentBody = 135;
GQLParser.RULE_selectGraphMatchList = 136;
GQLParser.RULE_selectGraphMatch = 137;
GQLParser.RULE_selectQuerySpec = 138;
GQLParser.RULE_callProcedureStatment = 139;
GQLParser.RULE_procedureCall = 140;
GQLParser.RULE_inlineProcedureCall = 141;
GQLParser.RULE_varScopeClause = 142;
GQLParser.RULE_bindingVarRefList = 143;
GQLParser.RULE_namedProcedureCall = 144;
GQLParser.RULE_procedureArgList = 145;
GQLParser.RULE_procedureArg = 146;
GQLParser.RULE_useGraphClause = 147;
GQLParser.RULE_atSchemaClause = 148;
GQLParser.RULE_bindingVarRef = 149;
GQLParser.RULE_elementVarRef = 150;
GQLParser.RULE_pathVarRef = 151;
GQLParser.RULE_parameter = 152;
GQLParser.RULE_graphPatternBindingTable = 153;
GQLParser.RULE_graphPatternYieldClause = 154;
GQLParser.RULE_graphPatternYieldItemList = 155;
GQLParser.RULE_graphPatternYieldItem = 156;
GQLParser.RULE_graphPattern = 157;
GQLParser.RULE_matchMode = 158;
GQLParser.RULE_repeatableElementsMatchMode = 159;
GQLParser.RULE_differentEdgesMatchMode = 160;
GQLParser.RULE_elementBindingsOrElements = 161;
GQLParser.RULE_edgeBindingsOrEdges = 162;
GQLParser.RULE_pathPatternList = 163;
GQLParser.RULE_pathPattern = 164;
GQLParser.RULE_pathVarDeclaration = 165;
GQLParser.RULE_keepClause = 166;
GQLParser.RULE_graphPatternWhereClause = 167;
GQLParser.RULE_pathPatternPrefix = 168;
GQLParser.RULE_pathModePrefix = 169;
GQLParser.RULE_pathMode = 170;
GQLParser.RULE_pathSearchPrefix = 171;
GQLParser.RULE_allPathSearch = 172;
GQLParser.RULE_pathOrPaths = 173;
GQLParser.RULE_anyPathSearch = 174;
GQLParser.RULE_numberOfPaths = 175;
GQLParser.RULE_shortestPathSearch = 176;
GQLParser.RULE_allShortestPathSearch = 177;
GQLParser.RULE_anyShortestPathSearch = 178;
GQLParser.RULE_countedShortestPathSearch = 179;
GQLParser.RULE_countedShortestGroupSearch = 180;
GQLParser.RULE_groupOrGroups = 181;
GQLParser.RULE_numberOfGroups = 182;
GQLParser.RULE_pathPatternExpr = 183;
GQLParser.RULE_pathMultisetAlternation = 184;
GQLParser.RULE_pathPatternUnion = 185;
GQLParser.RULE_pathTerm = 186;
GQLParser.RULE_pathFactor = 187;
GQLParser.RULE_quantifiedPathPrimary = 188;
GQLParser.RULE_questionedPathPrimary = 189;
GQLParser.RULE_pathPrimary = 190;
GQLParser.RULE_elementPattern = 191;
GQLParser.RULE_nodePattern = 192;
GQLParser.RULE_elementPatternFiller = 193;
GQLParser.RULE_elementVarDeclaration = 194;
GQLParser.RULE_isLabelExpr = 195;
GQLParser.RULE_isOrColon = 196;
GQLParser.RULE_elementPatternPredicate = 197;
GQLParser.RULE_elementPatternWhereClause = 198;
GQLParser.RULE_elementPropertySpec = 199;
GQLParser.RULE_propertyKeyValuePairList = 200;
GQLParser.RULE_propertyKeyValuePair = 201;
GQLParser.RULE_edgePattern = 202;
GQLParser.RULE_fullEdgePattern = 203;
GQLParser.RULE_fullEdgePointingLeft = 204;
GQLParser.RULE_fullEdgeUndirected = 205;
GQLParser.RULE_fullEdgePointingRight = 206;
GQLParser.RULE_fullEdgeLeftOrUndirected = 207;
GQLParser.RULE_fullEdgeUndirectedOrRight = 208;
GQLParser.RULE_fullEdgeLeftOrRight = 209;
GQLParser.RULE_fullEdgeAnyDirection = 210;
GQLParser.RULE_abbreviatedEdgePattern = 211;
GQLParser.RULE_parenthesizedPathPatternExpr = 212;
GQLParser.RULE_subpathVarDeclaration = 213;
GQLParser.RULE_parenthesizedPathPatternWhereClause = 214;
GQLParser.RULE_insertGraphPattern = 215;
GQLParser.RULE_insertGraphPatternList = 216;
GQLParser.RULE_insertPathPattern = 217;
GQLParser.RULE_insertNodePattern = 218;
GQLParser.RULE_insertEdgePattern = 219;
GQLParser.RULE_insertEdgePointingLeft = 220;
GQLParser.RULE_insertEdgePointingRight = 221;
GQLParser.RULE_insertEdgeUndirected = 222;
GQLParser.RULE_insertElementPatternFiller = 223;
GQLParser.RULE_labelAndPropertySetSpec = 224;
GQLParser.RULE_labelExpr = 225;
GQLParser.RULE_labelTerm = 226;
GQLParser.RULE_labelFactor = 227;
GQLParser.RULE_labelNegation = 228;
GQLParser.RULE_labelPrimary = 229;
GQLParser.RULE_wildcardLabel = 230;
GQLParser.RULE_parenthesizedLabelExpr = 231;
GQLParser.RULE_graphPatternQuantifier = 232;
GQLParser.RULE_fixedQuantifier = 233;
GQLParser.RULE_generalQuantifier = 234;
GQLParser.RULE_lowerBound = 235;
GQLParser.RULE_upperBound = 236;
GQLParser.RULE_simplifiedPathPatternExpr = 237;
GQLParser.RULE_simplifiedDefaultingLeft = 238;
GQLParser.RULE_simplifiedDefaultingUndirected = 239;
GQLParser.RULE_simplifiedDefaultingRight = 240;
GQLParser.RULE_simplifiedDefaultingLeftOrUndirected = 241;
GQLParser.RULE_simplifiedDefaultingUndirectedOrRight = 242;
GQLParser.RULE_simplifiedDefaultingLeftOrRight = 243;
GQLParser.RULE_simplifiedDefaultingAnyDirection = 244;
GQLParser.RULE_simplifiedContents = 245;
GQLParser.RULE_simplifiedPathUnion = 246;
GQLParser.RULE_simplifiedMultisetAlternation = 247;
GQLParser.RULE_simplifiedTerm = 248;
GQLParser.RULE_simplifiedFactorLow = 249;
GQLParser.RULE_simplifiedFactorHigh = 250;
GQLParser.RULE_simplifiedQuntified = 251;
GQLParser.RULE_simplifiedQuestioned = 252;
GQLParser.RULE_simplifiedTertiary = 253;
GQLParser.RULE_simplifiedDirectionOverride = 254;
GQLParser.RULE_simplifiedOverrideLeft = 255;
GQLParser.RULE_simplifiedOverrideUndirected = 256;
GQLParser.RULE_simplifiedOverrideRight = 257;
GQLParser.RULE_simplifiedOverrideLeftOrUndirected = 258;
GQLParser.RULE_simplifiedOverrideUndirectedOrRight = 259;
GQLParser.RULE_simplifiedOverrideLeftOrRight = 260;
GQLParser.RULE_simplifiedOverrideAnyDirection = 261;
GQLParser.RULE_simplifiedSecondary = 262;
GQLParser.RULE_simplifiedNegation = 263;
GQLParser.RULE_simplifiedPrimary = 264;
GQLParser.RULE_whereClause = 265;
GQLParser.RULE_yieldClause = 266;
GQLParser.RULE_yieldItemList = 267;
GQLParser.RULE_yieldItem = 268;
GQLParser.RULE_yieldItemName = 269;
GQLParser.RULE_yieldItemAlias = 270;
GQLParser.RULE_groupByClause = 271;
GQLParser.RULE_groupingElementList = 272;
GQLParser.RULE_groupingElement = 273;
GQLParser.RULE_emptyGroupingSet = 274;
GQLParser.RULE_orderByClause = 275;
GQLParser.RULE_aggregateFunction = 276;
GQLParser.RULE_generalSetFunction = 277;
GQLParser.RULE_generalSetFunctionType = 278;
GQLParser.RULE_setQuantifier = 279;
GQLParser.RULE_binarySetFunction = 280;
GQLParser.RULE_dependantValueExpr = 281;
GQLParser.RULE_independentValueExpr = 282;
GQLParser.RULE_sortSpecList = 283;
GQLParser.RULE_sortSpec = 284;
GQLParser.RULE_sortKey = 285;
GQLParser.RULE_orderingSpec = 286;
GQLParser.RULE_nullOrdering = 287;
GQLParser.RULE_limitClause = 288;
GQLParser.RULE_offsetClause = 289;
GQLParser.RULE_offsetSynonym = 290;
GQLParser.RULE_graphTypeSpec = 291;
GQLParser.RULE_nestedGraphTypeSpec = 292;
GQLParser.RULE_graphTypeSpecBody = 293;
GQLParser.RULE_elementTypeDefList = 294;
GQLParser.RULE_elementTypeDef = 295;
GQLParser.RULE_nodeTypeDef = 296;
GQLParser.RULE_nodeTypePattern = 297;
GQLParser.RULE_nodeTypePhrase = 298;
GQLParser.RULE_nodeTypeName = 299;
GQLParser.RULE_nodeTypeFiller = 300;
GQLParser.RULE_nodeTypeLabelSetDef = 301;
GQLParser.RULE_nodeTypePropertyTypeSetDef = 302;
GQLParser.RULE_edgeTypeDef = 303;
GQLParser.RULE_edgeTypePattern = 304;
GQLParser.RULE_edgeTypePhrase = 305;
GQLParser.RULE_edgeTypeName = 306;
GQLParser.RULE_edgeTypeFiller = 307;
GQLParser.RULE_edgeTypeLabelSetDef = 308;
GQLParser.RULE_edgeTypePropertyTypeSetDef = 309;
GQLParser.RULE_fullEdgeTypePattern = 310;
GQLParser.RULE_fullEdgeTypePatternPointingRight = 311;
GQLParser.RULE_fullEdgeTypePatternPointingLeft = 312;
GQLParser.RULE_fullEdgeTypePatternUndirected = 313;
GQLParser.RULE_arcTypePointingRight = 314;
GQLParser.RULE_arcTypePointingLeft = 315;
GQLParser.RULE_arcTypeUndirected = 316;
GQLParser.RULE_arcTypeFiller = 317;
GQLParser.RULE_abbreviatedEdgeTypePattern = 318;
GQLParser.RULE_abbreviatedEdgeTypePatternPointingRight = 319;
GQLParser.RULE_abbreviatedEdgeTypePatternPointingLeft = 320;
GQLParser.RULE_abbreviatedEdgeTypePatternUndirected = 321;
GQLParser.RULE_nodeTypeRef = 322;
GQLParser.RULE_sourceNodeTypeRef = 323;
GQLParser.RULE_destinationNodeTypeRef = 324;
GQLParser.RULE_edgeKind = 325;
GQLParser.RULE_endpointDef = 326;
GQLParser.RULE_enpointPairDef = 327;
GQLParser.RULE_endpointPairDefPointingRight = 328;
GQLParser.RULE_endpointPairDefPointingLeft = 329;
GQLParser.RULE_endpointPairDefUndirected = 330;
GQLParser.RULE_connectorPointingRight = 331;
GQLParser.RULE_connectorPointingLeft = 332;
GQLParser.RULE_connectorUndirected = 333;
GQLParser.RULE_sourceNodeTypeName = 334;
GQLParser.RULE_destinationNodeTypeName = 335;
GQLParser.RULE_labelSetDef = 336;
GQLParser.RULE_propertyTypeSetDef = 337;
GQLParser.RULE_propertyTypeDefList = 338;
GQLParser.RULE_propertyTypeDef = 339;
GQLParser.RULE_propertyValueType = 340;
GQLParser.RULE_bindingTableType = 341;
GQLParser.RULE_valueType = 342;
GQLParser.RULE_typed = 343;
GQLParser.RULE_predefinedType = 344;
GQLParser.RULE_booleanType = 345;
GQLParser.RULE_charStringType = 346;
GQLParser.RULE_byteStringType = 347;
GQLParser.RULE_minLength = 348;
GQLParser.RULE_maxLength = 349;
GQLParser.RULE_fixedLength = 350;
GQLParser.RULE_numericType = 351;
GQLParser.RULE_exactNumericType = 352;
GQLParser.RULE_binaryExactNumericType = 353;
GQLParser.RULE_signedBinaryExactNumericType = 354;
GQLParser.RULE_unsignedBinaryExactNumericType = 355;
GQLParser.RULE_verboseBinaryExactNumericType = 356;
GQLParser.RULE_decimalExactNumericType = 357;
GQLParser.RULE_precision = 358;
GQLParser.RULE_scale = 359;
GQLParser.RULE_approximateNumericType = 360;
GQLParser.RULE_temporalType = 361;
GQLParser.RULE_temporalInstantType = 362;
GQLParser.RULE_temporalDurationType = 363;
GQLParser.RULE_dateTimeType = 364;
GQLParser.RULE_localDateTimeType = 365;
GQLParser.RULE_dateType = 366;
GQLParser.RULE_timeType = 367;
GQLParser.RULE_localTimeType = 368;
GQLParser.RULE_durationType = 369;
GQLParser.RULE_refValueType = 370;
GQLParser.RULE_graphRefValueType = 371;
GQLParser.RULE_openGraphRefValueType = 372;
GQLParser.RULE_closedGraphRefValueType = 373;
GQLParser.RULE_bindingTableRefValueType = 374;
GQLParser.RULE_nodeRefValueType = 375;
GQLParser.RULE_openNodeRefValueType = 376;
GQLParser.RULE_closedNodeRefValueType = 377;
GQLParser.RULE_edgeRefValueType = 378;
GQLParser.RULE_openEdgeRefValueType = 379;
GQLParser.RULE_closedEdgeRefValueType = 380;
GQLParser.RULE_constructedType = 381;
GQLParser.RULE_listValueType = 382;
GQLParser.RULE_listValueTypeName = 383;
GQLParser.RULE_listValueTypeNameSynonym = 384;
GQLParser.RULE_recordType = 385;
GQLParser.RULE_fieldTypesSpec = 386;
GQLParser.RULE_fieldTypeList = 387;
GQLParser.RULE_dynamicUnionType = 388;
GQLParser.RULE_openDynamicUnionType = 389;
GQLParser.RULE_dynamicPropertyValueType = 390;
GQLParser.RULE_closedDynamicUnionType = 391;
GQLParser.RULE_componentTypeList = 392;
GQLParser.RULE_componentType = 393;
GQLParser.RULE_pathValueType = 394;
GQLParser.RULE_notNull = 395;
GQLParser.RULE_fieldType = 396;
GQLParser.RULE_schemaRef = 397;
GQLParser.RULE_absoluteCatalogSchemaRef = 398;
GQLParser.RULE_catalogSchemaParentAndName = 399;
GQLParser.RULE_relativeCatalogSchemaRef = 400;
GQLParser.RULE_predefinedSchemaRef = 401;
GQLParser.RULE_absoluteDirectoryPath = 402;
GQLParser.RULE_relativeDirectoryPath = 403;
GQLParser.RULE_simpleDirectoryPath = 404;
GQLParser.RULE_graphRef = 405;
GQLParser.RULE_catalogGraphParentAndName = 406;
GQLParser.RULE_homeGraph = 407;
GQLParser.RULE_graphTypeRef = 408;
GQLParser.RULE_catalogGraphTypeParentAndName = 409;
GQLParser.RULE_bindingTableRef = 410;
GQLParser.RULE_catalogBindingTableParentAndName = 411;
GQLParser.RULE_procedureRef = 412;
GQLParser.RULE_catalogProcedureParentAndName = 413;
GQLParser.RULE_catalogObjectParentRef = 414;
GQLParser.RULE_refParameter = 415;
GQLParser.RULE_externalObjectRef = 416;
GQLParser.RULE_searchCondition = 417;
GQLParser.RULE_predicate = 418;
GQLParser.RULE_comparisonPredicate = 419;
GQLParser.RULE_comparisonPredicatePart2 = 420;
GQLParser.RULE_comparisonOperator = 421;
GQLParser.RULE_equals = 422;
GQLParser.RULE_notEquals = 423;
GQLParser.RULE_lessThen = 424;
GQLParser.RULE_greaterThan = 425;
GQLParser.RULE_lessThanOrEquals = 426;
GQLParser.RULE_graterThanOrEquals = 427;
GQLParser.RULE_comparisonPredicand = 428;
GQLParser.RULE_existsPredicate = 429;
GQLParser.RULE_nullPredicate = 430;
GQLParser.RULE_nullPredicatePart2 = 431;
GQLParser.RULE_valueTypePredicate = 432;
GQLParser.RULE_valueTypePredicatePart2 = 433;
GQLParser.RULE_normalizedPredicate = 434;
GQLParser.RULE_normalizedPredicatePart2 = 435;
GQLParser.RULE_directedPredicate = 436;
GQLParser.RULE_directedPredicatePart2 = 437;
GQLParser.RULE_labeledPredicate = 438;
GQLParser.RULE_labeledPredicatePart2 = 439;
GQLParser.RULE_isLabeledOrColon = 440;
GQLParser.RULE_sourceOrDestinationPredicate = 441;
GQLParser.RULE_nodeRef = 442;
GQLParser.RULE_sourcePredicatePart2 = 443;
GQLParser.RULE_destinationPredicatePart2 = 444;
GQLParser.RULE_edgeRef = 445;
GQLParser.RULE_allDifferentPredicate = 446;
GQLParser.RULE_samePredicate = 447;
GQLParser.RULE_propertyExistsPredicate = 448;
GQLParser.RULE_valueSpec = 449;
GQLParser.RULE_unsignedValueSpec = 450;
GQLParser.RULE_unsignedIntSpec = 451;
GQLParser.RULE_parameterValueSpec = 452;
GQLParser.RULE_predefinedParameter = 453;
GQLParser.RULE_valueExpr = 454;
GQLParser.RULE_commonValueExpr = 455;
GQLParser.RULE_commonValuePropertiesGroup = 456;
GQLParser.RULE_refValueExpr = 457;
GQLParser.RULE_graphRefValueExpr = 458;
GQLParser.RULE_bindingTableRefValueExpr = 459;
GQLParser.RULE_nodeRefValueExpr = 460;
GQLParser.RULE_edgeRefValueExpr = 461;
GQLParser.RULE_recordValueExpr = 462;
GQLParser.RULE_aggregatingValueExpr = 463;
GQLParser.RULE_booleanValueExpr = 464;
GQLParser.RULE_booleanTerm = 465;
GQLParser.RULE_booleanFactor = 466;
GQLParser.RULE_booleanTest = 467;
GQLParser.RULE_truthValue = 468;
GQLParser.RULE_booleanPrimary = 469;
GQLParser.RULE_booleanPredicand = 470;
GQLParser.RULE_paranthisedBooleanValueExpr = 471;
GQLParser.RULE_numericValueExpr = 472;
GQLParser.RULE_term = 473;
GQLParser.RULE_factor = 474;
GQLParser.RULE_numericPrimary = 475;
GQLParser.RULE_valueExprPrimary = 476;
GQLParser.RULE_parenthesizedValueExpr = 477;
GQLParser.RULE_nonParenthesizedValueExprPrimary = 478;
GQLParser.RULE_nonParenthesizedValueExprPrimarySpecialCase = 479;
GQLParser.RULE_collectionValueConstructor = 480;
GQLParser.RULE_numericValueFunction = 481;
GQLParser.RULE_lengthExpr = 482;
GQLParser.RULE_charLengthExpr = 483;
GQLParser.RULE_byteLengthExpr = 484;
GQLParser.RULE_pathLengthExpr = 485;
GQLParser.RULE_absoluteValueExpr = 486;
GQLParser.RULE_modulusExpr = 487;
GQLParser.RULE_numericValueExprDividen = 488;
GQLParser.RULE_numericValueExprDivisor = 489;
GQLParser.RULE_trigonometricFunction = 490;
GQLParser.RULE_trigonometricFunctionName = 491;
GQLParser.RULE_logarithmFunction = 492;
GQLParser.RULE_generalLogarithmFunction = 493;
GQLParser.RULE_generalLogarithmBase = 494;
GQLParser.RULE_generalLogarithmArgument = 495;
GQLParser.RULE_commonLogarithmFunction = 496;
GQLParser.RULE_naturalLogarithmFunction = 497;
GQLParser.RULE_exponentialFunction = 498;
GQLParser.RULE_powerFunction = 499;
GQLParser.RULE_numericValueExprBase = 500;
GQLParser.RULE_numericValueExprExponent = 501;
GQLParser.RULE_squareRootFunciton = 502;
GQLParser.RULE_floorFunction = 503;
GQLParser.RULE_ceilingFunction = 504;
GQLParser.RULE_stringValueExpr = 505;
GQLParser.RULE_charStringValueExpr = 506;
GQLParser.RULE_charStringConcatenation = 507;
GQLParser.RULE_charStringFactor = 508;
GQLParser.RULE_charStringPrimary = 509;
GQLParser.RULE_byteStringValueExpr = 510;
GQLParser.RULE_byteStringFactor = 511;
GQLParser.RULE_byteStringPrimary = 512;
GQLParser.RULE_byteStringConcatenation = 513;
GQLParser.RULE_stringValueFunction = 514;
GQLParser.RULE_charStringFunction = 515;
GQLParser.RULE_foldFunction = 516;
GQLParser.RULE_trimFunction = 517;
GQLParser.RULE_singleCharTrimFunction = 518;
GQLParser.RULE_multiCharTrimFunction = 519;
GQLParser.RULE_trimOperands = 520;
GQLParser.RULE_trimSource = 521;
GQLParser.RULE_trimSpec = 522;
GQLParser.RULE_trimCharString = 523;
GQLParser.RULE_normalizeFunction = 524;
GQLParser.RULE_normalForm = 525;
GQLParser.RULE_byteStringFunction = 526;
GQLParser.RULE_byteStrinTrimFunction = 527;
GQLParser.RULE_byteStringTrimOperands = 528;
GQLParser.RULE_byteStringTrimSource = 529;
GQLParser.RULE_trimByteString = 530;
GQLParser.RULE_stringLength = 531;
GQLParser.RULE_dateTimeValueExpr = 532;
GQLParser.RULE_dateTimeTerm = 533;
GQLParser.RULE_dateTimeFactor = 534;
GQLParser.RULE_dateTimePrimary = 535;
GQLParser.RULE_dateTimeValueFunction = 536;
GQLParser.RULE_dateFunction = 537;
GQLParser.RULE_timeFunction = 538;
GQLParser.RULE_localTimeFunction = 539;
GQLParser.RULE_dateTimeFunction = 540;
GQLParser.RULE_localDatetimeFunction = 541;
GQLParser.RULE_dateFunctionParameters = 542;
GQLParser.RULE_timeFunctionParameters = 543;
GQLParser.RULE_dateTimeFunctionParameters = 544;
GQLParser.RULE_durationValueExpr = 545;
GQLParser.RULE_dateTimeSubtraction = 546;
GQLParser.RULE_dateTimeSubtractionParameters = 547;
GQLParser.RULE_durationTerm = 548;
GQLParser.RULE_durationFactor = 549;
GQLParser.RULE_durationPrimary = 550;
GQLParser.RULE_durationValueExpr1 = 551;
GQLParser.RULE_durationTerm1 = 552;
GQLParser.RULE_durationTerm2 = 553;
GQLParser.RULE_dateTimeValueExpr1 = 554;
GQLParser.RULE_dateTimeValueExpr2 = 555;
GQLParser.RULE_durationValueFunction = 556;
GQLParser.RULE_durationFunction = 557;
GQLParser.RULE_durationFunctionParameters = 558;
GQLParser.RULE_durationAbsoluteValueFunction = 559;
GQLParser.RULE_listValueExpr = 560;
GQLParser.RULE_listConcatenation = 561;
GQLParser.RULE_listPrimary = 562;
GQLParser.RULE_listValueFunction = 563;
GQLParser.RULE_trimListFunction = 564;
GQLParser.RULE_elementsFunction = 565;
GQLParser.RULE_listValueConstructor = 566;
GQLParser.RULE_listValueConstructorByEnumeration = 567;
GQLParser.RULE_listElementList = 568;
GQLParser.RULE_listElement = 569;
GQLParser.RULE_recordValueConstructor = 570;
GQLParser.RULE_fieldsSpec = 571;
GQLParser.RULE_fieldList = 572;
GQLParser.RULE_field = 573;
GQLParser.RULE_pathValueExpr = 574;
GQLParser.RULE_pathValueConcatenation = 575;
GQLParser.RULE_pathValuePrimary = 576;
GQLParser.RULE_pathValueConstructor = 577;
GQLParser.RULE_pathValueConstructorByEnumeration = 578;
GQLParser.RULE_pathElementList = 579;
GQLParser.RULE_pathElementListStart = 580;
GQLParser.RULE_pathElementListStep = 581;
GQLParser.RULE_propertyRef = 582;
GQLParser.RULE_propertySource = 583;
GQLParser.RULE_valueQueryExpr = 584;
GQLParser.RULE_caseExpr = 585;
GQLParser.RULE_caseAbbreviation = 586;
GQLParser.RULE_caseSpecification = 587;
GQLParser.RULE_simpleCase = 588;
GQLParser.RULE_searchedCase = 589;
GQLParser.RULE_simpleWhenClause = 590;
GQLParser.RULE_searchedWhenClause = 591;
GQLParser.RULE_elseClause = 592;
GQLParser.RULE_caseOperand = 593;
GQLParser.RULE_whenOperandList = 594;
GQLParser.RULE_whenOperand = 595;
GQLParser.RULE_result = 596;
GQLParser.RULE_resultExpr = 597;
GQLParser.RULE_castSpec = 598;
GQLParser.RULE_castOperand = 599;
GQLParser.RULE_castTarget = 600;
GQLParser.RULE_elementIdFunction = 601;
GQLParser.RULE_letValueExpr = 602;
GQLParser.RULE_literal = 603;
GQLParser.RULE_generalLiteral = 604;
GQLParser.RULE_predefinedTypeLiteral = 605;
GQLParser.RULE_unsignedLiteral = 606;
GQLParser.RULE_booleanLiteral = 607;
GQLParser.RULE_characterStringLiteral = 608;
GQLParser.RULE_unbrokenCharacterStringLiteral = 609;
GQLParser.RULE_singleQuotedCharacterSequence = 610;
GQLParser.RULE_doubleQuotedCharacterSequence = 611;
GQLParser.RULE_accentQuotedCharacterSequence = 612;
GQLParser.RULE_noEscape = 613;
GQLParser.RULE_unbrokenSingleQuotedCharacterSequence = 614;
GQLParser.RULE_unbrokenDoubleQuotedCharacterSequence = 615;
GQLParser.RULE_unbrokenAccentQuotedCharacterSequence = 616;
GQLParser.RULE_temporalLiteral = 617;
GQLParser.RULE_dateLiteral = 618;
GQLParser.RULE_timeLiteral = 619;
GQLParser.RULE_dateTimeLiteral = 620;
GQLParser.RULE_dateString = 621;
GQLParser.RULE_timeString = 622;
GQLParser.RULE_dateTimeString = 623;
GQLParser.RULE_sqlDateTimeLiteral = 624;
GQLParser.RULE_durationLiteral = 625;
GQLParser.RULE_durationString = 626;
GQLParser.RULE_sqlIntervalLiteral = 627;
GQLParser.RULE_sqlIntervalType = 628;
GQLParser.RULE_nullLiteral = 629;
GQLParser.RULE_listLiteral = 630;
GQLParser.RULE_recordLiteral = 631;
GQLParser.RULE_objectName = 632;
GQLParser.RULE_objectNameOrBindingVar = 633;
GQLParser.RULE_directoryName = 634;
GQLParser.RULE_schemaName = 635;
GQLParser.RULE_graphName = 636;
GQLParser.RULE_delimitedGraphName = 637;
GQLParser.RULE_graphTypeName = 638;
GQLParser.RULE_elementTypeName = 639;
GQLParser.RULE_bindingTableName = 640;
GQLParser.RULE_delimitedBindingTableName = 641;
GQLParser.RULE_procedureName = 642;
GQLParser.RULE_labelName = 643;
GQLParser.RULE_propertyName = 644;
GQLParser.RULE_fieldName = 645;
GQLParser.RULE_parameterName = 646;
GQLParser.RULE_var = 647;
GQLParser.RULE_graphVar = 648;
GQLParser.RULE_graphPatternVar = 649;
GQLParser.RULE_pathOrSubpathVar = 650;
GQLParser.RULE_elementVar = 651;
GQLParser.RULE_pathVar = 652;
GQLParser.RULE_subpathVar = 653;
GQLParser.RULE_bindingTableVar = 654;
GQLParser.RULE_valueVar = 655;
GQLParser.RULE_bindingVar = 656;
GQLParser.RULE_token = 657;
GQLParser.RULE_nonDelimiterToken = 658;
GQLParser.RULE_identifier = 659;
GQLParser.RULE_separatedIdentifier = 660;
GQLParser.RULE_nonDelimitedIdentifier = 661;
GQLParser.RULE_delimitedIdentifier = 662;
GQLParser.RULE_keyWord = 663;
GQLParser.RULE_reservedWord = 664;
GQLParser.RULE_preReservedWord = 665;
GQLParser.RULE_nonReservedWord = 666;
GQLParser.RULE_delimiterToken = 667;
GQLParser.RULE_edgeSynonym = 668;
GQLParser.RULE_edgesSynonym = 669;
GQLParser.RULE_nodeSynonym = 670;

class GqlProgramContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_gqlProgram;
    }

	EOF() {
	    return this.getToken(GQLParser.EOF, 0);
	};

	activity = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ActivityContext);
	    } else {
	        return this.getTypedRuleContext(ActivityContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGqlProgram(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGqlProgram(this);
		}
	}


}



class ActivityContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_activity;
    }

	programActivity() {
	    return this.getTypedRuleContext(ProgramActivityContext,0);
	};

	sessionCloseCommand() {
	    return this.getTypedRuleContext(SessionCloseCommandContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterActivity(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitActivity(this);
		}
	}


}



class ProgramActivityContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_programActivity;
    }

	sessionActivity() {
	    return this.getTypedRuleContext(SessionActivityContext,0);
	};

	transactionActivity() {
	    return this.getTypedRuleContext(TransactionActivityContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterProgramActivity(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitProgramActivity(this);
		}
	}


}



class SessionActivityContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_sessionActivity;
    }

	sessionSetCommand() {
	    return this.getTypedRuleContext(SessionSetCommandContext,0);
	};

	sessionResetCommand() {
	    return this.getTypedRuleContext(SessionResetCommandContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSessionActivity(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSessionActivity(this);
		}
	}


}



class SessionSetCommandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_sessionSetCommand;
    }

	SESSION() {
	    return this.getToken(GQLParser.SESSION, 0);
	};

	SET() {
	    return this.getToken(GQLParser.SET, 0);
	};

	sessionSetSchemaClause() {
	    return this.getTypedRuleContext(SessionSetSchemaClauseContext,0);
	};

	sessionSetGraphClause() {
	    return this.getTypedRuleContext(SessionSetGraphClauseContext,0);
	};

	sessionSetTimeZoneClause() {
	    return this.getTypedRuleContext(SessionSetTimeZoneClauseContext,0);
	};

	sessionSetParameterClause() {
	    return this.getTypedRuleContext(SessionSetParameterClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSessionSetCommand(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSessionSetCommand(this);
		}
	}


}



class SessionSetSchemaClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_sessionSetSchemaClause;
    }

	SCHEMA() {
	    return this.getToken(GQLParser.SCHEMA, 0);
	};

	schemaRef() {
	    return this.getTypedRuleContext(SchemaRefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSessionSetSchemaClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSessionSetSchemaClause(this);
		}
	}


}



class SessionSetGraphClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_sessionSetGraphClause;
    }

	GRAPH() {
	    return this.getToken(GQLParser.GRAPH, 0);
	};

	graphExpr() {
	    return this.getTypedRuleContext(GraphExprContext,0);
	};

	PROPERTY() {
	    return this.getToken(GQLParser.PROPERTY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSessionSetGraphClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSessionSetGraphClause(this);
		}
	}


}



class SessionSetTimeZoneClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_sessionSetTimeZoneClause;
    }

	TIME() {
	    return this.getToken(GQLParser.TIME, 0);
	};

	ZONE() {
	    return this.getToken(GQLParser.ZONE, 0);
	};

	setTimeZoneValue() {
	    return this.getTypedRuleContext(SetTimeZoneValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSessionSetTimeZoneClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSessionSetTimeZoneClause(this);
		}
	}


}



class SetTimeZoneValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_setTimeZoneValue;
    }

	stringValueExpr() {
	    return this.getTypedRuleContext(StringValueExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSetTimeZoneValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSetTimeZoneValue(this);
		}
	}


}



class SessionSetParameterClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_sessionSetParameterClause;
    }

	sessionSetGraphParameterClause() {
	    return this.getTypedRuleContext(SessionSetGraphParameterClauseContext,0);
	};

	sessionSetBindingTableParameterCalues() {
	    return this.getTypedRuleContext(SessionSetBindingTableParameterCaluesContext,0);
	};

	sessionSetValuesParameterClause() {
	    return this.getTypedRuleContext(SessionSetValuesParameterClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSessionSetParameterClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSessionSetParameterClause(this);
		}
	}


}



class SessionSetGraphParameterClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_sessionSetGraphParameterClause;
    }

	GRAPH() {
	    return this.getToken(GQLParser.GRAPH, 0);
	};

	sessionSetParameterName() {
	    return this.getTypedRuleContext(SessionSetParameterNameContext,0);
	};

	optTypedGraphInit() {
	    return this.getTypedRuleContext(OptTypedGraphInitContext,0);
	};

	PROPERTY() {
	    return this.getToken(GQLParser.PROPERTY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSessionSetGraphParameterClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSessionSetGraphParameterClause(this);
		}
	}


}



class SessionSetBindingTableParameterCaluesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_sessionSetBindingTableParameterCalues;
    }

	TABLE() {
	    return this.getToken(GQLParser.TABLE, 0);
	};

	sessionSetParameterName() {
	    return this.getTypedRuleContext(SessionSetParameterNameContext,0);
	};

	optTypedBindingTableInit() {
	    return this.getTypedRuleContext(OptTypedBindingTableInitContext,0);
	};

	BINDING() {
	    return this.getToken(GQLParser.BINDING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSessionSetBindingTableParameterCalues(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSessionSetBindingTableParameterCalues(this);
		}
	}


}



class SessionSetValuesParameterClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_sessionSetValuesParameterClause;
    }

	VALUE() {
	    return this.getToken(GQLParser.VALUE, 0);
	};

	sessionSetParameterName() {
	    return this.getTypedRuleContext(SessionSetParameterNameContext,0);
	};

	optTypedValueInit() {
	    return this.getTypedRuleContext(OptTypedValueInitContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSessionSetValuesParameterClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSessionSetValuesParameterClause(this);
		}
	}


}



class SessionSetParameterNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_sessionSetParameterName;
    }

	parameterName() {
	    return this.getTypedRuleContext(ParameterNameContext,0);
	};

	IF_NOT_EXISTS() {
	    return this.getToken(GQLParser.IF_NOT_EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSessionSetParameterName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSessionSetParameterName(this);
		}
	}


}



class SessionResetCommandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_sessionResetCommand;
    }

	RESET() {
	    return this.getToken(GQLParser.RESET, 0);
	};

	sessionResetArguments() {
	    return this.getTypedRuleContext(SessionResetArgumentsContext,0);
	};

	SESSION() {
	    return this.getToken(GQLParser.SESSION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSessionResetCommand(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSessionResetCommand(this);
		}
	}


}



class SessionResetArgumentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_sessionResetArguments;
    }

	PARAMETERS() {
	    return this.getToken(GQLParser.PARAMETERS, 0);
	};

	CHARACTERISTICS() {
	    return this.getToken(GQLParser.CHARACTERISTICS, 0);
	};

	ALL() {
	    return this.getToken(GQLParser.ALL, 0);
	};

	SCHEMA() {
	    return this.getToken(GQLParser.SCHEMA, 0);
	};

	GRAPH() {
	    return this.getToken(GQLParser.GRAPH, 0);
	};

	PROPERTY() {
	    return this.getToken(GQLParser.PROPERTY, 0);
	};

	TIME() {
	    return this.getToken(GQLParser.TIME, 0);
	};

	ZONE() {
	    return this.getToken(GQLParser.ZONE, 0);
	};

	PARAMETER() {
	    return this.getToken(GQLParser.PARAMETER, 0);
	};

	parameterName() {
	    return this.getTypedRuleContext(ParameterNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSessionResetArguments(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSessionResetArguments(this);
		}
	}


}



class SessionCloseCommandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_sessionCloseCommand;
    }

	CLOSE() {
	    return this.getToken(GQLParser.CLOSE, 0);
	};

	SESSION() {
	    return this.getToken(GQLParser.SESSION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSessionCloseCommand(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSessionCloseCommand(this);
		}
	}


}



class TransactionActivityContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_transactionActivity;
    }

	transactionStartCommand() {
	    return this.getTypedRuleContext(TransactionStartCommandContext,0);
	};

	procedureSpec() {
	    return this.getTypedRuleContext(ProcedureSpecContext,0);
	};

	transactionEndCommand() {
	    return this.getTypedRuleContext(TransactionEndCommandContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterTransactionActivity(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitTransactionActivity(this);
		}
	}


}



class TransactionStartCommandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_transactionStartCommand;
    }

	START() {
	    return this.getToken(GQLParser.START, 0);
	};

	TRANSACTION() {
	    return this.getToken(GQLParser.TRANSACTION, 0);
	};

	transactionCharacteristics() {
	    return this.getTypedRuleContext(TransactionCharacteristicsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterTransactionStartCommand(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitTransactionStartCommand(this);
		}
	}


}



class TransactionEndCommandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_transactionEndCommand;
    }

	ROLLBACK() {
	    return this.getToken(GQLParser.ROLLBACK, 0);
	};

	COMMIT() {
	    return this.getToken(GQLParser.COMMIT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterTransactionEndCommand(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitTransactionEndCommand(this);
		}
	}


}



class TransactionCharacteristicsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_transactionCharacteristics;
    }

	transactionMode = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TransactionModeContext);
	    } else {
	        return this.getTypedRuleContext(TransactionModeContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.COMMA);
	    } else {
	        return this.getToken(GQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterTransactionCharacteristics(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitTransactionCharacteristics(this);
		}
	}


}



class TransactionModeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_transactionMode;
    }

	transactionAccessMode() {
	    return this.getTypedRuleContext(TransactionAccessModeContext,0);
	};

	implDefinedAccessMode() {
	    return this.getTypedRuleContext(ImplDefinedAccessModeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterTransactionMode(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitTransactionMode(this);
		}
	}


}



class TransactionAccessModeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_transactionAccessMode;
    }

	READ() {
	    return this.getToken(GQLParser.READ, 0);
	};

	ONLY() {
	    return this.getToken(GQLParser.ONLY, 0);
	};

	WRITE() {
	    return this.getToken(GQLParser.WRITE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterTransactionAccessMode(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitTransactionAccessMode(this);
		}
	}


}



class ImplDefinedAccessModeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_implDefinedAccessMode;
    }


	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterImplDefinedAccessMode(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitImplDefinedAccessMode(this);
		}
	}


}



class NestedProcedureSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_nestedProcedureSpec;
    }

	LEFT_BRACE() {
	    return this.getToken(GQLParser.LEFT_BRACE, 0);
	};

	procedureSpec() {
	    return this.getTypedRuleContext(ProcedureSpecContext,0);
	};

	RIGHT_BRACE() {
	    return this.getToken(GQLParser.RIGHT_BRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterNestedProcedureSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitNestedProcedureSpec(this);
		}
	}


}



class ProcedureSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_procedureSpec;
    }

	procedureBody() {
	    return this.getTypedRuleContext(ProcedureBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterProcedureSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitProcedureSpec(this);
		}
	}


}



class NestedDataModProcedureSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_nestedDataModProcedureSpec;
    }

	LEFT_BRACE() {
	    return this.getToken(GQLParser.LEFT_BRACE, 0);
	};

	procedureBody() {
	    return this.getTypedRuleContext(ProcedureBodyContext,0);
	};

	RIGHT_BRACE() {
	    return this.getToken(GQLParser.RIGHT_BRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterNestedDataModProcedureSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitNestedDataModProcedureSpec(this);
		}
	}


}



class NestedQuerySpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_nestedQuerySpec;
    }

	LEFT_BRACE() {
	    return this.getToken(GQLParser.LEFT_BRACE, 0);
	};

	procedureBody() {
	    return this.getTypedRuleContext(ProcedureBodyContext,0);
	};

	RIGHT_BRACE() {
	    return this.getToken(GQLParser.RIGHT_BRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterNestedQuerySpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitNestedQuerySpec(this);
		}
	}


}



class ProcedureBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_procedureBody;
    }

	statmentBlock() {
	    return this.getTypedRuleContext(StatmentBlockContext,0);
	};

	atSchemaClause() {
	    return this.getTypedRuleContext(AtSchemaClauseContext,0);
	};

	bindingVarDefBlock() {
	    return this.getTypedRuleContext(BindingVarDefBlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterProcedureBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitProcedureBody(this);
		}
	}


}



class BindingVarDefBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_bindingVarDefBlock;
    }

	bindingVarDef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BindingVarDefContext);
	    } else {
	        return this.getTypedRuleContext(BindingVarDefContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterBindingVarDefBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitBindingVarDefBlock(this);
		}
	}


}



class BindingVarDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_bindingVarDef;
    }

	graphVarDef() {
	    return this.getTypedRuleContext(GraphVarDefContext,0);
	};

	bindingTableVarDef() {
	    return this.getTypedRuleContext(BindingTableVarDefContext,0);
	};

	valueVarDef() {
	    return this.getTypedRuleContext(ValueVarDefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterBindingVarDef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitBindingVarDef(this);
		}
	}


}



class StatmentBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_statmentBlock;
    }

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	nextStatment = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NextStatmentContext);
	    } else {
	        return this.getTypedRuleContext(NextStatmentContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterStatmentBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitStatmentBlock(this);
		}
	}


}



class StatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_statement;
    }

	linearCatalogModStatment() {
	    return this.getTypedRuleContext(LinearCatalogModStatmentContext,0);
	};

	linearDataModStatment() {
	    return this.getTypedRuleContext(LinearDataModStatmentContext,0);
	};

	compositeQueryStatment() {
	    return this.getTypedRuleContext(CompositeQueryStatmentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitStatement(this);
		}
	}


}



class NextStatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_nextStatment;
    }

	NEXT() {
	    return this.getToken(GQLParser.NEXT, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	yieldClause() {
	    return this.getTypedRuleContext(YieldClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterNextStatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitNextStatment(this);
		}
	}


}



class GraphVarDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_graphVarDef;
    }

	GRAPH() {
	    return this.getToken(GQLParser.GRAPH, 0);
	};

	graphVar() {
	    return this.getTypedRuleContext(GraphVarContext,0);
	};

	optTypedGraphInit() {
	    return this.getTypedRuleContext(OptTypedGraphInitContext,0);
	};

	PROPERTY() {
	    return this.getToken(GQLParser.PROPERTY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGraphVarDef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGraphVarDef(this);
		}
	}


}



class OptTypedGraphInitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_optTypedGraphInit;
    }

	graphInit() {
	    return this.getTypedRuleContext(GraphInitContext,0);
	};

	graphRefValueType() {
	    return this.getTypedRuleContext(GraphRefValueTypeContext,0);
	};

	typed() {
	    return this.getTypedRuleContext(TypedContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterOptTypedGraphInit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitOptTypedGraphInit(this);
		}
	}


}



class GraphInitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_graphInit;
    }

	EQUALS() {
	    return this.getToken(GQLParser.EQUALS, 0);
	};

	graphExpr() {
	    return this.getTypedRuleContext(GraphExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGraphInit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGraphInit(this);
		}
	}


}



class BindingTableVarDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_bindingTableVarDef;
    }

	TABLE() {
	    return this.getToken(GQLParser.TABLE, 0);
	};

	bindingTableVar() {
	    return this.getTypedRuleContext(BindingTableVarContext,0);
	};

	optTypedBindingTableInit() {
	    return this.getTypedRuleContext(OptTypedBindingTableInitContext,0);
	};

	BINDING() {
	    return this.getToken(GQLParser.BINDING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterBindingTableVarDef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitBindingTableVarDef(this);
		}
	}


}



class OptTypedBindingTableInitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_optTypedBindingTableInit;
    }

	bindingTableInit() {
	    return this.getTypedRuleContext(BindingTableInitContext,0);
	};

	bindingTableRefValueType() {
	    return this.getTypedRuleContext(BindingTableRefValueTypeContext,0);
	};

	typed() {
	    return this.getTypedRuleContext(TypedContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterOptTypedBindingTableInit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitOptTypedBindingTableInit(this);
		}
	}


}



class BindingTableInitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_bindingTableInit;
    }

	EQUALS() {
	    return this.getToken(GQLParser.EQUALS, 0);
	};

	bindingTableExpr() {
	    return this.getTypedRuleContext(BindingTableExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterBindingTableInit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitBindingTableInit(this);
		}
	}


}



class ValueVarDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_valueVarDef;
    }

	VALUE() {
	    return this.getToken(GQLParser.VALUE, 0);
	};

	valueVar() {
	    return this.getTypedRuleContext(ValueVarContext,0);
	};

	optTypedValueInit() {
	    return this.getTypedRuleContext(OptTypedValueInitContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterValueVarDef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitValueVarDef(this);
		}
	}


}



class OptTypedValueInitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_optTypedValueInit;
    }

	valueInit() {
	    return this.getTypedRuleContext(ValueInitContext,0);
	};

	valueType() {
	    return this.getTypedRuleContext(ValueTypeContext,0);
	};

	typed() {
	    return this.getTypedRuleContext(TypedContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterOptTypedValueInit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitOptTypedValueInit(this);
		}
	}


}



class ValueInitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_valueInit;
    }

	EQUALS() {
	    return this.getToken(GQLParser.EQUALS, 0);
	};

	valueExpr() {
	    return this.getTypedRuleContext(ValueExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterValueInit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitValueInit(this);
		}
	}


}



class GraphExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_graphExpr;
    }

	nestedGraphQuerySpec() {
	    return this.getTypedRuleContext(NestedGraphQuerySpecContext,0);
	};

	objectExprPrimary() {
	    return this.getTypedRuleContext(ObjectExprPrimaryContext,0);
	};

	graphRef() {
	    return this.getTypedRuleContext(GraphRefContext,0);
	};

	objectNameOrBindingVar() {
	    return this.getTypedRuleContext(ObjectNameOrBindingVarContext,0);
	};

	currentGraph() {
	    return this.getTypedRuleContext(CurrentGraphContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGraphExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGraphExpr(this);
		}
	}


}



class CurrentGraphContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_currentGraph;
    }

	CURRENT_PROPERTY_GRAPH() {
	    return this.getToken(GQLParser.CURRENT_PROPERTY_GRAPH, 0);
	};

	CURRENT_GRAPH() {
	    return this.getToken(GQLParser.CURRENT_GRAPH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterCurrentGraph(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitCurrentGraph(this);
		}
	}


}



class NestedGraphQuerySpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_nestedGraphQuerySpec;
    }

	nestedQuerySpec() {
	    return this.getTypedRuleContext(NestedQuerySpecContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterNestedGraphQuerySpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitNestedGraphQuerySpec(this);
		}
	}


}



class BindingTableExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_bindingTableExpr;
    }

	nestedBindingTableQuerySpec() {
	    return this.getTypedRuleContext(NestedBindingTableQuerySpecContext,0);
	};

	objectExprPrimary() {
	    return this.getTypedRuleContext(ObjectExprPrimaryContext,0);
	};

	bindingTableRef() {
	    return this.getTypedRuleContext(BindingTableRefContext,0);
	};

	objectNameOrBindingVar() {
	    return this.getTypedRuleContext(ObjectNameOrBindingVarContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterBindingTableExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitBindingTableExpr(this);
		}
	}


}



class NestedBindingTableQuerySpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_nestedBindingTableQuerySpec;
    }

	nestedQuerySpec() {
	    return this.getTypedRuleContext(NestedQuerySpecContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterNestedBindingTableQuerySpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitNestedBindingTableQuerySpec(this);
		}
	}


}



class ObjectExprPrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_objectExprPrimary;
    }

	VARIABLE() {
	    return this.getToken(GQLParser.VARIABLE, 0);
	};

	valueExprPrimary() {
	    return this.getTypedRuleContext(ValueExprPrimaryContext,0);
	};

	parenthesizedValueExpr() {
	    return this.getTypedRuleContext(ParenthesizedValueExprContext,0);
	};

	propertyRef() {
	    return this.getTypedRuleContext(PropertyRefContext,0);
	};

	unsignedValueSpec() {
	    return this.getTypedRuleContext(UnsignedValueSpecContext,0);
	};

	aggregateFunction() {
	    return this.getTypedRuleContext(AggregateFunctionContext,0);
	};

	collectionValueConstructor() {
	    return this.getTypedRuleContext(CollectionValueConstructorContext,0);
	};

	valueQueryExpr() {
	    return this.getTypedRuleContext(ValueQueryExprContext,0);
	};

	caseExpr() {
	    return this.getTypedRuleContext(CaseExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterObjectExprPrimary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitObjectExprPrimary(this);
		}
	}


}



class LinearCatalogModStatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_linearCatalogModStatment;
    }

	simpleCatalogModStatment = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SimpleCatalogModStatmentContext);
	    } else {
	        return this.getTypedRuleContext(SimpleCatalogModStatmentContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterLinearCatalogModStatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitLinearCatalogModStatment(this);
		}
	}


}



class SimpleCatalogModStatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simpleCatalogModStatment;
    }

	primitiveCatalogModStatment() {
	    return this.getTypedRuleContext(PrimitiveCatalogModStatmentContext,0);
	};

	callCatalogModProcedureStatment() {
	    return this.getTypedRuleContext(CallCatalogModProcedureStatmentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSimpleCatalogModStatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSimpleCatalogModStatment(this);
		}
	}


}



class PrimitiveCatalogModStatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_primitiveCatalogModStatment;
    }

	createSchemeStatment() {
	    return this.getTypedRuleContext(CreateSchemeStatmentContext,0);
	};

	createGraphStatment() {
	    return this.getTypedRuleContext(CreateGraphStatmentContext,0);
	};

	createGraphTypeStatment() {
	    return this.getTypedRuleContext(CreateGraphTypeStatmentContext,0);
	};

	dropSchemeStatment() {
	    return this.getTypedRuleContext(DropSchemeStatmentContext,0);
	};

	dropGraphStatment() {
	    return this.getTypedRuleContext(DropGraphStatmentContext,0);
	};

	dropGraphTypeStatment() {
	    return this.getTypedRuleContext(DropGraphTypeStatmentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterPrimitiveCatalogModStatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitPrimitiveCatalogModStatment(this);
		}
	}


}



class CreateSchemeStatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_createSchemeStatment;
    }

	CREATE() {
	    return this.getToken(GQLParser.CREATE, 0);
	};

	SCHEMA() {
	    return this.getToken(GQLParser.SCHEMA, 0);
	};

	catalogSchemaParentAndName() {
	    return this.getTypedRuleContext(CatalogSchemaParentAndNameContext,0);
	};

	IF_NOT_EXISTS() {
	    return this.getToken(GQLParser.IF_NOT_EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterCreateSchemeStatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitCreateSchemeStatment(this);
		}
	}


}



class DropSchemeStatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_dropSchemeStatment;
    }

	DROP() {
	    return this.getToken(GQLParser.DROP, 0);
	};

	SCHEMA() {
	    return this.getToken(GQLParser.SCHEMA, 0);
	};

	catalogSchemaParentAndName() {
	    return this.getTypedRuleContext(CatalogSchemaParentAndNameContext,0);
	};

	IF_EXISTS() {
	    return this.getToken(GQLParser.IF_EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterDropSchemeStatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitDropSchemeStatment(this);
		}
	}


}



class CreateGraphStatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_createGraphStatment;
    }

	createOnlyGraphStatment() {
	    return this.getTypedRuleContext(CreateOnlyGraphStatmentContext,0);
	};

	createOrReplaceGraphStatment() {
	    return this.getTypedRuleContext(CreateOrReplaceGraphStatmentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterCreateGraphStatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitCreateGraphStatment(this);
		}
	}


}



class CreateOnlyGraphStatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_createOnlyGraphStatment;
    }

	CREATE() {
	    return this.getToken(GQLParser.CREATE, 0);
	};

	GRAPH() {
	    return this.getToken(GQLParser.GRAPH, 0);
	};

	catalogGraphParentAndName() {
	    return this.getTypedRuleContext(CatalogGraphParentAndNameContext,0);
	};

	openGraphType() {
	    return this.getTypedRuleContext(OpenGraphTypeContext,0);
	};

	ofGraphType() {
	    return this.getTypedRuleContext(OfGraphTypeContext,0);
	};

	PROPERTY() {
	    return this.getToken(GQLParser.PROPERTY, 0);
	};

	IF_NOT_EXISTS() {
	    return this.getToken(GQLParser.IF_NOT_EXISTS, 0);
	};

	graphSource() {
	    return this.getTypedRuleContext(GraphSourceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterCreateOnlyGraphStatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitCreateOnlyGraphStatment(this);
		}
	}


}



class CreateOrReplaceGraphStatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_createOrReplaceGraphStatment;
    }

	CREATE() {
	    return this.getToken(GQLParser.CREATE, 0);
	};

	OR() {
	    return this.getToken(GQLParser.OR, 0);
	};

	REPLACE() {
	    return this.getToken(GQLParser.REPLACE, 0);
	};

	GRAPH() {
	    return this.getToken(GQLParser.GRAPH, 0);
	};

	catalogGraphParentAndName() {
	    return this.getTypedRuleContext(CatalogGraphParentAndNameContext,0);
	};

	openGraphType() {
	    return this.getTypedRuleContext(OpenGraphTypeContext,0);
	};

	ofGraphType() {
	    return this.getTypedRuleContext(OfGraphTypeContext,0);
	};

	PROPERTY() {
	    return this.getToken(GQLParser.PROPERTY, 0);
	};

	graphSource() {
	    return this.getTypedRuleContext(GraphSourceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterCreateOrReplaceGraphStatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitCreateOrReplaceGraphStatment(this);
		}
	}


}



class OpenGraphTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_openGraphType;
    }

	OPEN() {
	    return this.getToken(GQLParser.OPEN, 0);
	};

	TYPE() {
	    return this.getToken(GQLParser.TYPE, 0);
	};

	GRAPH() {
	    return this.getToken(GQLParser.GRAPH, 0);
	};

	PROPERTY() {
	    return this.getToken(GQLParser.PROPERTY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterOpenGraphType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitOpenGraphType(this);
		}
	}


}



class OfGraphTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_ofGraphType;
    }

	graphTypeLikeGraph() {
	    return this.getTypedRuleContext(GraphTypeLikeGraphContext,0);
	};

	graphTypeRef() {
	    return this.getTypedRuleContext(GraphTypeRefContext,0);
	};

	typed() {
	    return this.getTypedRuleContext(TypedContext,0);
	};

	nestedGraphTypeSpec() {
	    return this.getTypedRuleContext(NestedGraphTypeSpecContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterOfGraphType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitOfGraphType(this);
		}
	}


}



class GraphTypeLikeGraphContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_graphTypeLikeGraph;
    }

	LIKE() {
	    return this.getToken(GQLParser.LIKE, 0);
	};

	graphExpr() {
	    return this.getTypedRuleContext(GraphExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGraphTypeLikeGraph(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGraphTypeLikeGraph(this);
		}
	}


}



class GraphSourceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_graphSource;
    }

	AS() {
	    return this.getToken(GQLParser.AS, 0);
	};

	COPY() {
	    return this.getToken(GQLParser.COPY, 0);
	};

	OF() {
	    return this.getToken(GQLParser.OF, 0);
	};

	graphExpr() {
	    return this.getTypedRuleContext(GraphExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGraphSource(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGraphSource(this);
		}
	}


}



class DropGraphStatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_dropGraphStatment;
    }

	DROP() {
	    return this.getToken(GQLParser.DROP, 0);
	};

	GRAPH() {
	    return this.getToken(GQLParser.GRAPH, 0);
	};

	catalogGraphParentAndName() {
	    return this.getTypedRuleContext(CatalogGraphParentAndNameContext,0);
	};

	PROPERTY() {
	    return this.getToken(GQLParser.PROPERTY, 0);
	};

	IF_EXISTS() {
	    return this.getToken(GQLParser.IF_EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterDropGraphStatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitDropGraphStatment(this);
		}
	}


}



class CreateGraphTypeStatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_createGraphTypeStatment;
    }

	CREATE() {
	    return this.getToken(GQLParser.CREATE, 0);
	};

	catalogGraphTypeParentAndName() {
	    return this.getTypedRuleContext(CatalogGraphTypeParentAndNameContext,0);
	};

	graphTypeSource() {
	    return this.getTypedRuleContext(GraphTypeSourceContext,0);
	};

	GRAPH() {
	    return this.getToken(GQLParser.GRAPH, 0);
	};

	TYPE() {
	    return this.getToken(GQLParser.TYPE, 0);
	};

	OR() {
	    return this.getToken(GQLParser.OR, 0);
	};

	REPLACE() {
	    return this.getToken(GQLParser.REPLACE, 0);
	};

	PROPERTY() {
	    return this.getToken(GQLParser.PROPERTY, 0);
	};

	IF_NOT_EXISTS() {
	    return this.getToken(GQLParser.IF_NOT_EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterCreateGraphTypeStatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitCreateGraphTypeStatment(this);
		}
	}


}



class GraphTypeSourceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_graphTypeSource;
    }

	copyOfGraphType() {
	    return this.getTypedRuleContext(CopyOfGraphTypeContext,0);
	};

	AS() {
	    return this.getToken(GQLParser.AS, 0);
	};

	graphTypeLikeGraph() {
	    return this.getTypedRuleContext(GraphTypeLikeGraphContext,0);
	};

	nestedGraphTypeSpec() {
	    return this.getTypedRuleContext(NestedGraphTypeSpecContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGraphTypeSource(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGraphTypeSource(this);
		}
	}


}



class CopyOfGraphTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_copyOfGraphType;
    }

	COPY() {
	    return this.getToken(GQLParser.COPY, 0);
	};

	OF() {
	    return this.getToken(GQLParser.OF, 0);
	};

	graphTypeRef() {
	    return this.getTypedRuleContext(GraphTypeRefContext,0);
	};

	externalObjectRef() {
	    return this.getTypedRuleContext(ExternalObjectRefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterCopyOfGraphType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitCopyOfGraphType(this);
		}
	}


}



class DropGraphTypeStatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_dropGraphTypeStatment;
    }

	DROP() {
	    return this.getToken(GQLParser.DROP, 0);
	};

	GRAPH() {
	    return this.getToken(GQLParser.GRAPH, 0);
	};

	TYPE() {
	    return this.getToken(GQLParser.TYPE, 0);
	};

	catalogGraphTypeParentAndName() {
	    return this.getTypedRuleContext(CatalogGraphTypeParentAndNameContext,0);
	};

	PROPERTY() {
	    return this.getToken(GQLParser.PROPERTY, 0);
	};

	IF_EXISTS() {
	    return this.getToken(GQLParser.IF_EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterDropGraphTypeStatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitDropGraphTypeStatment(this);
		}
	}


}



class CallCatalogModProcedureStatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_callCatalogModProcedureStatment;
    }

	callProcedureStatment() {
	    return this.getTypedRuleContext(CallProcedureStatmentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterCallCatalogModProcedureStatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitCallCatalogModProcedureStatment(this);
		}
	}


}



class LinearDataModStatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_linearDataModStatment;
    }

	focusedLinearDataModStatment() {
	    return this.getTypedRuleContext(FocusedLinearDataModStatmentContext,0);
	};

	ambientLinearDataModStatment() {
	    return this.getTypedRuleContext(AmbientLinearDataModStatmentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterLinearDataModStatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitLinearDataModStatment(this);
		}
	}


}



class FocusedLinearDataModStatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_focusedLinearDataModStatment;
    }

	focusedLinearDataModStatmentBody() {
	    return this.getTypedRuleContext(FocusedLinearDataModStatmentBodyContext,0);
	};

	focusedNestedDataModProcedureSpec() {
	    return this.getTypedRuleContext(FocusedNestedDataModProcedureSpecContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterFocusedLinearDataModStatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitFocusedLinearDataModStatment(this);
		}
	}


}



class FocusedLinearDataModStatmentBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_focusedLinearDataModStatmentBody;
    }

	useGraphClause() {
	    return this.getTypedRuleContext(UseGraphClauseContext,0);
	};

	simpleLinearDataAccessingStatment() {
	    return this.getTypedRuleContext(SimpleLinearDataAccessingStatmentContext,0);
	};

	primitiveResultStatment() {
	    return this.getTypedRuleContext(PrimitiveResultStatmentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterFocusedLinearDataModStatmentBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitFocusedLinearDataModStatmentBody(this);
		}
	}


}



class FocusedNestedDataModProcedureSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_focusedNestedDataModProcedureSpec;
    }

	useGraphClause() {
	    return this.getTypedRuleContext(UseGraphClauseContext,0);
	};

	nestedDataModProcedureSpec() {
	    return this.getTypedRuleContext(NestedDataModProcedureSpecContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterFocusedNestedDataModProcedureSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitFocusedNestedDataModProcedureSpec(this);
		}
	}


}



class AmbientLinearDataModStatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_ambientLinearDataModStatment;
    }

	ambientLinearDataModStatmentBody() {
	    return this.getTypedRuleContext(AmbientLinearDataModStatmentBodyContext,0);
	};

	nestedDataModProcedureSpec() {
	    return this.getTypedRuleContext(NestedDataModProcedureSpecContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterAmbientLinearDataModStatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitAmbientLinearDataModStatment(this);
		}
	}


}



class AmbientLinearDataModStatmentBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_ambientLinearDataModStatmentBody;
    }

	simpleLinearDataAccessingStatment() {
	    return this.getTypedRuleContext(SimpleLinearDataAccessingStatmentContext,0);
	};

	primitiveResultStatment() {
	    return this.getTypedRuleContext(PrimitiveResultStatmentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterAmbientLinearDataModStatmentBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitAmbientLinearDataModStatmentBody(this);
		}
	}


}



class SimpleLinearDataAccessingStatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simpleLinearDataAccessingStatment;
    }

	simpleDataAccessingStatment = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SimpleDataAccessingStatmentContext);
	    } else {
	        return this.getTypedRuleContext(SimpleDataAccessingStatmentContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSimpleLinearDataAccessingStatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSimpleLinearDataAccessingStatment(this);
		}
	}


}



class SimpleDataAccessingStatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simpleDataAccessingStatment;
    }

	simpleQueryStatment() {
	    return this.getTypedRuleContext(SimpleQueryStatmentContext,0);
	};

	simpleDataModStatment() {
	    return this.getTypedRuleContext(SimpleDataModStatmentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSimpleDataAccessingStatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSimpleDataAccessingStatment(this);
		}
	}


}



class SimpleDataModStatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simpleDataModStatment;
    }

	primitiveDataModStatment() {
	    return this.getTypedRuleContext(PrimitiveDataModStatmentContext,0);
	};

	callDataModProcedureStatment() {
	    return this.getTypedRuleContext(CallDataModProcedureStatmentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSimpleDataModStatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSimpleDataModStatment(this);
		}
	}


}



class PrimitiveDataModStatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_primitiveDataModStatment;
    }

	insertStatment() {
	    return this.getTypedRuleContext(InsertStatmentContext,0);
	};

	setStatment() {
	    return this.getTypedRuleContext(SetStatmentContext,0);
	};

	removeStatment() {
	    return this.getTypedRuleContext(RemoveStatmentContext,0);
	};

	deleteStatment() {
	    return this.getTypedRuleContext(DeleteStatmentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterPrimitiveDataModStatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitPrimitiveDataModStatment(this);
		}
	}


}



class InsertStatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_insertStatment;
    }

	INSERT() {
	    return this.getToken(GQLParser.INSERT, 0);
	};

	insertGraphPattern() {
	    return this.getTypedRuleContext(InsertGraphPatternContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterInsertStatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitInsertStatment(this);
		}
	}


}



class SetStatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_setStatment;
    }

	SET() {
	    return this.getToken(GQLParser.SET, 0);
	};

	setItemList() {
	    return this.getTypedRuleContext(SetItemListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSetStatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSetStatment(this);
		}
	}


}



class SetItemListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_setItemList;
    }

	setItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SetItemContext);
	    } else {
	        return this.getTypedRuleContext(SetItemContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.COMMA);
	    } else {
	        return this.getToken(GQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSetItemList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSetItemList(this);
		}
	}


}



class SetItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_setItem;
    }

	setPropertyItem() {
	    return this.getTypedRuleContext(SetPropertyItemContext,0);
	};

	setAllPropertiesItem() {
	    return this.getTypedRuleContext(SetAllPropertiesItemContext,0);
	};

	setLabelItem() {
	    return this.getTypedRuleContext(SetLabelItemContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSetItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSetItem(this);
		}
	}


}



class SetPropertyItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_setPropertyItem;
    }

	bindingVarRef() {
	    return this.getTypedRuleContext(BindingVarRefContext,0);
	};

	PERIOD() {
	    return this.getToken(GQLParser.PERIOD, 0);
	};

	propertyName() {
	    return this.getTypedRuleContext(PropertyNameContext,0);
	};

	EQUALS() {
	    return this.getToken(GQLParser.EQUALS, 0);
	};

	valueExpr() {
	    return this.getTypedRuleContext(ValueExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSetPropertyItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSetPropertyItem(this);
		}
	}


}



class SetAllPropertiesItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_setAllPropertiesItem;
    }

	bindingVarRef() {
	    return this.getTypedRuleContext(BindingVarRefContext,0);
	};

	EQUALS() {
	    return this.getToken(GQLParser.EQUALS, 0);
	};

	LEFT_BRACE() {
	    return this.getToken(GQLParser.LEFT_BRACE, 0);
	};

	RIGHT_BRACE() {
	    return this.getToken(GQLParser.RIGHT_BRACE, 0);
	};

	propertyKeyValuePairList() {
	    return this.getTypedRuleContext(PropertyKeyValuePairListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSetAllPropertiesItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSetAllPropertiesItem(this);
		}
	}


}



class SetLabelItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_setLabelItem;
    }

	bindingVarRef() {
	    return this.getTypedRuleContext(BindingVarRefContext,0);
	};

	isOrColon() {
	    return this.getTypedRuleContext(IsOrColonContext,0);
	};

	labelSetSpec() {
	    return this.getTypedRuleContext(LabelSetSpecContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSetLabelItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSetLabelItem(this);
		}
	}


}



class LabelSetSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_labelSetSpec;
    }

	labelName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LabelNameContext);
	    } else {
	        return this.getTypedRuleContext(LabelNameContext,i);
	    }
	};

	AMPERSAND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.AMPERSAND);
	    } else {
	        return this.getToken(GQLParser.AMPERSAND, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterLabelSetSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitLabelSetSpec(this);
		}
	}


}



class RemoveStatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_removeStatment;
    }

	REMOVE() {
	    return this.getToken(GQLParser.REMOVE, 0);
	};

	removeItemList() {
	    return this.getTypedRuleContext(RemoveItemListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterRemoveStatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitRemoveStatment(this);
		}
	}


}



class RemoveItemListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_removeItemList;
    }

	removeItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RemoveItemContext);
	    } else {
	        return this.getTypedRuleContext(RemoveItemContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.COMMA);
	    } else {
	        return this.getToken(GQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterRemoveItemList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitRemoveItemList(this);
		}
	}


}



class RemoveItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_removeItem;
    }

	removePropertyItem() {
	    return this.getTypedRuleContext(RemovePropertyItemContext,0);
	};

	removeLabelItem() {
	    return this.getTypedRuleContext(RemoveLabelItemContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterRemoveItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitRemoveItem(this);
		}
	}


}



class RemovePropertyItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_removePropertyItem;
    }

	bindingVarRef() {
	    return this.getTypedRuleContext(BindingVarRefContext,0);
	};

	PERIOD() {
	    return this.getToken(GQLParser.PERIOD, 0);
	};

	propertyName() {
	    return this.getTypedRuleContext(PropertyNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterRemovePropertyItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitRemovePropertyItem(this);
		}
	}


}



class RemoveLabelItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_removeLabelItem;
    }

	bindingVarRef() {
	    return this.getTypedRuleContext(BindingVarRefContext,0);
	};

	isOrColon() {
	    return this.getTypedRuleContext(IsOrColonContext,0);
	};

	labelSetSpec() {
	    return this.getTypedRuleContext(LabelSetSpecContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterRemoveLabelItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitRemoveLabelItem(this);
		}
	}


}



class DeleteStatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_deleteStatment;
    }

	DELETE() {
	    return this.getToken(GQLParser.DELETE, 0);
	};

	deleteItemList() {
	    return this.getTypedRuleContext(DeleteItemListContext,0);
	};

	DETACH() {
	    return this.getToken(GQLParser.DETACH, 0);
	};

	NODETACH() {
	    return this.getToken(GQLParser.NODETACH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterDeleteStatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitDeleteStatment(this);
		}
	}


}



class DeleteItemListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_deleteItemList;
    }

	deleteItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DeleteItemContext);
	    } else {
	        return this.getTypedRuleContext(DeleteItemContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.COMMA);
	    } else {
	        return this.getToken(GQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterDeleteItemList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitDeleteItemList(this);
		}
	}


}



class DeleteItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_deleteItem;
    }

	valueExpr() {
	    return this.getTypedRuleContext(ValueExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterDeleteItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitDeleteItem(this);
		}
	}


}



class CallDataModProcedureStatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_callDataModProcedureStatment;
    }

	callProcedureStatment() {
	    return this.getTypedRuleContext(CallProcedureStatmentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterCallDataModProcedureStatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitCallDataModProcedureStatment(this);
		}
	}


}



class CompositeQueryStatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_compositeQueryStatment;
    }

	compositeQueryExpr() {
	    return this.getTypedRuleContext(CompositeQueryExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterCompositeQueryStatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitCompositeQueryStatment(this);
		}
	}


}



class CompositeQueryExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_compositeQueryExpr;
    }

	compositeQueryPrimary() {
	    return this.getTypedRuleContext(CompositeQueryPrimaryContext,0);
	};

	compositeQueryExpr() {
	    return this.getTypedRuleContext(CompositeQueryExprContext,0);
	};

	queryConjunction() {
	    return this.getTypedRuleContext(QueryConjunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterCompositeQueryExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitCompositeQueryExpr(this);
		}
	}


}



class QueryConjunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_queryConjunction;
    }

	setOperator() {
	    return this.getTypedRuleContext(SetOperatorContext,0);
	};

	OTHERWISE() {
	    return this.getToken(GQLParser.OTHERWISE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterQueryConjunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitQueryConjunction(this);
		}
	}


}



class SetOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_setOperator;
    }

	setQuantifier() {
	    return this.getTypedRuleContext(SetQuantifierContext,0);
	};

	UNION() {
	    return this.getToken(GQLParser.UNION, 0);
	};

	EXCEPT() {
	    return this.getToken(GQLParser.EXCEPT, 0);
	};

	INTERSECT() {
	    return this.getToken(GQLParser.INTERSECT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSetOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSetOperator(this);
		}
	}


}



class CompositeQueryPrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_compositeQueryPrimary;
    }

	linearQueryStatment() {
	    return this.getTypedRuleContext(LinearQueryStatmentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterCompositeQueryPrimary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitCompositeQueryPrimary(this);
		}
	}


}



class LinearQueryStatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_linearQueryStatment;
    }

	focusedLinearQueryStatment() {
	    return this.getTypedRuleContext(FocusedLinearQueryStatmentContext,0);
	};

	ambientLinearQueryStatment() {
	    return this.getTypedRuleContext(AmbientLinearQueryStatmentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterLinearQueryStatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitLinearQueryStatment(this);
		}
	}


}



class FocusedLinearQueryStatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_focusedLinearQueryStatment;
    }

	focusedLinearQueryAndPrimitiveResultStatmentPart() {
	    return this.getTypedRuleContext(FocusedLinearQueryAndPrimitiveResultStatmentPartContext,0);
	};

	focusedLinearQueryStatmentPart = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FocusedLinearQueryStatmentPartContext);
	    } else {
	        return this.getTypedRuleContext(FocusedLinearQueryStatmentPartContext,i);
	    }
	};

	focusedPrimitiveResultStatment() {
	    return this.getTypedRuleContext(FocusedPrimitiveResultStatmentContext,0);
	};

	focusedNestedQuerySpec() {
	    return this.getTypedRuleContext(FocusedNestedQuerySpecContext,0);
	};

	selectStatment() {
	    return this.getTypedRuleContext(SelectStatmentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterFocusedLinearQueryStatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitFocusedLinearQueryStatment(this);
		}
	}


}



class FocusedLinearQueryStatmentPartContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_focusedLinearQueryStatmentPart;
    }

	useGraphClause() {
	    return this.getTypedRuleContext(UseGraphClauseContext,0);
	};

	simpleLinearQueryStatment() {
	    return this.getTypedRuleContext(SimpleLinearQueryStatmentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterFocusedLinearQueryStatmentPart(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitFocusedLinearQueryStatmentPart(this);
		}
	}


}



class FocusedLinearQueryAndPrimitiveResultStatmentPartContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_focusedLinearQueryAndPrimitiveResultStatmentPart;
    }

	useGraphClause() {
	    return this.getTypedRuleContext(UseGraphClauseContext,0);
	};

	simpleLinearQueryStatment() {
	    return this.getTypedRuleContext(SimpleLinearQueryStatmentContext,0);
	};

	primitiveResultStatment() {
	    return this.getTypedRuleContext(PrimitiveResultStatmentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterFocusedLinearQueryAndPrimitiveResultStatmentPart(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitFocusedLinearQueryAndPrimitiveResultStatmentPart(this);
		}
	}


}



class FocusedPrimitiveResultStatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_focusedPrimitiveResultStatment;
    }

	useGraphClause() {
	    return this.getTypedRuleContext(UseGraphClauseContext,0);
	};

	primitiveResultStatment() {
	    return this.getTypedRuleContext(PrimitiveResultStatmentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterFocusedPrimitiveResultStatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitFocusedPrimitiveResultStatment(this);
		}
	}


}



class FocusedNestedQuerySpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_focusedNestedQuerySpec;
    }

	useGraphClause() {
	    return this.getTypedRuleContext(UseGraphClauseContext,0);
	};

	nestedQuerySpec() {
	    return this.getTypedRuleContext(NestedQuerySpecContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterFocusedNestedQuerySpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitFocusedNestedQuerySpec(this);
		}
	}


}



class AmbientLinearQueryStatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_ambientLinearQueryStatment;
    }

	primitiveResultStatment() {
	    return this.getTypedRuleContext(PrimitiveResultStatmentContext,0);
	};

	simpleLinearQueryStatment() {
	    return this.getTypedRuleContext(SimpleLinearQueryStatmentContext,0);
	};

	nestedQuerySpec() {
	    return this.getTypedRuleContext(NestedQuerySpecContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterAmbientLinearQueryStatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitAmbientLinearQueryStatment(this);
		}
	}


}



class SimpleLinearQueryStatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simpleLinearQueryStatment;
    }

	simpleQueryStatment = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SimpleQueryStatmentContext);
	    } else {
	        return this.getTypedRuleContext(SimpleQueryStatmentContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSimpleLinearQueryStatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSimpleLinearQueryStatment(this);
		}
	}


}



class SimpleQueryStatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simpleQueryStatment;
    }

	primitiveQueryStatment() {
	    return this.getTypedRuleContext(PrimitiveQueryStatmentContext,0);
	};

	callQueryStatment() {
	    return this.getTypedRuleContext(CallQueryStatmentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSimpleQueryStatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSimpleQueryStatment(this);
		}
	}


}



class PrimitiveQueryStatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_primitiveQueryStatment;
    }

	matchStatment() {
	    return this.getTypedRuleContext(MatchStatmentContext,0);
	};

	letStatment() {
	    return this.getTypedRuleContext(LetStatmentContext,0);
	};

	forStatment() {
	    return this.getTypedRuleContext(ForStatmentContext,0);
	};

	filterStatment() {
	    return this.getTypedRuleContext(FilterStatmentContext,0);
	};

	orderByAndPageStatment() {
	    return this.getTypedRuleContext(OrderByAndPageStatmentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterPrimitiveQueryStatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitPrimitiveQueryStatment(this);
		}
	}


}



class MatchStatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_matchStatment;
    }

	simpleMatchStatment() {
	    return this.getTypedRuleContext(SimpleMatchStatmentContext,0);
	};

	optionalMatchStatment() {
	    return this.getTypedRuleContext(OptionalMatchStatmentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterMatchStatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitMatchStatment(this);
		}
	}


}



class SimpleMatchStatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simpleMatchStatment;
    }

	MATCH() {
	    return this.getToken(GQLParser.MATCH, 0);
	};

	graphPatternBindingTable() {
	    return this.getTypedRuleContext(GraphPatternBindingTableContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSimpleMatchStatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSimpleMatchStatment(this);
		}
	}


}



class OptionalMatchStatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_optionalMatchStatment;
    }

	OPTIONAL() {
	    return this.getToken(GQLParser.OPTIONAL, 0);
	};

	optionalOperand() {
	    return this.getTypedRuleContext(OptionalOperandContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterOptionalMatchStatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitOptionalMatchStatment(this);
		}
	}


}



class OptionalOperandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_optionalOperand;
    }

	simpleMatchStatment() {
	    return this.getTypedRuleContext(SimpleMatchStatmentContext,0);
	};

	LEFT_BRACE() {
	    return this.getToken(GQLParser.LEFT_BRACE, 0);
	};

	matchStatmentBlock() {
	    return this.getTypedRuleContext(MatchStatmentBlockContext,0);
	};

	RIGHT_BRACE() {
	    return this.getToken(GQLParser.RIGHT_BRACE, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterOptionalOperand(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitOptionalOperand(this);
		}
	}


}



class MatchStatmentBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_matchStatmentBlock;
    }

	matchStatment = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MatchStatmentContext);
	    } else {
	        return this.getTypedRuleContext(MatchStatmentContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterMatchStatmentBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitMatchStatmentBlock(this);
		}
	}


}



class CallQueryStatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_callQueryStatment;
    }

	callProcedureStatment() {
	    return this.getTypedRuleContext(CallProcedureStatmentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterCallQueryStatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitCallQueryStatment(this);
		}
	}


}



class FilterStatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_filterStatment;
    }

	FILTER() {
	    return this.getToken(GQLParser.FILTER, 0);
	};

	whereClause() {
	    return this.getTypedRuleContext(WhereClauseContext,0);
	};

	searchCondition() {
	    return this.getTypedRuleContext(SearchConditionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterFilterStatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitFilterStatment(this);
		}
	}


}



class LetStatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_letStatment;
    }

	LET() {
	    return this.getToken(GQLParser.LET, 0);
	};

	letVarDefList() {
	    return this.getTypedRuleContext(LetVarDefListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterLetStatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitLetStatment(this);
		}
	}


}



class LetVarDefListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_letVarDefList;
    }

	letVarDef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LetVarDefContext);
	    } else {
	        return this.getTypedRuleContext(LetVarDefContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.COMMA);
	    } else {
	        return this.getToken(GQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterLetVarDefList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitLetVarDefList(this);
		}
	}


}



class LetVarDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_letVarDef;
    }

	valueVarDef() {
	    return this.getTypedRuleContext(ValueVarDefContext,0);
	};

	valueVar() {
	    return this.getTypedRuleContext(ValueVarContext,0);
	};

	EQUALS() {
	    return this.getToken(GQLParser.EQUALS, 0);
	};

	valueExpr() {
	    return this.getTypedRuleContext(ValueExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterLetVarDef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitLetVarDef(this);
		}
	}


}



class ForStatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_forStatment;
    }

	FOR() {
	    return this.getToken(GQLParser.FOR, 0);
	};

	forItem() {
	    return this.getTypedRuleContext(ForItemContext,0);
	};

	forOrdinalityOrOffset() {
	    return this.getTypedRuleContext(ForOrdinalityOrOffsetContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterForStatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitForStatment(this);
		}
	}


}



class ForItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_forItem;
    }

	forItemAlias() {
	    return this.getTypedRuleContext(ForItemAliasContext,0);
	};

	listValueExpr() {
	    return this.getTypedRuleContext(ListValueExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterForItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitForItem(this);
		}
	}


}



class ForItemAliasContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_forItemAlias;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	IN() {
	    return this.getToken(GQLParser.IN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterForItemAlias(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitForItemAlias(this);
		}
	}


}



class ForOrdinalityOrOffsetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_forOrdinalityOrOffset;
    }

	WITH() {
	    return this.getToken(GQLParser.WITH, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	ORDINALITY() {
	    return this.getToken(GQLParser.ORDINALITY, 0);
	};

	OFFSET() {
	    return this.getToken(GQLParser.OFFSET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterForOrdinalityOrOffset(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitForOrdinalityOrOffset(this);
		}
	}


}



class OrderByAndPageStatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_orderByAndPageStatment;
    }

	orderByClause() {
	    return this.getTypedRuleContext(OrderByClauseContext,0);
	};

	offsetClause() {
	    return this.getTypedRuleContext(OffsetClauseContext,0);
	};

	limitClause() {
	    return this.getTypedRuleContext(LimitClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterOrderByAndPageStatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitOrderByAndPageStatment(this);
		}
	}


}



class PrimitiveResultStatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_primitiveResultStatment;
    }

	returnStatment() {
	    return this.getTypedRuleContext(ReturnStatmentContext,0);
	};

	orderByAndPageStatment() {
	    return this.getTypedRuleContext(OrderByAndPageStatmentContext,0);
	};

	FINISH() {
	    return this.getToken(GQLParser.FINISH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterPrimitiveResultStatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitPrimitiveResultStatment(this);
		}
	}


}



class ReturnStatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_returnStatment;
    }

	RETURN() {
	    return this.getToken(GQLParser.RETURN, 0);
	};

	returnStatmentBody() {
	    return this.getTypedRuleContext(ReturnStatmentBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterReturnStatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitReturnStatment(this);
		}
	}


}



class ReturnStatmentBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_returnStatmentBody;
    }

	ASTERISK() {
	    return this.getToken(GQLParser.ASTERISK, 0);
	};

	returnItemList() {
	    return this.getTypedRuleContext(ReturnItemListContext,0);
	};

	setQuantifier() {
	    return this.getTypedRuleContext(SetQuantifierContext,0);
	};

	groupByClause() {
	    return this.getTypedRuleContext(GroupByClauseContext,0);
	};

	NO() {
	    return this.getToken(GQLParser.NO, 0);
	};

	BINDINGS() {
	    return this.getToken(GQLParser.BINDINGS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterReturnStatmentBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitReturnStatmentBody(this);
		}
	}


}



class ReturnItemListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_returnItemList;
    }

	returnItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ReturnItemContext);
	    } else {
	        return this.getTypedRuleContext(ReturnItemContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.COMMA);
	    } else {
	        return this.getToken(GQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterReturnItemList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitReturnItemList(this);
		}
	}


}



class ReturnItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_returnItem;
    }

	aggregatingValueExpr() {
	    return this.getTypedRuleContext(AggregatingValueExprContext,0);
	};

	returnItemAlias() {
	    return this.getTypedRuleContext(ReturnItemAliasContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterReturnItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitReturnItem(this);
		}
	}


}



class ReturnItemAliasContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_returnItemAlias;
    }

	AS() {
	    return this.getToken(GQLParser.AS, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterReturnItemAlias(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitReturnItemAlias(this);
		}
	}


}



class SelectStatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_selectStatment;
    }

	SELECT() {
	    return this.getToken(GQLParser.SELECT, 0);
	};

	selectItemList() {
	    return this.getTypedRuleContext(SelectItemListContext,0);
	};

	ASTERISK() {
	    return this.getToken(GQLParser.ASTERISK, 0);
	};

	setQuantifier() {
	    return this.getTypedRuleContext(SetQuantifierContext,0);
	};

	selectStatmentBody() {
	    return this.getTypedRuleContext(SelectStatmentBodyContext,0);
	};

	whereClause() {
	    return this.getTypedRuleContext(WhereClauseContext,0);
	};

	groupByClause() {
	    return this.getTypedRuleContext(GroupByClauseContext,0);
	};

	havingClause() {
	    return this.getTypedRuleContext(HavingClauseContext,0);
	};

	orderByClause() {
	    return this.getTypedRuleContext(OrderByClauseContext,0);
	};

	offsetClause() {
	    return this.getTypedRuleContext(OffsetClauseContext,0);
	};

	limitClause() {
	    return this.getTypedRuleContext(LimitClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSelectStatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSelectStatment(this);
		}
	}


}



class SelectItemListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_selectItemList;
    }

	selectItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SelectItemContext);
	    } else {
	        return this.getTypedRuleContext(SelectItemContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.COMMA);
	    } else {
	        return this.getToken(GQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSelectItemList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSelectItemList(this);
		}
	}


}



class SelectItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_selectItem;
    }

	aggregatingValueExpr() {
	    return this.getTypedRuleContext(AggregatingValueExprContext,0);
	};

	selectItemAlias() {
	    return this.getTypedRuleContext(SelectItemAliasContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSelectItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSelectItem(this);
		}
	}


}



class SelectItemAliasContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_selectItemAlias;
    }

	AS() {
	    return this.getToken(GQLParser.AS, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSelectItemAlias(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSelectItemAlias(this);
		}
	}


}



class HavingClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_havingClause;
    }

	HAVING() {
	    return this.getToken(GQLParser.HAVING, 0);
	};

	searchCondition() {
	    return this.getTypedRuleContext(SearchConditionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterHavingClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitHavingClause(this);
		}
	}


}



class SelectStatmentBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_selectStatmentBody;
    }

	FROM() {
	    return this.getToken(GQLParser.FROM, 0);
	};

	selectGraphMatchList() {
	    return this.getTypedRuleContext(SelectGraphMatchListContext,0);
	};

	selectQuerySpec() {
	    return this.getTypedRuleContext(SelectQuerySpecContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSelectStatmentBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSelectStatmentBody(this);
		}
	}


}



class SelectGraphMatchListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_selectGraphMatchList;
    }

	selectGraphMatch = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SelectGraphMatchContext);
	    } else {
	        return this.getTypedRuleContext(SelectGraphMatchContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.COMMA);
	    } else {
	        return this.getToken(GQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSelectGraphMatchList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSelectGraphMatchList(this);
		}
	}


}



class SelectGraphMatchContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_selectGraphMatch;
    }

	graphExpr() {
	    return this.getTypedRuleContext(GraphExprContext,0);
	};

	matchStatment() {
	    return this.getTypedRuleContext(MatchStatmentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSelectGraphMatch(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSelectGraphMatch(this);
		}
	}


}



class SelectQuerySpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_selectQuerySpec;
    }

	FROM() {
	    return this.getToken(GQLParser.FROM, 0);
	};

	nestedQuerySpec() {
	    return this.getTypedRuleContext(NestedQuerySpecContext,0);
	};

	graphExpr() {
	    return this.getTypedRuleContext(GraphExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSelectQuerySpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSelectQuerySpec(this);
		}
	}


}



class CallProcedureStatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_callProcedureStatment;
    }

	CALL() {
	    return this.getToken(GQLParser.CALL, 0);
	};

	procedureCall() {
	    return this.getTypedRuleContext(ProcedureCallContext,0);
	};

	OPTIONAL() {
	    return this.getToken(GQLParser.OPTIONAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterCallProcedureStatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitCallProcedureStatment(this);
		}
	}


}



class ProcedureCallContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_procedureCall;
    }

	inlineProcedureCall() {
	    return this.getTypedRuleContext(InlineProcedureCallContext,0);
	};

	namedProcedureCall() {
	    return this.getTypedRuleContext(NamedProcedureCallContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterProcedureCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitProcedureCall(this);
		}
	}


}



class InlineProcedureCallContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_inlineProcedureCall;
    }

	nestedProcedureSpec() {
	    return this.getTypedRuleContext(NestedProcedureSpecContext,0);
	};

	varScopeClause() {
	    return this.getTypedRuleContext(VarScopeClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterInlineProcedureCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitInlineProcedureCall(this);
		}
	}


}



class VarScopeClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_varScopeClause;
    }

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	bindingVarRefList() {
	    return this.getTypedRuleContext(BindingVarRefListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterVarScopeClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitVarScopeClause(this);
		}
	}


}



class BindingVarRefListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_bindingVarRefList;
    }

	bindingVarRef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BindingVarRefContext);
	    } else {
	        return this.getTypedRuleContext(BindingVarRefContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.COMMA);
	    } else {
	        return this.getToken(GQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterBindingVarRefList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitBindingVarRefList(this);
		}
	}


}



class NamedProcedureCallContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_namedProcedureCall;
    }

	procedureRef() {
	    return this.getTypedRuleContext(ProcedureRefContext,0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	procedureArgList() {
	    return this.getTypedRuleContext(ProcedureArgListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterNamedProcedureCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitNamedProcedureCall(this);
		}
	}


}



class ProcedureArgListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_procedureArgList;
    }

	procedureArg = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ProcedureArgContext);
	    } else {
	        return this.getTypedRuleContext(ProcedureArgContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.COMMA);
	    } else {
	        return this.getToken(GQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterProcedureArgList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitProcedureArgList(this);
		}
	}


}



class ProcedureArgContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_procedureArg;
    }

	valueExpr() {
	    return this.getTypedRuleContext(ValueExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterProcedureArg(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitProcedureArg(this);
		}
	}


}



class UseGraphClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_useGraphClause;
    }

	USE() {
	    return this.getToken(GQLParser.USE, 0);
	};

	graphExpr() {
	    return this.getTypedRuleContext(GraphExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterUseGraphClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitUseGraphClause(this);
		}
	}


}



class AtSchemaClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_atSchemaClause;
    }

	AT() {
	    return this.getToken(GQLParser.AT, 0);
	};

	schemaRef() {
	    return this.getTypedRuleContext(SchemaRefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterAtSchemaClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitAtSchemaClause(this);
		}
	}


}



class BindingVarRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_bindingVarRef;
    }

	bindingVar() {
	    return this.getTypedRuleContext(BindingVarContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterBindingVarRef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitBindingVarRef(this);
		}
	}


}



class ElementVarRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_elementVarRef;
    }

	bindingVarRef() {
	    return this.getTypedRuleContext(BindingVarRefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterElementVarRef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitElementVarRef(this);
		}
	}


}



class PathVarRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_pathVarRef;
    }

	bindingVarRef() {
	    return this.getTypedRuleContext(BindingVarRefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterPathVarRef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitPathVarRef(this);
		}
	}


}



class ParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_parameter;
    }

	parameterName() {
	    return this.getTypedRuleContext(ParameterNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitParameter(this);
		}
	}


}



class GraphPatternBindingTableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_graphPatternBindingTable;
    }

	graphPattern() {
	    return this.getTypedRuleContext(GraphPatternContext,0);
	};

	graphPatternYieldClause() {
	    return this.getTypedRuleContext(GraphPatternYieldClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGraphPatternBindingTable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGraphPatternBindingTable(this);
		}
	}


}



class GraphPatternYieldClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_graphPatternYieldClause;
    }

	YIELD() {
	    return this.getToken(GQLParser.YIELD, 0);
	};

	graphPatternYieldItemList() {
	    return this.getTypedRuleContext(GraphPatternYieldItemListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGraphPatternYieldClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGraphPatternYieldClause(this);
		}
	}


}



class GraphPatternYieldItemListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_graphPatternYieldItemList;
    }

	graphPatternYieldItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(GraphPatternYieldItemContext);
	    } else {
	        return this.getTypedRuleContext(GraphPatternYieldItemContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.COMMA);
	    } else {
	        return this.getToken(GQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGraphPatternYieldItemList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGraphPatternYieldItemList(this);
		}
	}


}



class GraphPatternYieldItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_graphPatternYieldItem;
    }

	elementVarRef() {
	    return this.getTypedRuleContext(ElementVarRefContext,0);
	};

	pathVarRef() {
	    return this.getTypedRuleContext(PathVarRefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGraphPatternYieldItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGraphPatternYieldItem(this);
		}
	}


}



class GraphPatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_graphPattern;
    }

	pathPatternList() {
	    return this.getTypedRuleContext(PathPatternListContext,0);
	};

	matchMode() {
	    return this.getTypedRuleContext(MatchModeContext,0);
	};

	keepClause() {
	    return this.getTypedRuleContext(KeepClauseContext,0);
	};

	graphPatternWhereClause() {
	    return this.getTypedRuleContext(GraphPatternWhereClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGraphPattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGraphPattern(this);
		}
	}


}



class MatchModeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_matchMode;
    }

	repeatableElementsMatchMode() {
	    return this.getTypedRuleContext(RepeatableElementsMatchModeContext,0);
	};

	differentEdgesMatchMode() {
	    return this.getTypedRuleContext(DifferentEdgesMatchModeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterMatchMode(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitMatchMode(this);
		}
	}


}



class RepeatableElementsMatchModeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_repeatableElementsMatchMode;
    }

	REPEATABLE() {
	    return this.getToken(GQLParser.REPEATABLE, 0);
	};

	elementBindingsOrElements() {
	    return this.getTypedRuleContext(ElementBindingsOrElementsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterRepeatableElementsMatchMode(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitRepeatableElementsMatchMode(this);
		}
	}


}



class DifferentEdgesMatchModeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_differentEdgesMatchMode;
    }

	DIFFERENT() {
	    return this.getToken(GQLParser.DIFFERENT, 0);
	};

	edgeBindingsOrEdges() {
	    return this.getTypedRuleContext(EdgeBindingsOrEdgesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterDifferentEdgesMatchMode(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitDifferentEdgesMatchMode(this);
		}
	}


}



class ElementBindingsOrElementsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_elementBindingsOrElements;
    }

	ELEMENT() {
	    return this.getToken(GQLParser.ELEMENT, 0);
	};

	BINDINGS() {
	    return this.getToken(GQLParser.BINDINGS, 0);
	};

	ELEMENTS() {
	    return this.getToken(GQLParser.ELEMENTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterElementBindingsOrElements(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitElementBindingsOrElements(this);
		}
	}


}



class EdgeBindingsOrEdgesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_edgeBindingsOrEdges;
    }

	edgeSynonym() {
	    return this.getTypedRuleContext(EdgeSynonymContext,0);
	};

	BINDINGS() {
	    return this.getToken(GQLParser.BINDINGS, 0);
	};

	edgesSynonym() {
	    return this.getTypedRuleContext(EdgesSynonymContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterEdgeBindingsOrEdges(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitEdgeBindingsOrEdges(this);
		}
	}


}



class PathPatternListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_pathPatternList;
    }

	pathPattern = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PathPatternContext);
	    } else {
	        return this.getTypedRuleContext(PathPatternContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.COMMA);
	    } else {
	        return this.getToken(GQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterPathPatternList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitPathPatternList(this);
		}
	}


}



class PathPatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_pathPattern;
    }

	pathVarDeclaration() {
	    return this.getTypedRuleContext(PathVarDeclarationContext,0);
	};

	pathPatternPrefix() {
	    return this.getTypedRuleContext(PathPatternPrefixContext,0);
	};

	pathPatternExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PathPatternExprContext);
	    } else {
	        return this.getTypedRuleContext(PathPatternExprContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterPathPattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitPathPattern(this);
		}
	}


}



class PathVarDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_pathVarDeclaration;
    }

	pathVar() {
	    return this.getTypedRuleContext(PathVarContext,0);
	};

	EQUALS() {
	    return this.getToken(GQLParser.EQUALS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterPathVarDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitPathVarDeclaration(this);
		}
	}


}



class KeepClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_keepClause;
    }

	KEEP() {
	    return this.getToken(GQLParser.KEEP, 0);
	};

	pathPatternPrefix() {
	    return this.getTypedRuleContext(PathPatternPrefixContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterKeepClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitKeepClause(this);
		}
	}


}



class GraphPatternWhereClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_graphPatternWhereClause;
    }

	WHERE() {
	    return this.getToken(GQLParser.WHERE, 0);
	};

	searchCondition() {
	    return this.getTypedRuleContext(SearchConditionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGraphPatternWhereClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGraphPatternWhereClause(this);
		}
	}


}



class PathPatternPrefixContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_pathPatternPrefix;
    }

	pathModePrefix() {
	    return this.getTypedRuleContext(PathModePrefixContext,0);
	};

	pathSearchPrefix() {
	    return this.getTypedRuleContext(PathSearchPrefixContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterPathPatternPrefix(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitPathPatternPrefix(this);
		}
	}


}



class PathModePrefixContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_pathModePrefix;
    }

	pathMode() {
	    return this.getTypedRuleContext(PathModeContext,0);
	};

	pathOrPaths() {
	    return this.getTypedRuleContext(PathOrPathsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterPathModePrefix(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitPathModePrefix(this);
		}
	}


}



class PathModeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_pathMode;
    }

	WALK() {
	    return this.getToken(GQLParser.WALK, 0);
	};

	TRAIL() {
	    return this.getToken(GQLParser.TRAIL, 0);
	};

	SIMPLE() {
	    return this.getToken(GQLParser.SIMPLE, 0);
	};

	ACYCLIC() {
	    return this.getToken(GQLParser.ACYCLIC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterPathMode(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitPathMode(this);
		}
	}


}



class PathSearchPrefixContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_pathSearchPrefix;
    }

	allPathSearch() {
	    return this.getTypedRuleContext(AllPathSearchContext,0);
	};

	anyPathSearch() {
	    return this.getTypedRuleContext(AnyPathSearchContext,0);
	};

	shortestPathSearch() {
	    return this.getTypedRuleContext(ShortestPathSearchContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterPathSearchPrefix(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitPathSearchPrefix(this);
		}
	}


}



class AllPathSearchContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_allPathSearch;
    }

	ALL() {
	    return this.getToken(GQLParser.ALL, 0);
	};

	pathMode() {
	    return this.getTypedRuleContext(PathModeContext,0);
	};

	pathOrPaths() {
	    return this.getTypedRuleContext(PathOrPathsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterAllPathSearch(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitAllPathSearch(this);
		}
	}


}



class PathOrPathsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_pathOrPaths;
    }

	PATH() {
	    return this.getToken(GQLParser.PATH, 0);
	};

	PATHS() {
	    return this.getToken(GQLParser.PATHS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterPathOrPaths(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitPathOrPaths(this);
		}
	}


}



class AnyPathSearchContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_anyPathSearch;
    }

	ANY() {
	    return this.getToken(GQLParser.ANY, 0);
	};

	numberOfPaths() {
	    return this.getTypedRuleContext(NumberOfPathsContext,0);
	};

	pathMode() {
	    return this.getTypedRuleContext(PathModeContext,0);
	};

	pathOrPaths() {
	    return this.getTypedRuleContext(PathOrPathsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterAnyPathSearch(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitAnyPathSearch(this);
		}
	}


}



class NumberOfPathsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_numberOfPaths;
    }

	unsignedIntSpec() {
	    return this.getTypedRuleContext(UnsignedIntSpecContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterNumberOfPaths(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitNumberOfPaths(this);
		}
	}


}



class ShortestPathSearchContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_shortestPathSearch;
    }

	allShortestPathSearch() {
	    return this.getTypedRuleContext(AllShortestPathSearchContext,0);
	};

	anyShortestPathSearch() {
	    return this.getTypedRuleContext(AnyShortestPathSearchContext,0);
	};

	countedShortestPathSearch() {
	    return this.getTypedRuleContext(CountedShortestPathSearchContext,0);
	};

	countedShortestGroupSearch() {
	    return this.getTypedRuleContext(CountedShortestGroupSearchContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterShortestPathSearch(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitShortestPathSearch(this);
		}
	}


}



class AllShortestPathSearchContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_allShortestPathSearch;
    }

	ALL() {
	    return this.getToken(GQLParser.ALL, 0);
	};

	SHORTEST() {
	    return this.getToken(GQLParser.SHORTEST, 0);
	};

	pathMode() {
	    return this.getTypedRuleContext(PathModeContext,0);
	};

	pathOrPaths() {
	    return this.getTypedRuleContext(PathOrPathsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterAllShortestPathSearch(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitAllShortestPathSearch(this);
		}
	}


}



class AnyShortestPathSearchContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_anyShortestPathSearch;
    }

	ANY() {
	    return this.getToken(GQLParser.ANY, 0);
	};

	SHORTEST() {
	    return this.getToken(GQLParser.SHORTEST, 0);
	};

	pathMode() {
	    return this.getTypedRuleContext(PathModeContext,0);
	};

	pathOrPaths() {
	    return this.getTypedRuleContext(PathOrPathsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterAnyShortestPathSearch(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitAnyShortestPathSearch(this);
		}
	}


}



class CountedShortestPathSearchContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_countedShortestPathSearch;
    }

	SHORTEST() {
	    return this.getToken(GQLParser.SHORTEST, 0);
	};

	numberOfPaths() {
	    return this.getTypedRuleContext(NumberOfPathsContext,0);
	};

	pathMode() {
	    return this.getTypedRuleContext(PathModeContext,0);
	};

	pathOrPaths() {
	    return this.getTypedRuleContext(PathOrPathsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterCountedShortestPathSearch(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitCountedShortestPathSearch(this);
		}
	}


}



class CountedShortestGroupSearchContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_countedShortestGroupSearch;
    }

	SHORTEST() {
	    return this.getToken(GQLParser.SHORTEST, 0);
	};

	numberOfGroups() {
	    return this.getTypedRuleContext(NumberOfGroupsContext,0);
	};

	groupOrGroups() {
	    return this.getTypedRuleContext(GroupOrGroupsContext,0);
	};

	pathMode() {
	    return this.getTypedRuleContext(PathModeContext,0);
	};

	pathOrPaths() {
	    return this.getTypedRuleContext(PathOrPathsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterCountedShortestGroupSearch(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitCountedShortestGroupSearch(this);
		}
	}


}



class GroupOrGroupsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_groupOrGroups;
    }

	GROUP() {
	    return this.getToken(GQLParser.GROUP, 0);
	};

	GROUPS() {
	    return this.getToken(GQLParser.GROUPS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGroupOrGroups(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGroupOrGroups(this);
		}
	}


}



class NumberOfGroupsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_numberOfGroups;
    }

	unsignedIntSpec() {
	    return this.getTypedRuleContext(UnsignedIntSpecContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterNumberOfGroups(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitNumberOfGroups(this);
		}
	}


}



class PathPatternExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_pathPatternExpr;
    }

	pathTerm() {
	    return this.getTypedRuleContext(PathTermContext,0);
	};

	pathMultisetAlternation() {
	    return this.getTypedRuleContext(PathMultisetAlternationContext,0);
	};

	pathPatternUnion() {
	    return this.getTypedRuleContext(PathPatternUnionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterPathPatternExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitPathPatternExpr(this);
		}
	}


}



class PathMultisetAlternationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_pathMultisetAlternation;
    }

	pathTerm = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PathTermContext);
	    } else {
	        return this.getTypedRuleContext(PathTermContext,i);
	    }
	};

	MULTISET_ALTERNATION = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.MULTISET_ALTERNATION);
	    } else {
	        return this.getToken(GQLParser.MULTISET_ALTERNATION, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterPathMultisetAlternation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitPathMultisetAlternation(this);
		}
	}


}



class PathPatternUnionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_pathPatternUnion;
    }

	pathTerm = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PathTermContext);
	    } else {
	        return this.getTypedRuleContext(PathTermContext,i);
	    }
	};

	VERTICAL_BAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.VERTICAL_BAR);
	    } else {
	        return this.getToken(GQLParser.VERTICAL_BAR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterPathPatternUnion(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitPathPatternUnion(this);
		}
	}


}



class PathTermContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_pathTerm;
    }

	pathFactor = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PathFactorContext);
	    } else {
	        return this.getTypedRuleContext(PathFactorContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterPathTerm(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitPathTerm(this);
		}
	}


}



class PathFactorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_pathFactor;
    }

	pathPrimary() {
	    return this.getTypedRuleContext(PathPrimaryContext,0);
	};

	quantifiedPathPrimary() {
	    return this.getTypedRuleContext(QuantifiedPathPrimaryContext,0);
	};

	questionedPathPrimary() {
	    return this.getTypedRuleContext(QuestionedPathPrimaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterPathFactor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitPathFactor(this);
		}
	}


}



class QuantifiedPathPrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_quantifiedPathPrimary;
    }

	pathPrimary() {
	    return this.getTypedRuleContext(PathPrimaryContext,0);
	};

	graphPatternQuantifier() {
	    return this.getTypedRuleContext(GraphPatternQuantifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterQuantifiedPathPrimary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitQuantifiedPathPrimary(this);
		}
	}


}



class QuestionedPathPrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_questionedPathPrimary;
    }

	pathPrimary() {
	    return this.getTypedRuleContext(PathPrimaryContext,0);
	};

	QUESTION_MARK() {
	    return this.getToken(GQLParser.QUESTION_MARK, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterQuestionedPathPrimary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitQuestionedPathPrimary(this);
		}
	}


}



class PathPrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_pathPrimary;
    }

	elementPattern() {
	    return this.getTypedRuleContext(ElementPatternContext,0);
	};

	parenthesizedPathPatternExpr() {
	    return this.getTypedRuleContext(ParenthesizedPathPatternExprContext,0);
	};

	simplifiedPathPatternExpr() {
	    return this.getTypedRuleContext(SimplifiedPathPatternExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterPathPrimary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitPathPrimary(this);
		}
	}


}



class ElementPatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_elementPattern;
    }

	nodePattern() {
	    return this.getTypedRuleContext(NodePatternContext,0);
	};

	edgePattern() {
	    return this.getTypedRuleContext(EdgePatternContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterElementPattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitElementPattern(this);
		}
	}


}



class NodePatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_nodePattern;
    }

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	elementPatternFiller() {
	    return this.getTypedRuleContext(ElementPatternFillerContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterNodePattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitNodePattern(this);
		}
	}


}



class ElementPatternFillerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_elementPatternFiller;
    }

	elementVarDeclaration() {
	    return this.getTypedRuleContext(ElementVarDeclarationContext,0);
	};

	isLabelExpr() {
	    return this.getTypedRuleContext(IsLabelExprContext,0);
	};

	elementPatternPredicate() {
	    return this.getTypedRuleContext(ElementPatternPredicateContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterElementPatternFiller(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitElementPatternFiller(this);
		}
	}


}



class ElementVarDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_elementVarDeclaration;
    }

	elementVar() {
	    return this.getTypedRuleContext(ElementVarContext,0);
	};

	TEMP() {
	    return this.getToken(GQLParser.TEMP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterElementVarDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitElementVarDeclaration(this);
		}
	}


}



class IsLabelExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_isLabelExpr;
    }

	isOrColon() {
	    return this.getTypedRuleContext(IsOrColonContext,0);
	};

	labelExpr() {
	    return this.getTypedRuleContext(LabelExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterIsLabelExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitIsLabelExpr(this);
		}
	}


}



class IsOrColonContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_isOrColon;
    }

	IS() {
	    return this.getToken(GQLParser.IS, 0);
	};

	COLON() {
	    return this.getToken(GQLParser.COLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterIsOrColon(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitIsOrColon(this);
		}
	}


}



class ElementPatternPredicateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_elementPatternPredicate;
    }

	elementPatternWhereClause() {
	    return this.getTypedRuleContext(ElementPatternWhereClauseContext,0);
	};

	elementPropertySpec() {
	    return this.getTypedRuleContext(ElementPropertySpecContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterElementPatternPredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitElementPatternPredicate(this);
		}
	}


}



class ElementPatternWhereClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_elementPatternWhereClause;
    }

	WHERE() {
	    return this.getToken(GQLParser.WHERE, 0);
	};

	searchCondition() {
	    return this.getTypedRuleContext(SearchConditionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterElementPatternWhereClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitElementPatternWhereClause(this);
		}
	}


}



class ElementPropertySpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_elementPropertySpec;
    }

	LEFT_BRACE() {
	    return this.getToken(GQLParser.LEFT_BRACE, 0);
	};

	propertyKeyValuePairList() {
	    return this.getTypedRuleContext(PropertyKeyValuePairListContext,0);
	};

	RIGHT_BRACE() {
	    return this.getToken(GQLParser.RIGHT_BRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterElementPropertySpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitElementPropertySpec(this);
		}
	}


}



class PropertyKeyValuePairListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_propertyKeyValuePairList;
    }

	propertyKeyValuePair = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PropertyKeyValuePairContext);
	    } else {
	        return this.getTypedRuleContext(PropertyKeyValuePairContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.COMMA);
	    } else {
	        return this.getToken(GQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterPropertyKeyValuePairList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitPropertyKeyValuePairList(this);
		}
	}


}



class PropertyKeyValuePairContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_propertyKeyValuePair;
    }

	propertyName() {
	    return this.getTypedRuleContext(PropertyNameContext,0);
	};

	COLON() {
	    return this.getToken(GQLParser.COLON, 0);
	};

	valueExpr() {
	    return this.getTypedRuleContext(ValueExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterPropertyKeyValuePair(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitPropertyKeyValuePair(this);
		}
	}


}



class EdgePatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_edgePattern;
    }

	fullEdgePattern() {
	    return this.getTypedRuleContext(FullEdgePatternContext,0);
	};

	abbreviatedEdgePattern() {
	    return this.getTypedRuleContext(AbbreviatedEdgePatternContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterEdgePattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitEdgePattern(this);
		}
	}


}



class FullEdgePatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_fullEdgePattern;
    }

	fullEdgePointingLeft() {
	    return this.getTypedRuleContext(FullEdgePointingLeftContext,0);
	};

	fullEdgeUndirected() {
	    return this.getTypedRuleContext(FullEdgeUndirectedContext,0);
	};

	fullEdgePointingRight() {
	    return this.getTypedRuleContext(FullEdgePointingRightContext,0);
	};

	fullEdgeLeftOrUndirected() {
	    return this.getTypedRuleContext(FullEdgeLeftOrUndirectedContext,0);
	};

	fullEdgeUndirectedOrRight() {
	    return this.getTypedRuleContext(FullEdgeUndirectedOrRightContext,0);
	};

	fullEdgeLeftOrRight() {
	    return this.getTypedRuleContext(FullEdgeLeftOrRightContext,0);
	};

	fullEdgeAnyDirection() {
	    return this.getTypedRuleContext(FullEdgeAnyDirectionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterFullEdgePattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitFullEdgePattern(this);
		}
	}


}



class FullEdgePointingLeftContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_fullEdgePointingLeft;
    }

	LEFT_ARROW_BRACKET() {
	    return this.getToken(GQLParser.LEFT_ARROW_BRACKET, 0);
	};

	elementPatternFiller() {
	    return this.getTypedRuleContext(ElementPatternFillerContext,0);
	};

	RIGHT_BRACKET_MINUS() {
	    return this.getToken(GQLParser.RIGHT_BRACKET_MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterFullEdgePointingLeft(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitFullEdgePointingLeft(this);
		}
	}


}



class FullEdgeUndirectedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_fullEdgeUndirected;
    }

	TILDE_LEFT_BRACKET() {
	    return this.getToken(GQLParser.TILDE_LEFT_BRACKET, 0);
	};

	elementPatternFiller() {
	    return this.getTypedRuleContext(ElementPatternFillerContext,0);
	};

	RIGHT_BRACKET_TILDE() {
	    return this.getToken(GQLParser.RIGHT_BRACKET_TILDE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterFullEdgeUndirected(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitFullEdgeUndirected(this);
		}
	}


}



class FullEdgePointingRightContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_fullEdgePointingRight;
    }

	MINUS_LEFT_BRACKET() {
	    return this.getToken(GQLParser.MINUS_LEFT_BRACKET, 0);
	};

	elementPatternFiller() {
	    return this.getTypedRuleContext(ElementPatternFillerContext,0);
	};

	BRACKET_RIGHT_ARROW() {
	    return this.getToken(GQLParser.BRACKET_RIGHT_ARROW, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterFullEdgePointingRight(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitFullEdgePointingRight(this);
		}
	}


}



class FullEdgeLeftOrUndirectedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_fullEdgeLeftOrUndirected;
    }

	LEFT_ARROW_TILDE_BRACKET() {
	    return this.getToken(GQLParser.LEFT_ARROW_TILDE_BRACKET, 0);
	};

	elementPatternFiller() {
	    return this.getTypedRuleContext(ElementPatternFillerContext,0);
	};

	RIGHT_BRACKET_TILDE() {
	    return this.getToken(GQLParser.RIGHT_BRACKET_TILDE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterFullEdgeLeftOrUndirected(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitFullEdgeLeftOrUndirected(this);
		}
	}


}



class FullEdgeUndirectedOrRightContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_fullEdgeUndirectedOrRight;
    }

	TILDE_LEFT_BRACKET() {
	    return this.getToken(GQLParser.TILDE_LEFT_BRACKET, 0);
	};

	elementPatternFiller() {
	    return this.getTypedRuleContext(ElementPatternFillerContext,0);
	};

	BRACKET_RIGHT_ARROW() {
	    return this.getToken(GQLParser.BRACKET_RIGHT_ARROW, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterFullEdgeUndirectedOrRight(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitFullEdgeUndirectedOrRight(this);
		}
	}


}



class FullEdgeLeftOrRightContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_fullEdgeLeftOrRight;
    }

	LEFT_ARROW_BRACKET() {
	    return this.getToken(GQLParser.LEFT_ARROW_BRACKET, 0);
	};

	elementPatternFiller() {
	    return this.getTypedRuleContext(ElementPatternFillerContext,0);
	};

	BRACKET_RIGHT_ARROW() {
	    return this.getToken(GQLParser.BRACKET_RIGHT_ARROW, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterFullEdgeLeftOrRight(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitFullEdgeLeftOrRight(this);
		}
	}


}



class FullEdgeAnyDirectionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_fullEdgeAnyDirection;
    }

	MINUS_LEFT_BRACKET() {
	    return this.getToken(GQLParser.MINUS_LEFT_BRACKET, 0);
	};

	elementPatternFiller() {
	    return this.getTypedRuleContext(ElementPatternFillerContext,0);
	};

	RIGHT_BRACKET_MINUS() {
	    return this.getToken(GQLParser.RIGHT_BRACKET_MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterFullEdgeAnyDirection(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitFullEdgeAnyDirection(this);
		}
	}


}



class AbbreviatedEdgePatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_abbreviatedEdgePattern;
    }

	LEFT_ARROW() {
	    return this.getToken(GQLParser.LEFT_ARROW, 0);
	};

	TILDE() {
	    return this.getToken(GQLParser.TILDE, 0);
	};

	RIGHT_ARROW() {
	    return this.getToken(GQLParser.RIGHT_ARROW, 0);
	};

	LEFT_ARROW_TILDE() {
	    return this.getToken(GQLParser.LEFT_ARROW_TILDE, 0);
	};

	TILDE_RIGHT_ARROW() {
	    return this.getToken(GQLParser.TILDE_RIGHT_ARROW, 0);
	};

	LEFT_MINUS_RIGHT() {
	    return this.getToken(GQLParser.LEFT_MINUS_RIGHT, 0);
	};

	MINUS() {
	    return this.getToken(GQLParser.MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterAbbreviatedEdgePattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitAbbreviatedEdgePattern(this);
		}
	}


}



class ParenthesizedPathPatternExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_parenthesizedPathPatternExpr;
    }

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	pathPatternExpr() {
	    return this.getTypedRuleContext(PathPatternExprContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	subpathVarDeclaration() {
	    return this.getTypedRuleContext(SubpathVarDeclarationContext,0);
	};

	pathModePrefix() {
	    return this.getTypedRuleContext(PathModePrefixContext,0);
	};

	parenthesizedPathPatternWhereClause() {
	    return this.getTypedRuleContext(ParenthesizedPathPatternWhereClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterParenthesizedPathPatternExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitParenthesizedPathPatternExpr(this);
		}
	}


}



class SubpathVarDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_subpathVarDeclaration;
    }

	subpathVar() {
	    return this.getTypedRuleContext(SubpathVarContext,0);
	};

	EQUALS() {
	    return this.getToken(GQLParser.EQUALS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSubpathVarDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSubpathVarDeclaration(this);
		}
	}


}



class ParenthesizedPathPatternWhereClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_parenthesizedPathPatternWhereClause;
    }

	WHERE() {
	    return this.getToken(GQLParser.WHERE, 0);
	};

	searchCondition() {
	    return this.getTypedRuleContext(SearchConditionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterParenthesizedPathPatternWhereClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitParenthesizedPathPatternWhereClause(this);
		}
	}


}



class InsertGraphPatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_insertGraphPattern;
    }

	insertGraphPatternList() {
	    return this.getTypedRuleContext(InsertGraphPatternListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterInsertGraphPattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitInsertGraphPattern(this);
		}
	}


}



class InsertGraphPatternListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_insertGraphPatternList;
    }

	insertPathPattern = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InsertPathPatternContext);
	    } else {
	        return this.getTypedRuleContext(InsertPathPatternContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.COMMA);
	    } else {
	        return this.getToken(GQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterInsertGraphPatternList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitInsertGraphPatternList(this);
		}
	}


}



class InsertPathPatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_insertPathPattern;
    }

	insertNodePattern = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InsertNodePatternContext);
	    } else {
	        return this.getTypedRuleContext(InsertNodePatternContext,i);
	    }
	};

	insertEdgePattern = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InsertEdgePatternContext);
	    } else {
	        return this.getTypedRuleContext(InsertEdgePatternContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterInsertPathPattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitInsertPathPattern(this);
		}
	}


}



class InsertNodePatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_insertNodePattern;
    }

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	insertElementPatternFiller() {
	    return this.getTypedRuleContext(InsertElementPatternFillerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterInsertNodePattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitInsertNodePattern(this);
		}
	}


}



class InsertEdgePatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_insertEdgePattern;
    }

	insertEdgePointingLeft() {
	    return this.getTypedRuleContext(InsertEdgePointingLeftContext,0);
	};

	insertEdgePointingRight() {
	    return this.getTypedRuleContext(InsertEdgePointingRightContext,0);
	};

	insertEdgeUndirected() {
	    return this.getTypedRuleContext(InsertEdgeUndirectedContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterInsertEdgePattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitInsertEdgePattern(this);
		}
	}


}



class InsertEdgePointingLeftContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_insertEdgePointingLeft;
    }

	LEFT_ARROW_BRACKET() {
	    return this.getToken(GQLParser.LEFT_ARROW_BRACKET, 0);
	};

	insertElementPatternFiller() {
	    return this.getTypedRuleContext(InsertElementPatternFillerContext,0);
	};

	RIGHT_BRACKET_MINUS() {
	    return this.getToken(GQLParser.RIGHT_BRACKET_MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterInsertEdgePointingLeft(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitInsertEdgePointingLeft(this);
		}
	}


}



class InsertEdgePointingRightContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_insertEdgePointingRight;
    }

	MINUS_LEFT_BRACKET() {
	    return this.getToken(GQLParser.MINUS_LEFT_BRACKET, 0);
	};

	insertElementPatternFiller() {
	    return this.getTypedRuleContext(InsertElementPatternFillerContext,0);
	};

	BRACKET_RIGHT_ARROW() {
	    return this.getToken(GQLParser.BRACKET_RIGHT_ARROW, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterInsertEdgePointingRight(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitInsertEdgePointingRight(this);
		}
	}


}



class InsertEdgeUndirectedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_insertEdgeUndirected;
    }

	TILDE_LEFT_BRACKET() {
	    return this.getToken(GQLParser.TILDE_LEFT_BRACKET, 0);
	};

	insertElementPatternFiller() {
	    return this.getTypedRuleContext(InsertElementPatternFillerContext,0);
	};

	RIGHT_BRACKET_TILDE() {
	    return this.getToken(GQLParser.RIGHT_BRACKET_TILDE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterInsertEdgeUndirected(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitInsertEdgeUndirected(this);
		}
	}


}



class InsertElementPatternFillerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_insertElementPatternFiller;
    }

	elementVarDeclaration() {
	    return this.getTypedRuleContext(ElementVarDeclarationContext,0);
	};

	labelAndPropertySetSpec() {
	    return this.getTypedRuleContext(LabelAndPropertySetSpecContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterInsertElementPatternFiller(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitInsertElementPatternFiller(this);
		}
	}


}



class LabelAndPropertySetSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_labelAndPropertySetSpec;
    }

	isOrColon() {
	    return this.getTypedRuleContext(IsOrColonContext,0);
	};

	labelSetSpec() {
	    return this.getTypedRuleContext(LabelSetSpecContext,0);
	};

	elementPropertySpec() {
	    return this.getTypedRuleContext(ElementPropertySpecContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterLabelAndPropertySetSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitLabelAndPropertySetSpec(this);
		}
	}


}



class LabelExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_labelExpr;
    }

	labelTerm = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LabelTermContext);
	    } else {
	        return this.getTypedRuleContext(LabelTermContext,i);
	    }
	};

	VERTICAL_BAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.VERTICAL_BAR);
	    } else {
	        return this.getToken(GQLParser.VERTICAL_BAR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterLabelExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitLabelExpr(this);
		}
	}


}



class LabelTermContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_labelTerm;
    }

	labelFactor = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LabelFactorContext);
	    } else {
	        return this.getTypedRuleContext(LabelFactorContext,i);
	    }
	};

	AMPERSAND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.AMPERSAND);
	    } else {
	        return this.getToken(GQLParser.AMPERSAND, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterLabelTerm(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitLabelTerm(this);
		}
	}


}



class LabelFactorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_labelFactor;
    }

	labelPrimary() {
	    return this.getTypedRuleContext(LabelPrimaryContext,0);
	};

	labelNegation() {
	    return this.getTypedRuleContext(LabelNegationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterLabelFactor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitLabelFactor(this);
		}
	}


}



class LabelNegationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_labelNegation;
    }

	EXCLAMATION() {
	    return this.getToken(GQLParser.EXCLAMATION, 0);
	};

	labelPrimary() {
	    return this.getTypedRuleContext(LabelPrimaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterLabelNegation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitLabelNegation(this);
		}
	}


}



class LabelPrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_labelPrimary;
    }

	labelName() {
	    return this.getTypedRuleContext(LabelNameContext,0);
	};

	wildcardLabel() {
	    return this.getTypedRuleContext(WildcardLabelContext,0);
	};

	parenthesizedLabelExpr() {
	    return this.getTypedRuleContext(ParenthesizedLabelExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterLabelPrimary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitLabelPrimary(this);
		}
	}


}



class WildcardLabelContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_wildcardLabel;
    }

	PERCENT() {
	    return this.getToken(GQLParser.PERCENT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterWildcardLabel(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitWildcardLabel(this);
		}
	}


}



class ParenthesizedLabelExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_parenthesizedLabelExpr;
    }

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	labelExpr() {
	    return this.getTypedRuleContext(LabelExprContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterParenthesizedLabelExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitParenthesizedLabelExpr(this);
		}
	}


}



class GraphPatternQuantifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_graphPatternQuantifier;
    }

	ASTERISK() {
	    return this.getToken(GQLParser.ASTERISK, 0);
	};

	PLUS() {
	    return this.getToken(GQLParser.PLUS, 0);
	};

	fixedQuantifier() {
	    return this.getTypedRuleContext(FixedQuantifierContext,0);
	};

	generalQuantifier() {
	    return this.getTypedRuleContext(GeneralQuantifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGraphPatternQuantifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGraphPatternQuantifier(this);
		}
	}


}



class FixedQuantifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_fixedQuantifier;
    }

	LEFT_BRACE() {
	    return this.getToken(GQLParser.LEFT_BRACE, 0);
	};

	UNSIGNED_INT() {
	    return this.getToken(GQLParser.UNSIGNED_INT, 0);
	};

	RIGHT_BRACE() {
	    return this.getToken(GQLParser.RIGHT_BRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterFixedQuantifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitFixedQuantifier(this);
		}
	}


}



class GeneralQuantifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_generalQuantifier;
    }

	LEFT_BRACE() {
	    return this.getToken(GQLParser.LEFT_BRACE, 0);
	};

	COMMA() {
	    return this.getToken(GQLParser.COMMA, 0);
	};

	RIGHT_BRACE() {
	    return this.getToken(GQLParser.RIGHT_BRACE, 0);
	};

	lowerBound() {
	    return this.getTypedRuleContext(LowerBoundContext,0);
	};

	upperBound() {
	    return this.getTypedRuleContext(UpperBoundContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGeneralQuantifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGeneralQuantifier(this);
		}
	}


}



class LowerBoundContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_lowerBound;
    }

	UNSIGNED_INT() {
	    return this.getToken(GQLParser.UNSIGNED_INT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterLowerBound(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitLowerBound(this);
		}
	}


}



class UpperBoundContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_upperBound;
    }

	UNSIGNED_INT() {
	    return this.getToken(GQLParser.UNSIGNED_INT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterUpperBound(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitUpperBound(this);
		}
	}


}



class SimplifiedPathPatternExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simplifiedPathPatternExpr;
    }

	simplifiedDefaultingLeft() {
	    return this.getTypedRuleContext(SimplifiedDefaultingLeftContext,0);
	};

	simplifiedDefaultingUndirected() {
	    return this.getTypedRuleContext(SimplifiedDefaultingUndirectedContext,0);
	};

	simplifiedDefaultingRight() {
	    return this.getTypedRuleContext(SimplifiedDefaultingRightContext,0);
	};

	simplifiedDefaultingLeftOrUndirected() {
	    return this.getTypedRuleContext(SimplifiedDefaultingLeftOrUndirectedContext,0);
	};

	simplifiedDefaultingUndirectedOrRight() {
	    return this.getTypedRuleContext(SimplifiedDefaultingUndirectedOrRightContext,0);
	};

	simplifiedDefaultingLeftOrRight() {
	    return this.getTypedRuleContext(SimplifiedDefaultingLeftOrRightContext,0);
	};

	simplifiedDefaultingAnyDirection() {
	    return this.getTypedRuleContext(SimplifiedDefaultingAnyDirectionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSimplifiedPathPatternExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSimplifiedPathPatternExpr(this);
		}
	}


}



class SimplifiedDefaultingLeftContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simplifiedDefaultingLeft;
    }

	LEFT_MINUS_SLASH() {
	    return this.getToken(GQLParser.LEFT_MINUS_SLASH, 0);
	};

	simplifiedContents() {
	    return this.getTypedRuleContext(SimplifiedContentsContext,0);
	};

	SLASH_MINUS() {
	    return this.getToken(GQLParser.SLASH_MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSimplifiedDefaultingLeft(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSimplifiedDefaultingLeft(this);
		}
	}


}



class SimplifiedDefaultingUndirectedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simplifiedDefaultingUndirected;
    }

	TILDE_SLASH() {
	    return this.getToken(GQLParser.TILDE_SLASH, 0);
	};

	simplifiedContents() {
	    return this.getTypedRuleContext(SimplifiedContentsContext,0);
	};

	SLASH_TILDE() {
	    return this.getToken(GQLParser.SLASH_TILDE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSimplifiedDefaultingUndirected(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSimplifiedDefaultingUndirected(this);
		}
	}


}



class SimplifiedDefaultingRightContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simplifiedDefaultingRight;
    }

	MINUS_SLASH() {
	    return this.getToken(GQLParser.MINUS_SLASH, 0);
	};

	simplifiedContents() {
	    return this.getTypedRuleContext(SimplifiedContentsContext,0);
	};

	SLASH_MINUS_RIGHT() {
	    return this.getToken(GQLParser.SLASH_MINUS_RIGHT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSimplifiedDefaultingRight(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSimplifiedDefaultingRight(this);
		}
	}


}



class SimplifiedDefaultingLeftOrUndirectedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simplifiedDefaultingLeftOrUndirected;
    }

	LEFT_TILDE_SLASH() {
	    return this.getToken(GQLParser.LEFT_TILDE_SLASH, 0);
	};

	simplifiedContents() {
	    return this.getTypedRuleContext(SimplifiedContentsContext,0);
	};

	SLASH_TILDE() {
	    return this.getToken(GQLParser.SLASH_TILDE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSimplifiedDefaultingLeftOrUndirected(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSimplifiedDefaultingLeftOrUndirected(this);
		}
	}


}



class SimplifiedDefaultingUndirectedOrRightContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simplifiedDefaultingUndirectedOrRight;
    }

	TILDE_SLASH() {
	    return this.getToken(GQLParser.TILDE_SLASH, 0);
	};

	simplifiedContents() {
	    return this.getTypedRuleContext(SimplifiedContentsContext,0);
	};

	SLASH_TILDE_RIGHT() {
	    return this.getToken(GQLParser.SLASH_TILDE_RIGHT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSimplifiedDefaultingUndirectedOrRight(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSimplifiedDefaultingUndirectedOrRight(this);
		}
	}


}



class SimplifiedDefaultingLeftOrRightContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simplifiedDefaultingLeftOrRight;
    }

	LEFT_MINUS_SLASH() {
	    return this.getToken(GQLParser.LEFT_MINUS_SLASH, 0);
	};

	simplifiedContents() {
	    return this.getTypedRuleContext(SimplifiedContentsContext,0);
	};

	SLASH_MINUS_RIGHT() {
	    return this.getToken(GQLParser.SLASH_MINUS_RIGHT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSimplifiedDefaultingLeftOrRight(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSimplifiedDefaultingLeftOrRight(this);
		}
	}


}



class SimplifiedDefaultingAnyDirectionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simplifiedDefaultingAnyDirection;
    }

	MINUS_SLASH() {
	    return this.getToken(GQLParser.MINUS_SLASH, 0);
	};

	simplifiedContents() {
	    return this.getTypedRuleContext(SimplifiedContentsContext,0);
	};

	SLASH_MINUS() {
	    return this.getToken(GQLParser.SLASH_MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSimplifiedDefaultingAnyDirection(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSimplifiedDefaultingAnyDirection(this);
		}
	}


}



class SimplifiedContentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simplifiedContents;
    }

	simplifiedTerm() {
	    return this.getTypedRuleContext(SimplifiedTermContext,0);
	};

	simplifiedPathUnion() {
	    return this.getTypedRuleContext(SimplifiedPathUnionContext,0);
	};

	simplifiedMultisetAlternation() {
	    return this.getTypedRuleContext(SimplifiedMultisetAlternationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSimplifiedContents(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSimplifiedContents(this);
		}
	}


}



class SimplifiedPathUnionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simplifiedPathUnion;
    }

	simplifiedTerm = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SimplifiedTermContext);
	    } else {
	        return this.getTypedRuleContext(SimplifiedTermContext,i);
	    }
	};

	VERTICAL_BAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.VERTICAL_BAR);
	    } else {
	        return this.getToken(GQLParser.VERTICAL_BAR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSimplifiedPathUnion(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSimplifiedPathUnion(this);
		}
	}


}



class SimplifiedMultisetAlternationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simplifiedMultisetAlternation;
    }

	simplifiedTerm = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SimplifiedTermContext);
	    } else {
	        return this.getTypedRuleContext(SimplifiedTermContext,i);
	    }
	};

	MULTISET_ALTERNATION = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.MULTISET_ALTERNATION);
	    } else {
	        return this.getToken(GQLParser.MULTISET_ALTERNATION, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSimplifiedMultisetAlternation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSimplifiedMultisetAlternation(this);
		}
	}


}



class SimplifiedTermContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simplifiedTerm;
    }

	simplifiedFactorLow = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SimplifiedFactorLowContext);
	    } else {
	        return this.getTypedRuleContext(SimplifiedFactorLowContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSimplifiedTerm(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSimplifiedTerm(this);
		}
	}


}



class SimplifiedFactorLowContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simplifiedFactorLow;
    }

	simplifiedFactorHigh = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SimplifiedFactorHighContext);
	    } else {
	        return this.getTypedRuleContext(SimplifiedFactorHighContext,i);
	    }
	};

	AMPERSAND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.AMPERSAND);
	    } else {
	        return this.getToken(GQLParser.AMPERSAND, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSimplifiedFactorLow(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSimplifiedFactorLow(this);
		}
	}


}



class SimplifiedFactorHighContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simplifiedFactorHigh;
    }

	simplifiedTertiary() {
	    return this.getTypedRuleContext(SimplifiedTertiaryContext,0);
	};

	simplifiedQuntified() {
	    return this.getTypedRuleContext(SimplifiedQuntifiedContext,0);
	};

	simplifiedQuestioned() {
	    return this.getTypedRuleContext(SimplifiedQuestionedContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSimplifiedFactorHigh(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSimplifiedFactorHigh(this);
		}
	}


}



class SimplifiedQuntifiedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simplifiedQuntified;
    }

	simplifiedTertiary() {
	    return this.getTypedRuleContext(SimplifiedTertiaryContext,0);
	};

	graphPatternQuantifier() {
	    return this.getTypedRuleContext(GraphPatternQuantifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSimplifiedQuntified(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSimplifiedQuntified(this);
		}
	}


}



class SimplifiedQuestionedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simplifiedQuestioned;
    }

	simplifiedTertiary() {
	    return this.getTypedRuleContext(SimplifiedTertiaryContext,0);
	};

	QUESTION_MARK() {
	    return this.getToken(GQLParser.QUESTION_MARK, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSimplifiedQuestioned(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSimplifiedQuestioned(this);
		}
	}


}



class SimplifiedTertiaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simplifiedTertiary;
    }

	simplifiedDirectionOverride() {
	    return this.getTypedRuleContext(SimplifiedDirectionOverrideContext,0);
	};

	simplifiedSecondary() {
	    return this.getTypedRuleContext(SimplifiedSecondaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSimplifiedTertiary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSimplifiedTertiary(this);
		}
	}


}



class SimplifiedDirectionOverrideContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simplifiedDirectionOverride;
    }

	simplifiedOverrideLeft() {
	    return this.getTypedRuleContext(SimplifiedOverrideLeftContext,0);
	};

	simplifiedOverrideUndirected() {
	    return this.getTypedRuleContext(SimplifiedOverrideUndirectedContext,0);
	};

	simplifiedOverrideRight() {
	    return this.getTypedRuleContext(SimplifiedOverrideRightContext,0);
	};

	simplifiedOverrideLeftOrUndirected() {
	    return this.getTypedRuleContext(SimplifiedOverrideLeftOrUndirectedContext,0);
	};

	simplifiedOverrideUndirectedOrRight() {
	    return this.getTypedRuleContext(SimplifiedOverrideUndirectedOrRightContext,0);
	};

	simplifiedOverrideLeftOrRight() {
	    return this.getTypedRuleContext(SimplifiedOverrideLeftOrRightContext,0);
	};

	simplifiedOverrideAnyDirection() {
	    return this.getTypedRuleContext(SimplifiedOverrideAnyDirectionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSimplifiedDirectionOverride(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSimplifiedDirectionOverride(this);
		}
	}


}



class SimplifiedOverrideLeftContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simplifiedOverrideLeft;
    }

	LEFT_ANGLE_BRACKET() {
	    return this.getToken(GQLParser.LEFT_ANGLE_BRACKET, 0);
	};

	simplifiedSecondary() {
	    return this.getTypedRuleContext(SimplifiedSecondaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSimplifiedOverrideLeft(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSimplifiedOverrideLeft(this);
		}
	}


}



class SimplifiedOverrideUndirectedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simplifiedOverrideUndirected;
    }

	TILDE() {
	    return this.getToken(GQLParser.TILDE, 0);
	};

	simplifiedSecondary() {
	    return this.getTypedRuleContext(SimplifiedSecondaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSimplifiedOverrideUndirected(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSimplifiedOverrideUndirected(this);
		}
	}


}



class SimplifiedOverrideRightContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simplifiedOverrideRight;
    }

	simplifiedSecondary() {
	    return this.getTypedRuleContext(SimplifiedSecondaryContext,0);
	};

	RIGHT_ANGLE_BRACKET() {
	    return this.getToken(GQLParser.RIGHT_ANGLE_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSimplifiedOverrideRight(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSimplifiedOverrideRight(this);
		}
	}


}



class SimplifiedOverrideLeftOrUndirectedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simplifiedOverrideLeftOrUndirected;
    }

	LEFT_ARROW_TILDE() {
	    return this.getToken(GQLParser.LEFT_ARROW_TILDE, 0);
	};

	simplifiedSecondary() {
	    return this.getTypedRuleContext(SimplifiedSecondaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSimplifiedOverrideLeftOrUndirected(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSimplifiedOverrideLeftOrUndirected(this);
		}
	}


}



class SimplifiedOverrideUndirectedOrRightContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simplifiedOverrideUndirectedOrRight;
    }

	TILDE() {
	    return this.getToken(GQLParser.TILDE, 0);
	};

	simplifiedSecondary() {
	    return this.getTypedRuleContext(SimplifiedSecondaryContext,0);
	};

	RIGHT_ANGLE_BRACKET() {
	    return this.getToken(GQLParser.RIGHT_ANGLE_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSimplifiedOverrideUndirectedOrRight(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSimplifiedOverrideUndirectedOrRight(this);
		}
	}


}



class SimplifiedOverrideLeftOrRightContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simplifiedOverrideLeftOrRight;
    }

	LEFT_ANGLE_BRACKET() {
	    return this.getToken(GQLParser.LEFT_ANGLE_BRACKET, 0);
	};

	simplifiedSecondary() {
	    return this.getTypedRuleContext(SimplifiedSecondaryContext,0);
	};

	RIGHT_ANGLE_BRACKET() {
	    return this.getToken(GQLParser.RIGHT_ANGLE_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSimplifiedOverrideLeftOrRight(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSimplifiedOverrideLeftOrRight(this);
		}
	}


}



class SimplifiedOverrideAnyDirectionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simplifiedOverrideAnyDirection;
    }

	MINUS() {
	    return this.getToken(GQLParser.MINUS, 0);
	};

	simplifiedSecondary() {
	    return this.getTypedRuleContext(SimplifiedSecondaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSimplifiedOverrideAnyDirection(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSimplifiedOverrideAnyDirection(this);
		}
	}


}



class SimplifiedSecondaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simplifiedSecondary;
    }

	simplifiedPrimary() {
	    return this.getTypedRuleContext(SimplifiedPrimaryContext,0);
	};

	simplifiedNegation() {
	    return this.getTypedRuleContext(SimplifiedNegationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSimplifiedSecondary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSimplifiedSecondary(this);
		}
	}


}



class SimplifiedNegationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simplifiedNegation;
    }

	EXCLAMATION() {
	    return this.getToken(GQLParser.EXCLAMATION, 0);
	};

	simplifiedPrimary() {
	    return this.getTypedRuleContext(SimplifiedPrimaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSimplifiedNegation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSimplifiedNegation(this);
		}
	}


}



class SimplifiedPrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simplifiedPrimary;
    }

	labelName() {
	    return this.getTypedRuleContext(LabelNameContext,0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	simplifiedContents() {
	    return this.getTypedRuleContext(SimplifiedContentsContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSimplifiedPrimary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSimplifiedPrimary(this);
		}
	}


}



class WhereClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_whereClause;
    }

	WHERE() {
	    return this.getToken(GQLParser.WHERE, 0);
	};

	searchCondition() {
	    return this.getTypedRuleContext(SearchConditionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterWhereClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitWhereClause(this);
		}
	}


}



class YieldClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_yieldClause;
    }

	YIELD() {
	    return this.getToken(GQLParser.YIELD, 0);
	};

	yieldItemList() {
	    return this.getTypedRuleContext(YieldItemListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterYieldClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitYieldClause(this);
		}
	}


}



class YieldItemListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_yieldItemList;
    }

	yieldItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(YieldItemContext);
	    } else {
	        return this.getTypedRuleContext(YieldItemContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.COMMA);
	    } else {
	        return this.getToken(GQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterYieldItemList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitYieldItemList(this);
		}
	}


}



class YieldItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_yieldItem;
    }

	yieldItemName() {
	    return this.getTypedRuleContext(YieldItemNameContext,0);
	};

	yieldItemAlias() {
	    return this.getTypedRuleContext(YieldItemAliasContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterYieldItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitYieldItem(this);
		}
	}


}



class YieldItemNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_yieldItemName;
    }

	fieldName() {
	    return this.getTypedRuleContext(FieldNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterYieldItemName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitYieldItemName(this);
		}
	}


}



class YieldItemAliasContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_yieldItemAlias;
    }

	AS() {
	    return this.getToken(GQLParser.AS, 0);
	};

	bindingVar() {
	    return this.getTypedRuleContext(BindingVarContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterYieldItemAlias(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitYieldItemAlias(this);
		}
	}


}



class GroupByClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_groupByClause;
    }

	GROUP() {
	    return this.getToken(GQLParser.GROUP, 0);
	};

	BY() {
	    return this.getToken(GQLParser.BY, 0);
	};

	groupingElementList() {
	    return this.getTypedRuleContext(GroupingElementListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGroupByClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGroupByClause(this);
		}
	}


}



class GroupingElementListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_groupingElementList;
    }

	groupingElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(GroupingElementContext);
	    } else {
	        return this.getTypedRuleContext(GroupingElementContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.COMMA);
	    } else {
	        return this.getToken(GQLParser.COMMA, i);
	    }
	};


	emptyGroupingSet() {
	    return this.getTypedRuleContext(EmptyGroupingSetContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGroupingElementList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGroupingElementList(this);
		}
	}


}



class GroupingElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_groupingElement;
    }

	bindingVarRef() {
	    return this.getTypedRuleContext(BindingVarRefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGroupingElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGroupingElement(this);
		}
	}


}



class EmptyGroupingSetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_emptyGroupingSet;
    }

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterEmptyGroupingSet(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitEmptyGroupingSet(this);
		}
	}


}



class OrderByClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_orderByClause;
    }

	ORDER() {
	    return this.getToken(GQLParser.ORDER, 0);
	};

	BY() {
	    return this.getToken(GQLParser.BY, 0);
	};

	sortSpecList() {
	    return this.getTypedRuleContext(SortSpecListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterOrderByClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitOrderByClause(this);
		}
	}


}



class AggregateFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_aggregateFunction;
    }

	COUNT() {
	    return this.getToken(GQLParser.COUNT, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	ASTERISK() {
	    return this.getToken(GQLParser.ASTERISK, 0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	generalSetFunction() {
	    return this.getTypedRuleContext(GeneralSetFunctionContext,0);
	};

	binarySetFunction() {
	    return this.getTypedRuleContext(BinarySetFunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterAggregateFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitAggregateFunction(this);
		}
	}


}



class GeneralSetFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_generalSetFunction;
    }

	generalSetFunctionType() {
	    return this.getTypedRuleContext(GeneralSetFunctionTypeContext,0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	valueExpr() {
	    return this.getTypedRuleContext(ValueExprContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	setQuantifier() {
	    return this.getTypedRuleContext(SetQuantifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGeneralSetFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGeneralSetFunction(this);
		}
	}


}



class GeneralSetFunctionTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_generalSetFunctionType;
    }

	AVG() {
	    return this.getToken(GQLParser.AVG, 0);
	};

	COUNT() {
	    return this.getToken(GQLParser.COUNT, 0);
	};

	MAX() {
	    return this.getToken(GQLParser.MAX, 0);
	};

	MIN() {
	    return this.getToken(GQLParser.MIN, 0);
	};

	SUM() {
	    return this.getToken(GQLParser.SUM, 0);
	};

	COLLECT() {
	    return this.getToken(GQLParser.COLLECT, 0);
	};

	STDDEV_SAMP() {
	    return this.getToken(GQLParser.STDDEV_SAMP, 0);
	};

	STDDEV_POP() {
	    return this.getToken(GQLParser.STDDEV_POP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGeneralSetFunctionType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGeneralSetFunctionType(this);
		}
	}


}



class SetQuantifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_setQuantifier;
    }

	DISTINCT() {
	    return this.getToken(GQLParser.DISTINCT, 0);
	};

	ALL() {
	    return this.getToken(GQLParser.ALL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSetQuantifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSetQuantifier(this);
		}
	}


}



class BinarySetFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_binarySetFunction;
    }

	PERCENTILE_CONT() {
	    return this.getToken(GQLParser.PERCENTILE_CONT, 0);
	};

	PERCENTILE_DISC() {
	    return this.getToken(GQLParser.PERCENTILE_DISC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterBinarySetFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitBinarySetFunction(this);
		}
	}


}



class DependantValueExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_dependantValueExpr;
    }

	numericValueExpr() {
	    return this.getTypedRuleContext(NumericValueExprContext,0);
	};

	setQuantifier() {
	    return this.getTypedRuleContext(SetQuantifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterDependantValueExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitDependantValueExpr(this);
		}
	}


}



class IndependentValueExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_independentValueExpr;
    }

	numericValueExpr() {
	    return this.getTypedRuleContext(NumericValueExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterIndependentValueExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitIndependentValueExpr(this);
		}
	}


}



class SortSpecListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_sortSpecList;
    }

	sortSpec = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SortSpecContext);
	    } else {
	        return this.getTypedRuleContext(SortSpecContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.COMMA);
	    } else {
	        return this.getToken(GQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSortSpecList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSortSpecList(this);
		}
	}


}



class SortSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_sortSpec;
    }

	sortKey() {
	    return this.getTypedRuleContext(SortKeyContext,0);
	};

	orderingSpec() {
	    return this.getTypedRuleContext(OrderingSpecContext,0);
	};

	nullOrdering() {
	    return this.getTypedRuleContext(NullOrderingContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSortSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSortSpec(this);
		}
	}


}



class SortKeyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_sortKey;
    }

	aggregatingValueExpr() {
	    return this.getTypedRuleContext(AggregatingValueExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSortKey(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSortKey(this);
		}
	}


}



class OrderingSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_orderingSpec;
    }

	ASC() {
	    return this.getToken(GQLParser.ASC, 0);
	};

	ASCENDING() {
	    return this.getToken(GQLParser.ASCENDING, 0);
	};

	DESC() {
	    return this.getToken(GQLParser.DESC, 0);
	};

	DESCENDING() {
	    return this.getToken(GQLParser.DESCENDING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterOrderingSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitOrderingSpec(this);
		}
	}


}



class NullOrderingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_nullOrdering;
    }

	NULLS() {
	    return this.getToken(GQLParser.NULLS, 0);
	};

	FIRST() {
	    return this.getToken(GQLParser.FIRST, 0);
	};

	LAST() {
	    return this.getToken(GQLParser.LAST, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterNullOrdering(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitNullOrdering(this);
		}
	}


}



class LimitClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_limitClause;
    }

	LIMIT() {
	    return this.getToken(GQLParser.LIMIT, 0);
	};

	unsignedIntSpec() {
	    return this.getTypedRuleContext(UnsignedIntSpecContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterLimitClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitLimitClause(this);
		}
	}


}



class OffsetClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_offsetClause;
    }

	offsetSynonym() {
	    return this.getTypedRuleContext(OffsetSynonymContext,0);
	};

	unsignedIntSpec() {
	    return this.getTypedRuleContext(UnsignedIntSpecContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterOffsetClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitOffsetClause(this);
		}
	}


}



class OffsetSynonymContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_offsetSynonym;
    }

	OFFSET() {
	    return this.getToken(GQLParser.OFFSET, 0);
	};

	SKIP_() {
	    return this.getToken(GQLParser.SKIP_, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterOffsetSynonym(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitOffsetSynonym(this);
		}
	}


}



class GraphTypeSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_graphTypeSpec;
    }

	GRAPH() {
	    return this.getToken(GQLParser.GRAPH, 0);
	};

	TYPE() {
	    return this.getToken(GQLParser.TYPE, 0);
	};

	nestedGraphTypeSpec() {
	    return this.getTypedRuleContext(NestedGraphTypeSpecContext,0);
	};

	PROPERTY() {
	    return this.getToken(GQLParser.PROPERTY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGraphTypeSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGraphTypeSpec(this);
		}
	}


}



class NestedGraphTypeSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_nestedGraphTypeSpec;
    }

	LEFT_BRACE() {
	    return this.getToken(GQLParser.LEFT_BRACE, 0);
	};

	graphTypeSpecBody() {
	    return this.getTypedRuleContext(GraphTypeSpecBodyContext,0);
	};

	RIGHT_BRACE() {
	    return this.getToken(GQLParser.RIGHT_BRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterNestedGraphTypeSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitNestedGraphTypeSpec(this);
		}
	}


}



class GraphTypeSpecBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_graphTypeSpecBody;
    }

	elementTypeDefList() {
	    return this.getTypedRuleContext(ElementTypeDefListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGraphTypeSpecBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGraphTypeSpecBody(this);
		}
	}


}



class ElementTypeDefListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_elementTypeDefList;
    }

	elementTypeDef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ElementTypeDefContext);
	    } else {
	        return this.getTypedRuleContext(ElementTypeDefContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.COMMA);
	    } else {
	        return this.getToken(GQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterElementTypeDefList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitElementTypeDefList(this);
		}
	}


}



class ElementTypeDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_elementTypeDef;
    }

	nodeTypeDef() {
	    return this.getTypedRuleContext(NodeTypeDefContext,0);
	};

	edgeTypeDef() {
	    return this.getTypedRuleContext(EdgeTypeDefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterElementTypeDef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitElementTypeDef(this);
		}
	}


}



class NodeTypeDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_nodeTypeDef;
    }

	nodeTypePattern() {
	    return this.getTypedRuleContext(NodeTypePatternContext,0);
	};

	nodeSynonym() {
	    return this.getTypedRuleContext(NodeSynonymContext,0);
	};

	nodeTypePhrase() {
	    return this.getTypedRuleContext(NodeTypePhraseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterNodeTypeDef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitNodeTypeDef(this);
		}
	}


}



class NodeTypePatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_nodeTypePattern;
    }

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	nodeTypeName() {
	    return this.getTypedRuleContext(NodeTypeNameContext,0);
	};

	nodeTypeFiller() {
	    return this.getTypedRuleContext(NodeTypeFillerContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterNodeTypePattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitNodeTypePattern(this);
		}
	}


}



class NodeTypePhraseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_nodeTypePhrase;
    }

	nodeTypeName() {
	    return this.getTypedRuleContext(NodeTypeNameContext,0);
	};

	TYPE() {
	    return this.getToken(GQLParser.TYPE, 0);
	};

	nodeTypeFiller() {
	    return this.getTypedRuleContext(NodeTypeFillerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterNodeTypePhrase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitNodeTypePhrase(this);
		}
	}


}



class NodeTypeNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_nodeTypeName;
    }

	elementTypeName() {
	    return this.getTypedRuleContext(ElementTypeNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterNodeTypeName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitNodeTypeName(this);
		}
	}


}



class NodeTypeFillerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_nodeTypeFiller;
    }

	nodeTypeLabelSetDef() {
	    return this.getTypedRuleContext(NodeTypeLabelSetDefContext,0);
	};

	nodeTypePropertyTypeSetDef() {
	    return this.getTypedRuleContext(NodeTypePropertyTypeSetDefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterNodeTypeFiller(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitNodeTypeFiller(this);
		}
	}


}



class NodeTypeLabelSetDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_nodeTypeLabelSetDef;
    }

	labelSetDef() {
	    return this.getTypedRuleContext(LabelSetDefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterNodeTypeLabelSetDef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitNodeTypeLabelSetDef(this);
		}
	}


}



class NodeTypePropertyTypeSetDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_nodeTypePropertyTypeSetDef;
    }

	propertyTypeSetDef() {
	    return this.getTypedRuleContext(PropertyTypeSetDefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterNodeTypePropertyTypeSetDef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitNodeTypePropertyTypeSetDef(this);
		}
	}


}



class EdgeTypeDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_edgeTypeDef;
    }

	edgeTypePattern() {
	    return this.getTypedRuleContext(EdgeTypePatternContext,0);
	};

	edgeSynonym() {
	    return this.getTypedRuleContext(EdgeSynonymContext,0);
	};

	edgeTypePhrase() {
	    return this.getTypedRuleContext(EdgeTypePhraseContext,0);
	};

	edgeKind() {
	    return this.getTypedRuleContext(EdgeKindContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterEdgeTypeDef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitEdgeTypeDef(this);
		}
	}


}



class EdgeTypePatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_edgeTypePattern;
    }

	fullEdgeTypePattern() {
	    return this.getTypedRuleContext(FullEdgeTypePatternContext,0);
	};

	abbreviatedEdgeTypePattern() {
	    return this.getTypedRuleContext(AbbreviatedEdgeTypePatternContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterEdgeTypePattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitEdgeTypePattern(this);
		}
	}


}



class EdgeTypePhraseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_edgeTypePhrase;
    }

	edgeTypeName() {
	    return this.getTypedRuleContext(EdgeTypeNameContext,0);
	};

	edgeTypeFiller() {
	    return this.getTypedRuleContext(EdgeTypeFillerContext,0);
	};

	endpointDef() {
	    return this.getTypedRuleContext(EndpointDefContext,0);
	};

	TYPE() {
	    return this.getToken(GQLParser.TYPE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterEdgeTypePhrase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitEdgeTypePhrase(this);
		}
	}


}



class EdgeTypeNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_edgeTypeName;
    }

	elementTypeName() {
	    return this.getTypedRuleContext(ElementTypeNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterEdgeTypeName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitEdgeTypeName(this);
		}
	}


}



class EdgeTypeFillerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_edgeTypeFiller;
    }

	edgeTypeLabelSetDef() {
	    return this.getTypedRuleContext(EdgeTypeLabelSetDefContext,0);
	};

	edgeTypePropertyTypeSetDef() {
	    return this.getTypedRuleContext(EdgeTypePropertyTypeSetDefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterEdgeTypeFiller(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitEdgeTypeFiller(this);
		}
	}


}



class EdgeTypeLabelSetDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_edgeTypeLabelSetDef;
    }

	labelSetDef() {
	    return this.getTypedRuleContext(LabelSetDefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterEdgeTypeLabelSetDef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitEdgeTypeLabelSetDef(this);
		}
	}


}



class EdgeTypePropertyTypeSetDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_edgeTypePropertyTypeSetDef;
    }

	propertyTypeSetDef() {
	    return this.getTypedRuleContext(PropertyTypeSetDefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterEdgeTypePropertyTypeSetDef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitEdgeTypePropertyTypeSetDef(this);
		}
	}


}



class FullEdgeTypePatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_fullEdgeTypePattern;
    }

	fullEdgeTypePatternPointingRight() {
	    return this.getTypedRuleContext(FullEdgeTypePatternPointingRightContext,0);
	};

	fullEdgeTypePatternPointingLeft() {
	    return this.getTypedRuleContext(FullEdgeTypePatternPointingLeftContext,0);
	};

	fullEdgeTypePatternUndirected() {
	    return this.getTypedRuleContext(FullEdgeTypePatternUndirectedContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterFullEdgeTypePattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitFullEdgeTypePattern(this);
		}
	}


}



class FullEdgeTypePatternPointingRightContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_fullEdgeTypePatternPointingRight;
    }

	sourceNodeTypeRef() {
	    return this.getTypedRuleContext(SourceNodeTypeRefContext,0);
	};

	arcTypePointingRight() {
	    return this.getTypedRuleContext(ArcTypePointingRightContext,0);
	};

	destinationNodeTypeRef() {
	    return this.getTypedRuleContext(DestinationNodeTypeRefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterFullEdgeTypePatternPointingRight(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitFullEdgeTypePatternPointingRight(this);
		}
	}


}



class FullEdgeTypePatternPointingLeftContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_fullEdgeTypePatternPointingLeft;
    }

	destinationNodeTypeRef() {
	    return this.getTypedRuleContext(DestinationNodeTypeRefContext,0);
	};

	arcTypePointingLeft() {
	    return this.getTypedRuleContext(ArcTypePointingLeftContext,0);
	};

	sourceNodeTypeRef() {
	    return this.getTypedRuleContext(SourceNodeTypeRefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterFullEdgeTypePatternPointingLeft(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitFullEdgeTypePatternPointingLeft(this);
		}
	}


}



class FullEdgeTypePatternUndirectedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_fullEdgeTypePatternUndirected;
    }

	sourceNodeTypeRef() {
	    return this.getTypedRuleContext(SourceNodeTypeRefContext,0);
	};

	arcTypeUndirected() {
	    return this.getTypedRuleContext(ArcTypeUndirectedContext,0);
	};

	destinationNodeTypeRef() {
	    return this.getTypedRuleContext(DestinationNodeTypeRefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterFullEdgeTypePatternUndirected(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitFullEdgeTypePatternUndirected(this);
		}
	}


}



class ArcTypePointingRightContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_arcTypePointingRight;
    }

	MINUS_LEFT_BRACKET() {
	    return this.getToken(GQLParser.MINUS_LEFT_BRACKET, 0);
	};

	arcTypeFiller() {
	    return this.getTypedRuleContext(ArcTypeFillerContext,0);
	};

	BRACKET_RIGHT_ARROW() {
	    return this.getToken(GQLParser.BRACKET_RIGHT_ARROW, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterArcTypePointingRight(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitArcTypePointingRight(this);
		}
	}


}



class ArcTypePointingLeftContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_arcTypePointingLeft;
    }

	LEFT_ARROW_BRACKET() {
	    return this.getToken(GQLParser.LEFT_ARROW_BRACKET, 0);
	};

	arcTypeFiller() {
	    return this.getTypedRuleContext(ArcTypeFillerContext,0);
	};

	RIGHT_BRACKET_MINUS() {
	    return this.getToken(GQLParser.RIGHT_BRACKET_MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterArcTypePointingLeft(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitArcTypePointingLeft(this);
		}
	}


}



class ArcTypeUndirectedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_arcTypeUndirected;
    }

	TILDE_LEFT_BRACKET() {
	    return this.getToken(GQLParser.TILDE_LEFT_BRACKET, 0);
	};

	arcTypeFiller() {
	    return this.getTypedRuleContext(ArcTypeFillerContext,0);
	};

	RIGHT_BRACKET_TILDE() {
	    return this.getToken(GQLParser.RIGHT_BRACKET_TILDE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterArcTypeUndirected(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitArcTypeUndirected(this);
		}
	}


}



class ArcTypeFillerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_arcTypeFiller;
    }

	edgeTypeName() {
	    return this.getTypedRuleContext(EdgeTypeNameContext,0);
	};

	edgeTypeFiller() {
	    return this.getTypedRuleContext(EdgeTypeFillerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterArcTypeFiller(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitArcTypeFiller(this);
		}
	}


}



class AbbreviatedEdgeTypePatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_abbreviatedEdgeTypePattern;
    }

	abbreviatedEdgeTypePatternPointingRight() {
	    return this.getTypedRuleContext(AbbreviatedEdgeTypePatternPointingRightContext,0);
	};

	abbreviatedEdgeTypePatternPointingLeft() {
	    return this.getTypedRuleContext(AbbreviatedEdgeTypePatternPointingLeftContext,0);
	};

	abbreviatedEdgeTypePatternUndirected() {
	    return this.getTypedRuleContext(AbbreviatedEdgeTypePatternUndirectedContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterAbbreviatedEdgeTypePattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitAbbreviatedEdgeTypePattern(this);
		}
	}


}



class AbbreviatedEdgeTypePatternPointingRightContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_abbreviatedEdgeTypePatternPointingRight;
    }

	sourceNodeTypeRef() {
	    return this.getTypedRuleContext(SourceNodeTypeRefContext,0);
	};

	RIGHT_ARROW() {
	    return this.getToken(GQLParser.RIGHT_ARROW, 0);
	};

	destinationNodeTypeRef() {
	    return this.getTypedRuleContext(DestinationNodeTypeRefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterAbbreviatedEdgeTypePatternPointingRight(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitAbbreviatedEdgeTypePatternPointingRight(this);
		}
	}


}



class AbbreviatedEdgeTypePatternPointingLeftContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_abbreviatedEdgeTypePatternPointingLeft;
    }

	destinationNodeTypeRef() {
	    return this.getTypedRuleContext(DestinationNodeTypeRefContext,0);
	};

	LEFT_ARROW() {
	    return this.getToken(GQLParser.LEFT_ARROW, 0);
	};

	sourceNodeTypeRef() {
	    return this.getTypedRuleContext(SourceNodeTypeRefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterAbbreviatedEdgeTypePatternPointingLeft(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitAbbreviatedEdgeTypePatternPointingLeft(this);
		}
	}


}



class AbbreviatedEdgeTypePatternUndirectedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_abbreviatedEdgeTypePatternUndirected;
    }

	sourceNodeTypeRef() {
	    return this.getTypedRuleContext(SourceNodeTypeRefContext,0);
	};

	TILDE() {
	    return this.getToken(GQLParser.TILDE, 0);
	};

	destinationNodeTypeRef() {
	    return this.getTypedRuleContext(DestinationNodeTypeRefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterAbbreviatedEdgeTypePatternUndirected(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitAbbreviatedEdgeTypePatternUndirected(this);
		}
	}


}



class NodeTypeRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_nodeTypeRef;
    }

	sourceNodeTypeRef() {
	    return this.getTypedRuleContext(SourceNodeTypeRefContext,0);
	};

	destinationNodeTypeRef() {
	    return this.getTypedRuleContext(DestinationNodeTypeRefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterNodeTypeRef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitNodeTypeRef(this);
		}
	}


}



class SourceNodeTypeRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_sourceNodeTypeRef;
    }

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	sourceNodeTypeName() {
	    return this.getTypedRuleContext(SourceNodeTypeNameContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	nodeTypeFiller() {
	    return this.getTypedRuleContext(NodeTypeFillerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSourceNodeTypeRef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSourceNodeTypeRef(this);
		}
	}


}



class DestinationNodeTypeRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_destinationNodeTypeRef;
    }

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	destinationNodeTypeName() {
	    return this.getTypedRuleContext(DestinationNodeTypeNameContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	nodeTypeFiller() {
	    return this.getTypedRuleContext(NodeTypeFillerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterDestinationNodeTypeRef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitDestinationNodeTypeRef(this);
		}
	}


}



class EdgeKindContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_edgeKind;
    }

	DIRECTED() {
	    return this.getToken(GQLParser.DIRECTED, 0);
	};

	UNDIRECTED() {
	    return this.getToken(GQLParser.UNDIRECTED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterEdgeKind(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitEdgeKind(this);
		}
	}


}



class EndpointDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_endpointDef;
    }

	CONNECTING() {
	    return this.getToken(GQLParser.CONNECTING, 0);
	};

	enpointPairDef() {
	    return this.getTypedRuleContext(EnpointPairDefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterEndpointDef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitEndpointDef(this);
		}
	}


}



class EnpointPairDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_enpointPairDef;
    }

	endpointPairDefPointingRight() {
	    return this.getTypedRuleContext(EndpointPairDefPointingRightContext,0);
	};

	endpointPairDefPointingLeft() {
	    return this.getTypedRuleContext(EndpointPairDefPointingLeftContext,0);
	};

	endpointPairDefUndirected() {
	    return this.getTypedRuleContext(EndpointPairDefUndirectedContext,0);
	};

	abbreviatedEdgeTypePattern() {
	    return this.getTypedRuleContext(AbbreviatedEdgeTypePatternContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterEnpointPairDef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitEnpointPairDef(this);
		}
	}


}



class EndpointPairDefPointingRightContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_endpointPairDefPointingRight;
    }

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	sourceNodeTypeName() {
	    return this.getTypedRuleContext(SourceNodeTypeNameContext,0);
	};

	connectorPointingRight() {
	    return this.getTypedRuleContext(ConnectorPointingRightContext,0);
	};

	destinationNodeTypeName() {
	    return this.getTypedRuleContext(DestinationNodeTypeNameContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterEndpointPairDefPointingRight(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitEndpointPairDefPointingRight(this);
		}
	}


}



class EndpointPairDefPointingLeftContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_endpointPairDefPointingLeft;
    }

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	destinationNodeTypeName() {
	    return this.getTypedRuleContext(DestinationNodeTypeNameContext,0);
	};

	connectorPointingLeft() {
	    return this.getTypedRuleContext(ConnectorPointingLeftContext,0);
	};

	sourceNodeTypeName() {
	    return this.getTypedRuleContext(SourceNodeTypeNameContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterEndpointPairDefPointingLeft(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitEndpointPairDefPointingLeft(this);
		}
	}


}



class EndpointPairDefUndirectedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_endpointPairDefUndirected;
    }

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	sourceNodeTypeName() {
	    return this.getTypedRuleContext(SourceNodeTypeNameContext,0);
	};

	connectorUndirected() {
	    return this.getTypedRuleContext(ConnectorUndirectedContext,0);
	};

	destinationNodeTypeName() {
	    return this.getTypedRuleContext(DestinationNodeTypeNameContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterEndpointPairDefUndirected(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitEndpointPairDefUndirected(this);
		}
	}


}



class ConnectorPointingRightContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_connectorPointingRight;
    }

	TO() {
	    return this.getToken(GQLParser.TO, 0);
	};

	RIGHT_ARROW() {
	    return this.getToken(GQLParser.RIGHT_ARROW, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterConnectorPointingRight(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitConnectorPointingRight(this);
		}
	}


}



class ConnectorPointingLeftContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_connectorPointingLeft;
    }

	LEFT_ARROW() {
	    return this.getToken(GQLParser.LEFT_ARROW, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterConnectorPointingLeft(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitConnectorPointingLeft(this);
		}
	}


}



class ConnectorUndirectedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_connectorUndirected;
    }

	TO() {
	    return this.getToken(GQLParser.TO, 0);
	};

	TILDE() {
	    return this.getToken(GQLParser.TILDE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterConnectorUndirected(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitConnectorUndirected(this);
		}
	}


}



class SourceNodeTypeNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_sourceNodeTypeName;
    }

	elementTypeName() {
	    return this.getTypedRuleContext(ElementTypeNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSourceNodeTypeName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSourceNodeTypeName(this);
		}
	}


}



class DestinationNodeTypeNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_destinationNodeTypeName;
    }

	elementTypeName() {
	    return this.getTypedRuleContext(ElementTypeNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterDestinationNodeTypeName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitDestinationNodeTypeName(this);
		}
	}


}



class LabelSetDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_labelSetDef;
    }

	LABEL() {
	    return this.getToken(GQLParser.LABEL, 0);
	};

	labelName() {
	    return this.getTypedRuleContext(LabelNameContext,0);
	};

	LABELS() {
	    return this.getToken(GQLParser.LABELS, 0);
	};

	labelSetSpec() {
	    return this.getTypedRuleContext(LabelSetSpecContext,0);
	};

	IS() {
	    return this.getToken(GQLParser.IS, 0);
	};

	COLON() {
	    return this.getToken(GQLParser.COLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterLabelSetDef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitLabelSetDef(this);
		}
	}


}



class PropertyTypeSetDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_propertyTypeSetDef;
    }

	LEFT_BRACE() {
	    return this.getToken(GQLParser.LEFT_BRACE, 0);
	};

	RIGHT_BRACE() {
	    return this.getToken(GQLParser.RIGHT_BRACE, 0);
	};

	propertyTypeDefList() {
	    return this.getTypedRuleContext(PropertyTypeDefListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterPropertyTypeSetDef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitPropertyTypeSetDef(this);
		}
	}


}



class PropertyTypeDefListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_propertyTypeDefList;
    }

	propertyTypeDef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PropertyTypeDefContext);
	    } else {
	        return this.getTypedRuleContext(PropertyTypeDefContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.COMMA);
	    } else {
	        return this.getToken(GQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterPropertyTypeDefList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitPropertyTypeDefList(this);
		}
	}


}



class PropertyTypeDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_propertyTypeDef;
    }

	propertyName() {
	    return this.getTypedRuleContext(PropertyNameContext,0);
	};

	propertyValueType() {
	    return this.getTypedRuleContext(PropertyValueTypeContext,0);
	};

	typed() {
	    return this.getTypedRuleContext(TypedContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterPropertyTypeDef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitPropertyTypeDef(this);
		}
	}


}



class PropertyValueTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_propertyValueType;
    }

	valueType() {
	    return this.getTypedRuleContext(ValueTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterPropertyValueType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitPropertyValueType(this);
		}
	}


}



class BindingTableTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_bindingTableType;
    }

	TABLE() {
	    return this.getToken(GQLParser.TABLE, 0);
	};

	fieldTypesSpec() {
	    return this.getTypedRuleContext(FieldTypesSpecContext,0);
	};

	BINDING() {
	    return this.getToken(GQLParser.BINDING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterBindingTableType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitBindingTableType(this);
		}
	}


}



class ValueTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_valueType;
    }

	predefinedType() {
	    return this.getTypedRuleContext(PredefinedTypeContext,0);
	};

	constructedType() {
	    return this.getTypedRuleContext(ConstructedTypeContext,0);
	};

	dynamicUnionType() {
	    return this.getTypedRuleContext(DynamicUnionTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterValueType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitValueType(this);
		}
	}


}



class TypedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_typed;
    }

	DOUBLE_COLON() {
	    return this.getToken(GQLParser.DOUBLE_COLON, 0);
	};

	TYPED() {
	    return this.getToken(GQLParser.TYPED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterTyped(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitTyped(this);
		}
	}


}



class PredefinedTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_predefinedType;
    }

	booleanType() {
	    return this.getTypedRuleContext(BooleanTypeContext,0);
	};

	charStringType() {
	    return this.getTypedRuleContext(CharStringTypeContext,0);
	};

	byteStringType() {
	    return this.getTypedRuleContext(ByteStringTypeContext,0);
	};

	numericType() {
	    return this.getTypedRuleContext(NumericTypeContext,0);
	};

	temporalType() {
	    return this.getTypedRuleContext(TemporalTypeContext,0);
	};

	refValueType() {
	    return this.getTypedRuleContext(RefValueTypeContext,0);
	};

	pathValueType() {
	    return this.getTypedRuleContext(PathValueTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterPredefinedType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitPredefinedType(this);
		}
	}


}



class BooleanTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_booleanType;
    }

	BOOL() {
	    return this.getToken(GQLParser.BOOL, 0);
	};

	BOOLEAN() {
	    return this.getToken(GQLParser.BOOLEAN, 0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterBooleanType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitBooleanType(this);
		}
	}


}



class CharStringTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_charStringType;
    }

	STRING() {
	    return this.getToken(GQLParser.STRING, 0);
	};

	VARCHAR() {
	    return this.getToken(GQLParser.VARCHAR, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	maxLength() {
	    return this.getTypedRuleContext(MaxLengthContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterCharStringType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitCharStringType(this);
		}
	}


}



class ByteStringTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_byteStringType;
    }

	BYTES() {
	    return this.getToken(GQLParser.BYTES, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	minLength() {
	    return this.getTypedRuleContext(MinLengthContext,0);
	};

	maxLength() {
	    return this.getTypedRuleContext(MaxLengthContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	COMMA() {
	    return this.getToken(GQLParser.COMMA, 0);
	};

	BINARY() {
	    return this.getToken(GQLParser.BINARY, 0);
	};

	fixedLength() {
	    return this.getTypedRuleContext(FixedLengthContext,0);
	};

	VARBINARY() {
	    return this.getToken(GQLParser.VARBINARY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterByteStringType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitByteStringType(this);
		}
	}


}



class MinLengthContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_minLength;
    }

	UNSIGNED_INT() {
	    return this.getToken(GQLParser.UNSIGNED_INT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterMinLength(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitMinLength(this);
		}
	}


}



class MaxLengthContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_maxLength;
    }

	UNSIGNED_INT() {
	    return this.getToken(GQLParser.UNSIGNED_INT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterMaxLength(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitMaxLength(this);
		}
	}


}



class FixedLengthContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_fixedLength;
    }

	UNSIGNED_INT() {
	    return this.getToken(GQLParser.UNSIGNED_INT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterFixedLength(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitFixedLength(this);
		}
	}


}



class NumericTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_numericType;
    }

	exactNumericType() {
	    return this.getTypedRuleContext(ExactNumericTypeContext,0);
	};

	approximateNumericType() {
	    return this.getTypedRuleContext(ApproximateNumericTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterNumericType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitNumericType(this);
		}
	}


}



class ExactNumericTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_exactNumericType;
    }

	binaryExactNumericType() {
	    return this.getTypedRuleContext(BinaryExactNumericTypeContext,0);
	};

	decimalExactNumericType() {
	    return this.getTypedRuleContext(DecimalExactNumericTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterExactNumericType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitExactNumericType(this);
		}
	}


}



class BinaryExactNumericTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_binaryExactNumericType;
    }

	signedBinaryExactNumericType() {
	    return this.getTypedRuleContext(SignedBinaryExactNumericTypeContext,0);
	};

	unsignedBinaryExactNumericType() {
	    return this.getTypedRuleContext(UnsignedBinaryExactNumericTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterBinaryExactNumericType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitBinaryExactNumericType(this);
		}
	}


}



class SignedBinaryExactNumericTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_signedBinaryExactNumericType;
    }

	INT8() {
	    return this.getToken(GQLParser.INT8, 0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	INT16() {
	    return this.getToken(GQLParser.INT16, 0);
	};

	INT32() {
	    return this.getToken(GQLParser.INT32, 0);
	};

	INT64() {
	    return this.getToken(GQLParser.INT64, 0);
	};

	INT128() {
	    return this.getToken(GQLParser.INT128, 0);
	};

	INT256() {
	    return this.getToken(GQLParser.INT256, 0);
	};

	SMALLINT() {
	    return this.getToken(GQLParser.SMALLINT, 0);
	};

	INT() {
	    return this.getToken(GQLParser.INT, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	precision() {
	    return this.getTypedRuleContext(PrecisionContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	BIGINT() {
	    return this.getToken(GQLParser.BIGINT, 0);
	};

	verboseBinaryExactNumericType() {
	    return this.getTypedRuleContext(VerboseBinaryExactNumericTypeContext,0);
	};

	SIGNED() {
	    return this.getToken(GQLParser.SIGNED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSignedBinaryExactNumericType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSignedBinaryExactNumericType(this);
		}
	}


}



class UnsignedBinaryExactNumericTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_unsignedBinaryExactNumericType;
    }

	UINT8() {
	    return this.getToken(GQLParser.UINT8, 0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	UINT16() {
	    return this.getToken(GQLParser.UINT16, 0);
	};

	UINT32() {
	    return this.getToken(GQLParser.UINT32, 0);
	};

	UINT64() {
	    return this.getToken(GQLParser.UINT64, 0);
	};

	UINT128() {
	    return this.getToken(GQLParser.UINT128, 0);
	};

	UINT256() {
	    return this.getToken(GQLParser.UINT256, 0);
	};

	USMALLINT() {
	    return this.getToken(GQLParser.USMALLINT, 0);
	};

	UINT() {
	    return this.getToken(GQLParser.UINT, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	precision() {
	    return this.getTypedRuleContext(PrecisionContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	UBIGINT() {
	    return this.getToken(GQLParser.UBIGINT, 0);
	};

	UNSIGNED() {
	    return this.getToken(GQLParser.UNSIGNED, 0);
	};

	verboseBinaryExactNumericType() {
	    return this.getTypedRuleContext(VerboseBinaryExactNumericTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterUnsignedBinaryExactNumericType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitUnsignedBinaryExactNumericType(this);
		}
	}


}



class VerboseBinaryExactNumericTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_verboseBinaryExactNumericType;
    }

	INTEGER8() {
	    return this.getToken(GQLParser.INTEGER8, 0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	INTEGER16() {
	    return this.getToken(GQLParser.INTEGER16, 0);
	};

	INTEGER32() {
	    return this.getToken(GQLParser.INTEGER32, 0);
	};

	INTEGER64() {
	    return this.getToken(GQLParser.INTEGER64, 0);
	};

	INTEGER128() {
	    return this.getToken(GQLParser.INTEGER128, 0);
	};

	INTEGER256() {
	    return this.getToken(GQLParser.INTEGER256, 0);
	};

	SMALL() {
	    return this.getToken(GQLParser.SMALL, 0);
	};

	INTEGER() {
	    return this.getToken(GQLParser.INTEGER, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	precision() {
	    return this.getTypedRuleContext(PrecisionContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	BIG() {
	    return this.getToken(GQLParser.BIG, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterVerboseBinaryExactNumericType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitVerboseBinaryExactNumericType(this);
		}
	}


}



class DecimalExactNumericTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_decimalExactNumericType;
    }

	DECIMAL() {
	    return this.getToken(GQLParser.DECIMAL, 0);
	};

	DEC() {
	    return this.getToken(GQLParser.DEC, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	precision() {
	    return this.getTypedRuleContext(PrecisionContext,0);
	};

	COMMA() {
	    return this.getToken(GQLParser.COMMA, 0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	scale() {
	    return this.getTypedRuleContext(ScaleContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterDecimalExactNumericType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitDecimalExactNumericType(this);
		}
	}


}



class PrecisionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_precision;
    }

	UNSIGNED_DECIMAL_INT() {
	    return this.getToken(GQLParser.UNSIGNED_DECIMAL_INT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterPrecision(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitPrecision(this);
		}
	}


}



class ScaleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_scale;
    }

	UNSIGNED_DECIMAL_INT() {
	    return this.getToken(GQLParser.UNSIGNED_DECIMAL_INT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterScale(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitScale(this);
		}
	}


}



class ApproximateNumericTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_approximateNumericType;
    }

	FLOAT16() {
	    return this.getToken(GQLParser.FLOAT16, 0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	FLOAT32() {
	    return this.getToken(GQLParser.FLOAT32, 0);
	};

	FLOAT64() {
	    return this.getToken(GQLParser.FLOAT64, 0);
	};

	FLOAT128() {
	    return this.getToken(GQLParser.FLOAT128, 0);
	};

	FLOAT256() {
	    return this.getToken(GQLParser.FLOAT256, 0);
	};

	FLOAT() {
	    return this.getToken(GQLParser.FLOAT, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	precision() {
	    return this.getTypedRuleContext(PrecisionContext,0);
	};

	COMMA() {
	    return this.getToken(GQLParser.COMMA, 0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	scale() {
	    return this.getTypedRuleContext(ScaleContext,0);
	};

	REAL() {
	    return this.getToken(GQLParser.REAL, 0);
	};

	DOUBLE() {
	    return this.getToken(GQLParser.DOUBLE, 0);
	};

	PRECISION() {
	    return this.getToken(GQLParser.PRECISION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterApproximateNumericType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitApproximateNumericType(this);
		}
	}


}



class TemporalTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_temporalType;
    }

	temporalInstantType() {
	    return this.getTypedRuleContext(TemporalInstantTypeContext,0);
	};

	temporalDurationType() {
	    return this.getTypedRuleContext(TemporalDurationTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterTemporalType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitTemporalType(this);
		}
	}


}



class TemporalInstantTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_temporalInstantType;
    }

	dateTimeType() {
	    return this.getTypedRuleContext(DateTimeTypeContext,0);
	};

	localDateTimeType() {
	    return this.getTypedRuleContext(LocalDateTimeTypeContext,0);
	};

	dateType() {
	    return this.getTypedRuleContext(DateTypeContext,0);
	};

	timeType() {
	    return this.getTypedRuleContext(TimeTypeContext,0);
	};

	localTimeType() {
	    return this.getTypedRuleContext(LocalTimeTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterTemporalInstantType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitTemporalInstantType(this);
		}
	}


}



class TemporalDurationTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_temporalDurationType;
    }

	durationType() {
	    return this.getTypedRuleContext(DurationTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterTemporalDurationType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitTemporalDurationType(this);
		}
	}


}



class DateTimeTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_dateTimeType;
    }

	ZONED() {
	    return this.getToken(GQLParser.ZONED, 0);
	};

	DATETIME() {
	    return this.getToken(GQLParser.DATETIME, 0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	TIMESTAMP() {
	    return this.getToken(GQLParser.TIMESTAMP, 0);
	};

	WITH() {
	    return this.getToken(GQLParser.WITH, 0);
	};

	TIMEZONE() {
	    return this.getToken(GQLParser.TIMEZONE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterDateTimeType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitDateTimeType(this);
		}
	}


}



class LocalDateTimeTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_localDateTimeType;
    }

	LOCAL() {
	    return this.getToken(GQLParser.LOCAL, 0);
	};

	DATETIME() {
	    return this.getToken(GQLParser.DATETIME, 0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	TIMESTAMP() {
	    return this.getToken(GQLParser.TIMESTAMP, 0);
	};

	WITHOUT() {
	    return this.getToken(GQLParser.WITHOUT, 0);
	};

	TIMEZONE() {
	    return this.getToken(GQLParser.TIMEZONE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterLocalDateTimeType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitLocalDateTimeType(this);
		}
	}


}



class DateTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_dateType;
    }

	DATE() {
	    return this.getToken(GQLParser.DATE, 0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterDateType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitDateType(this);
		}
	}


}



class TimeTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_timeType;
    }

	ZONED() {
	    return this.getToken(GQLParser.ZONED, 0);
	};

	TIME() {
	    return this.getToken(GQLParser.TIME, 0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	WITH() {
	    return this.getToken(GQLParser.WITH, 0);
	};

	TIMEZONE() {
	    return this.getToken(GQLParser.TIMEZONE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterTimeType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitTimeType(this);
		}
	}


}



class LocalTimeTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_localTimeType;
    }

	LOCAL() {
	    return this.getToken(GQLParser.LOCAL, 0);
	};

	TIME() {
	    return this.getToken(GQLParser.TIME, 0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	WITHOUT() {
	    return this.getToken(GQLParser.WITHOUT, 0);
	};

	TIMEZONE() {
	    return this.getToken(GQLParser.TIMEZONE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterLocalTimeType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitLocalTimeType(this);
		}
	}


}



class DurationTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_durationType;
    }

	DURATION() {
	    return this.getToken(GQLParser.DURATION, 0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterDurationType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitDurationType(this);
		}
	}


}



class RefValueTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_refValueType;
    }

	graphRefValueType() {
	    return this.getTypedRuleContext(GraphRefValueTypeContext,0);
	};

	bindingTableRefValueType() {
	    return this.getTypedRuleContext(BindingTableRefValueTypeContext,0);
	};

	nodeRefValueType() {
	    return this.getTypedRuleContext(NodeRefValueTypeContext,0);
	};

	edgeRefValueType() {
	    return this.getTypedRuleContext(EdgeRefValueTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterRefValueType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitRefValueType(this);
		}
	}


}



class GraphRefValueTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_graphRefValueType;
    }

	openGraphRefValueType() {
	    return this.getTypedRuleContext(OpenGraphRefValueTypeContext,0);
	};

	closedGraphRefValueType() {
	    return this.getTypedRuleContext(ClosedGraphRefValueTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGraphRefValueType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGraphRefValueType(this);
		}
	}


}



class OpenGraphRefValueTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_openGraphRefValueType;
    }

	OPEN() {
	    return this.getToken(GQLParser.OPEN, 0);
	};

	GRAPH() {
	    return this.getToken(GQLParser.GRAPH, 0);
	};

	PROPERTY() {
	    return this.getToken(GQLParser.PROPERTY, 0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterOpenGraphRefValueType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitOpenGraphRefValueType(this);
		}
	}


}



class ClosedGraphRefValueTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_closedGraphRefValueType;
    }

	graphTypeSpec() {
	    return this.getTypedRuleContext(GraphTypeSpecContext,0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterClosedGraphRefValueType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitClosedGraphRefValueType(this);
		}
	}


}



class BindingTableRefValueTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_bindingTableRefValueType;
    }

	bindingTableType() {
	    return this.getTypedRuleContext(BindingTableTypeContext,0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterBindingTableRefValueType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitBindingTableRefValueType(this);
		}
	}


}



class NodeRefValueTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_nodeRefValueType;
    }

	openNodeRefValueType() {
	    return this.getTypedRuleContext(OpenNodeRefValueTypeContext,0);
	};

	closedNodeRefValueType() {
	    return this.getTypedRuleContext(ClosedNodeRefValueTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterNodeRefValueType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitNodeRefValueType(this);
		}
	}


}



class OpenNodeRefValueTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_openNodeRefValueType;
    }

	nodeSynonym() {
	    return this.getTypedRuleContext(NodeSynonymContext,0);
	};

	OPEN() {
	    return this.getToken(GQLParser.OPEN, 0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterOpenNodeRefValueType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitOpenNodeRefValueType(this);
		}
	}


}



class ClosedNodeRefValueTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_closedNodeRefValueType;
    }

	edgeTypeDef() {
	    return this.getTypedRuleContext(EdgeTypeDefContext,0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterClosedNodeRefValueType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitClosedNodeRefValueType(this);
		}
	}


}



class EdgeRefValueTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_edgeRefValueType;
    }

	openEdgeRefValueType() {
	    return this.getTypedRuleContext(OpenEdgeRefValueTypeContext,0);
	};

	closedEdgeRefValueType() {
	    return this.getTypedRuleContext(ClosedEdgeRefValueTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterEdgeRefValueType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitEdgeRefValueType(this);
		}
	}


}



class OpenEdgeRefValueTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_openEdgeRefValueType;
    }

	edgeSynonym() {
	    return this.getTypedRuleContext(EdgeSynonymContext,0);
	};

	OPEN() {
	    return this.getToken(GQLParser.OPEN, 0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterOpenEdgeRefValueType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitOpenEdgeRefValueType(this);
		}
	}


}



class ClosedEdgeRefValueTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_closedEdgeRefValueType;
    }

	edgeTypeDef() {
	    return this.getTypedRuleContext(EdgeTypeDefContext,0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterClosedEdgeRefValueType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitClosedEdgeRefValueType(this);
		}
	}


}



class ConstructedTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_constructedType;
    }

	listValueType() {
	    return this.getTypedRuleContext(ListValueTypeContext,0);
	};

	recordType() {
	    return this.getTypedRuleContext(RecordTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterConstructedType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitConstructedType(this);
		}
	}


}



class ListValueTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_listValueType;
    }

	listValueTypeName() {
	    return this.getTypedRuleContext(ListValueTypeNameContext,0);
	};

	LEFT_ANGLE_BRACKET() {
	    return this.getToken(GQLParser.LEFT_ANGLE_BRACKET, 0);
	};

	predefinedType() {
	    return this.getTypedRuleContext(PredefinedTypeContext,0);
	};

	RIGHT_ANGLE_BRACKET() {
	    return this.getToken(GQLParser.RIGHT_ANGLE_BRACKET, 0);
	};

	LEFT_BRACKET() {
	    return this.getToken(GQLParser.LEFT_BRACKET, 0);
	};

	maxLength() {
	    return this.getTypedRuleContext(MaxLengthContext,0);
	};

	RIGHT_BRACKET() {
	    return this.getToken(GQLParser.RIGHT_BRACKET, 0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterListValueType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitListValueType(this);
		}
	}


}



class ListValueTypeNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_listValueTypeName;
    }

	listValueTypeNameSynonym() {
	    return this.getTypedRuleContext(ListValueTypeNameSynonymContext,0);
	};

	GROUP() {
	    return this.getToken(GQLParser.GROUP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterListValueTypeName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitListValueTypeName(this);
		}
	}


}



class ListValueTypeNameSynonymContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_listValueTypeNameSynonym;
    }

	LIST() {
	    return this.getToken(GQLParser.LIST, 0);
	};

	ARRAY() {
	    return this.getToken(GQLParser.ARRAY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterListValueTypeNameSynonym(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitListValueTypeNameSynonym(this);
		}
	}


}



class RecordTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_recordType;
    }

	RECORD() {
	    return this.getToken(GQLParser.RECORD, 0);
	};

	OPEN() {
	    return this.getToken(GQLParser.OPEN, 0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	fieldTypesSpec() {
	    return this.getTypedRuleContext(FieldTypesSpecContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterRecordType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitRecordType(this);
		}
	}


}



class FieldTypesSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_fieldTypesSpec;
    }

	LEFT_BRACE() {
	    return this.getToken(GQLParser.LEFT_BRACE, 0);
	};

	RIGHT_BRACE() {
	    return this.getToken(GQLParser.RIGHT_BRACE, 0);
	};

	fieldTypeList() {
	    return this.getTypedRuleContext(FieldTypeListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterFieldTypesSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitFieldTypesSpec(this);
		}
	}


}



class FieldTypeListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_fieldTypeList;
    }

	fieldType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FieldTypeContext);
	    } else {
	        return this.getTypedRuleContext(FieldTypeContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.COMMA);
	    } else {
	        return this.getToken(GQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterFieldTypeList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitFieldTypeList(this);
		}
	}


}



class DynamicUnionTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_dynamicUnionType;
    }

	openDynamicUnionType() {
	    return this.getTypedRuleContext(OpenDynamicUnionTypeContext,0);
	};

	dynamicPropertyValueType() {
	    return this.getTypedRuleContext(DynamicPropertyValueTypeContext,0);
	};

	closedDynamicUnionType() {
	    return this.getTypedRuleContext(ClosedDynamicUnionTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterDynamicUnionType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitDynamicUnionType(this);
		}
	}


}



class OpenDynamicUnionTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_openDynamicUnionType;
    }

	ANY() {
	    return this.getToken(GQLParser.ANY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterOpenDynamicUnionType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitOpenDynamicUnionType(this);
		}
	}


}



class DynamicPropertyValueTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_dynamicPropertyValueType;
    }

	PROPERTY() {
	    return this.getToken(GQLParser.PROPERTY, 0);
	};

	VALUE() {
	    return this.getToken(GQLParser.VALUE, 0);
	};

	ANY() {
	    return this.getToken(GQLParser.ANY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterDynamicPropertyValueType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitDynamicPropertyValueType(this);
		}
	}


}



class ClosedDynamicUnionTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_closedDynamicUnionType;
    }

	ANY() {
	    return this.getToken(GQLParser.ANY, 0);
	};

	LEFT_ANGLE_BRACKET() {
	    return this.getToken(GQLParser.LEFT_ANGLE_BRACKET, 0);
	};

	componentTypeList() {
	    return this.getTypedRuleContext(ComponentTypeListContext,0);
	};

	RIGHT_ANGLE_BRACKET() {
	    return this.getToken(GQLParser.RIGHT_ANGLE_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterClosedDynamicUnionType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitClosedDynamicUnionType(this);
		}
	}


}



class ComponentTypeListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_componentTypeList;
    }

	componentType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ComponentTypeContext);
	    } else {
	        return this.getTypedRuleContext(ComponentTypeContext,i);
	    }
	};

	VERTICAL_BAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.VERTICAL_BAR);
	    } else {
	        return this.getToken(GQLParser.VERTICAL_BAR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterComponentTypeList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitComponentTypeList(this);
		}
	}


}



class ComponentTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_componentType;
    }

	valueType() {
	    return this.getTypedRuleContext(ValueTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterComponentType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitComponentType(this);
		}
	}


}



class PathValueTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_pathValueType;
    }

	PATH() {
	    return this.getToken(GQLParser.PATH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterPathValueType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitPathValueType(this);
		}
	}


}



class NotNullContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_notNull;
    }

	NOT() {
	    return this.getToken(GQLParser.NOT, 0);
	};

	NULL() {
	    return this.getToken(GQLParser.NULL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterNotNull(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitNotNull(this);
		}
	}


}



class FieldTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_fieldType;
    }

	fieldName() {
	    return this.getTypedRuleContext(FieldNameContext,0);
	};

	valueType() {
	    return this.getTypedRuleContext(ValueTypeContext,0);
	};

	typed() {
	    return this.getTypedRuleContext(TypedContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterFieldType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitFieldType(this);
		}
	}


}



class SchemaRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_schemaRef;
    }

	absoluteCatalogSchemaRef() {
	    return this.getTypedRuleContext(AbsoluteCatalogSchemaRefContext,0);
	};

	relativeCatalogSchemaRef() {
	    return this.getTypedRuleContext(RelativeCatalogSchemaRefContext,0);
	};

	refParameter() {
	    return this.getTypedRuleContext(RefParameterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSchemaRef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSchemaRef(this);
		}
	}


}



class AbsoluteCatalogSchemaRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_absoluteCatalogSchemaRef;
    }

	SOLIDUS() {
	    return this.getToken(GQLParser.SOLIDUS, 0);
	};

	absoluteDirectoryPath() {
	    return this.getTypedRuleContext(AbsoluteDirectoryPathContext,0);
	};

	schemaName() {
	    return this.getTypedRuleContext(SchemaNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterAbsoluteCatalogSchemaRef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitAbsoluteCatalogSchemaRef(this);
		}
	}


}



class CatalogSchemaParentAndNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_catalogSchemaParentAndName;
    }

	absoluteDirectoryPath() {
	    return this.getTypedRuleContext(AbsoluteDirectoryPathContext,0);
	};

	schemaName() {
	    return this.getTypedRuleContext(SchemaNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterCatalogSchemaParentAndName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitCatalogSchemaParentAndName(this);
		}
	}


}



class RelativeCatalogSchemaRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_relativeCatalogSchemaRef;
    }

	predefinedSchemaRef() {
	    return this.getTypedRuleContext(PredefinedSchemaRefContext,0);
	};

	relativeDirectoryPath() {
	    return this.getTypedRuleContext(RelativeDirectoryPathContext,0);
	};

	schemaName() {
	    return this.getTypedRuleContext(SchemaNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterRelativeCatalogSchemaRef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitRelativeCatalogSchemaRef(this);
		}
	}


}



class PredefinedSchemaRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_predefinedSchemaRef;
    }

	HOME_SCHEMA() {
	    return this.getToken(GQLParser.HOME_SCHEMA, 0);
	};

	CURRENT_SCHEMA() {
	    return this.getToken(GQLParser.CURRENT_SCHEMA, 0);
	};

	PERIOD() {
	    return this.getToken(GQLParser.PERIOD, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterPredefinedSchemaRef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitPredefinedSchemaRef(this);
		}
	}


}



class AbsoluteDirectoryPathContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_absoluteDirectoryPath;
    }

	SOLIDUS() {
	    return this.getToken(GQLParser.SOLIDUS, 0);
	};

	simpleDirectoryPath() {
	    return this.getTypedRuleContext(SimpleDirectoryPathContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterAbsoluteDirectoryPath(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitAbsoluteDirectoryPath(this);
		}
	}


}



class RelativeDirectoryPathContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_relativeDirectoryPath;
    }

	DOUBLE_PERIOD = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.DOUBLE_PERIOD);
	    } else {
	        return this.getToken(GQLParser.DOUBLE_PERIOD, i);
	    }
	};


	SOLIDUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.SOLIDUS);
	    } else {
	        return this.getToken(GQLParser.SOLIDUS, i);
	    }
	};


	simpleDirectoryPath() {
	    return this.getTypedRuleContext(SimpleDirectoryPathContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterRelativeDirectoryPath(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitRelativeDirectoryPath(this);
		}
	}


}



class SimpleDirectoryPathContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simpleDirectoryPath;
    }

	directoryName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DirectoryNameContext);
	    } else {
	        return this.getTypedRuleContext(DirectoryNameContext,i);
	    }
	};

	SOLIDUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.SOLIDUS);
	    } else {
	        return this.getToken(GQLParser.SOLIDUS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSimpleDirectoryPath(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSimpleDirectoryPath(this);
		}
	}


}



class GraphRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_graphRef;
    }

	catalogObjectParentRef() {
	    return this.getTypedRuleContext(CatalogObjectParentRefContext,0);
	};

	graphName() {
	    return this.getTypedRuleContext(GraphNameContext,0);
	};

	delimitedGraphName() {
	    return this.getTypedRuleContext(DelimitedGraphNameContext,0);
	};

	homeGraph() {
	    return this.getTypedRuleContext(HomeGraphContext,0);
	};

	refParameter() {
	    return this.getTypedRuleContext(RefParameterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGraphRef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGraphRef(this);
		}
	}


}



class CatalogGraphParentAndNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_catalogGraphParentAndName;
    }

	graphName() {
	    return this.getTypedRuleContext(GraphNameContext,0);
	};

	catalogObjectParentRef() {
	    return this.getTypedRuleContext(CatalogObjectParentRefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterCatalogGraphParentAndName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitCatalogGraphParentAndName(this);
		}
	}


}



class HomeGraphContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_homeGraph;
    }

	HOME_PROPERTY_GRAPH() {
	    return this.getToken(GQLParser.HOME_PROPERTY_GRAPH, 0);
	};

	HOME_GRAPH() {
	    return this.getToken(GQLParser.HOME_GRAPH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterHomeGraph(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitHomeGraph(this);
		}
	}


}



class GraphTypeRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_graphTypeRef;
    }

	catalogGraphTypeParentAndName() {
	    return this.getTypedRuleContext(CatalogGraphTypeParentAndNameContext,0);
	};

	refParameter() {
	    return this.getTypedRuleContext(RefParameterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGraphTypeRef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGraphTypeRef(this);
		}
	}


}



class CatalogGraphTypeParentAndNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_catalogGraphTypeParentAndName;
    }

	graphTypeName() {
	    return this.getTypedRuleContext(GraphTypeNameContext,0);
	};

	catalogObjectParentRef() {
	    return this.getTypedRuleContext(CatalogObjectParentRefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterCatalogGraphTypeParentAndName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitCatalogGraphTypeParentAndName(this);
		}
	}


}



class BindingTableRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_bindingTableRef;
    }

	catalogObjectParentRef() {
	    return this.getTypedRuleContext(CatalogObjectParentRefContext,0);
	};

	bindingTableName() {
	    return this.getTypedRuleContext(BindingTableNameContext,0);
	};

	delimitedBindingTableName() {
	    return this.getTypedRuleContext(DelimitedBindingTableNameContext,0);
	};

	refParameter() {
	    return this.getTypedRuleContext(RefParameterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterBindingTableRef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitBindingTableRef(this);
		}
	}


}



class CatalogBindingTableParentAndNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_catalogBindingTableParentAndName;
    }

	bindingTableName() {
	    return this.getTypedRuleContext(BindingTableNameContext,0);
	};

	catalogObjectParentRef() {
	    return this.getTypedRuleContext(CatalogObjectParentRefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterCatalogBindingTableParentAndName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitCatalogBindingTableParentAndName(this);
		}
	}


}



class ProcedureRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_procedureRef;
    }

	catalogProcedureParentAndName() {
	    return this.getTypedRuleContext(CatalogProcedureParentAndNameContext,0);
	};

	refParameter() {
	    return this.getTypedRuleContext(RefParameterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterProcedureRef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitProcedureRef(this);
		}
	}


}



class CatalogProcedureParentAndNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_catalogProcedureParentAndName;
    }

	procedureName() {
	    return this.getTypedRuleContext(ProcedureNameContext,0);
	};

	catalogObjectParentRef() {
	    return this.getTypedRuleContext(CatalogObjectParentRefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterCatalogProcedureParentAndName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitCatalogProcedureParentAndName(this);
		}
	}


}



class CatalogObjectParentRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_catalogObjectParentRef;
    }

	schemaRef() {
	    return this.getTypedRuleContext(SchemaRefContext,0);
	};

	SOLIDUS() {
	    return this.getToken(GQLParser.SOLIDUS, 0);
	};

	objectName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ObjectNameContext);
	    } else {
	        return this.getTypedRuleContext(ObjectNameContext,i);
	    }
	};

	PERIOD = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.PERIOD);
	    } else {
	        return this.getToken(GQLParser.PERIOD, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterCatalogObjectParentRef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitCatalogObjectParentRef(this);
		}
	}


}



class RefParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_refParameter;
    }

	parameter() {
	    return this.getTypedRuleContext(ParameterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterRefParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitRefParameter(this);
		}
	}


}



class ExternalObjectRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_externalObjectRef;
    }


	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterExternalObjectRef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitExternalObjectRef(this);
		}
	}


}



class SearchConditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_searchCondition;
    }

	booleanValueExpr() {
	    return this.getTypedRuleContext(BooleanValueExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSearchCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSearchCondition(this);
		}
	}


}



class PredicateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_predicate;
    }

	comparisonPredicate() {
	    return this.getTypedRuleContext(ComparisonPredicateContext,0);
	};

	existsPredicate() {
	    return this.getTypedRuleContext(ExistsPredicateContext,0);
	};

	nullPredicate() {
	    return this.getTypedRuleContext(NullPredicateContext,0);
	};

	valueTypePredicate() {
	    return this.getTypedRuleContext(ValueTypePredicateContext,0);
	};

	normalizedPredicate() {
	    return this.getTypedRuleContext(NormalizedPredicateContext,0);
	};

	directedPredicate() {
	    return this.getTypedRuleContext(DirectedPredicateContext,0);
	};

	labeledPredicate() {
	    return this.getTypedRuleContext(LabeledPredicateContext,0);
	};

	sourceOrDestinationPredicate() {
	    return this.getTypedRuleContext(SourceOrDestinationPredicateContext,0);
	};

	allDifferentPredicate() {
	    return this.getTypedRuleContext(AllDifferentPredicateContext,0);
	};

	samePredicate() {
	    return this.getTypedRuleContext(SamePredicateContext,0);
	};

	propertyExistsPredicate() {
	    return this.getTypedRuleContext(PropertyExistsPredicateContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterPredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitPredicate(this);
		}
	}


}



class ComparisonPredicateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_comparisonPredicate;
    }

	comparisonPredicand() {
	    return this.getTypedRuleContext(ComparisonPredicandContext,0);
	};

	comparisonPredicatePart2() {
	    return this.getTypedRuleContext(ComparisonPredicatePart2Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterComparisonPredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitComparisonPredicate(this);
		}
	}


}



class ComparisonPredicatePart2Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_comparisonPredicatePart2;
    }

	comparisonOperator() {
	    return this.getTypedRuleContext(ComparisonOperatorContext,0);
	};

	comparisonPredicand() {
	    return this.getTypedRuleContext(ComparisonPredicandContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterComparisonPredicatePart2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitComparisonPredicatePart2(this);
		}
	}


}



class ComparisonOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_comparisonOperator;
    }

	equals() {
	    return this.getTypedRuleContext(EqualsContext,0);
	};

	notEquals() {
	    return this.getTypedRuleContext(NotEqualsContext,0);
	};

	lessThen() {
	    return this.getTypedRuleContext(LessThenContext,0);
	};

	greaterThan() {
	    return this.getTypedRuleContext(GreaterThanContext,0);
	};

	lessThanOrEquals() {
	    return this.getTypedRuleContext(LessThanOrEqualsContext,0);
	};

	graterThanOrEquals() {
	    return this.getTypedRuleContext(GraterThanOrEqualsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterComparisonOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitComparisonOperator(this);
		}
	}


}



class EqualsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_equals;
    }

	EQUALS() {
	    return this.getToken(GQLParser.EQUALS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterEquals(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitEquals(this);
		}
	}


}



class NotEqualsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_notEquals;
    }

	LEFT_ANGLE_BRACKET() {
	    return this.getToken(GQLParser.LEFT_ANGLE_BRACKET, 0);
	};

	RIGHT_ANGLE_BRACKET() {
	    return this.getToken(GQLParser.RIGHT_ANGLE_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterNotEquals(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitNotEquals(this);
		}
	}


}



class LessThenContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_lessThen;
    }

	LEFT_ANGLE_BRACKET() {
	    return this.getToken(GQLParser.LEFT_ANGLE_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterLessThen(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitLessThen(this);
		}
	}


}



class GreaterThanContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_greaterThan;
    }

	RIGHT_ANGLE_BRACKET() {
	    return this.getToken(GQLParser.RIGHT_ANGLE_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGreaterThan(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGreaterThan(this);
		}
	}


}



class LessThanOrEqualsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_lessThanOrEquals;
    }

	LEFT_ANGLE_BRACKET() {
	    return this.getToken(GQLParser.LEFT_ANGLE_BRACKET, 0);
	};

	EQUALS() {
	    return this.getToken(GQLParser.EQUALS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterLessThanOrEquals(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitLessThanOrEquals(this);
		}
	}


}



class GraterThanOrEqualsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_graterThanOrEquals;
    }

	RIGHT_ANGLE_BRACKET() {
	    return this.getToken(GQLParser.RIGHT_ANGLE_BRACKET, 0);
	};

	EQUALS() {
	    return this.getToken(GQLParser.EQUALS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGraterThanOrEquals(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGraterThanOrEquals(this);
		}
	}


}



class ComparisonPredicandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_comparisonPredicand;
    }

	commonValueExpr() {
	    return this.getTypedRuleContext(CommonValueExprContext,0);
	};

	booleanPredicand() {
	    return this.getTypedRuleContext(BooleanPredicandContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterComparisonPredicand(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitComparisonPredicand(this);
		}
	}


}



class ExistsPredicateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_existsPredicate;
    }

	EXISTS() {
	    return this.getToken(GQLParser.EXISTS, 0);
	};

	LEFT_BRACE() {
	    return this.getToken(GQLParser.LEFT_BRACE, 0);
	};

	graphPattern() {
	    return this.getTypedRuleContext(GraphPatternContext,0);
	};

	RIGHT_BRACE() {
	    return this.getToken(GQLParser.RIGHT_BRACE, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	matchStatmentBlock() {
	    return this.getTypedRuleContext(MatchStatmentBlockContext,0);
	};

	nestedQuerySpec() {
	    return this.getTypedRuleContext(NestedQuerySpecContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterExistsPredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitExistsPredicate(this);
		}
	}


}



class NullPredicateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_nullPredicate;
    }

	valueExprPrimary() {
	    return this.getTypedRuleContext(ValueExprPrimaryContext,0);
	};

	nullPredicatePart2() {
	    return this.getTypedRuleContext(NullPredicatePart2Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterNullPredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitNullPredicate(this);
		}
	}


}



class NullPredicatePart2Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_nullPredicatePart2;
    }

	IS() {
	    return this.getToken(GQLParser.IS, 0);
	};

	NULL() {
	    return this.getToken(GQLParser.NULL, 0);
	};

	NOT() {
	    return this.getToken(GQLParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterNullPredicatePart2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitNullPredicatePart2(this);
		}
	}


}



class ValueTypePredicateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_valueTypePredicate;
    }

	valueExprPrimary() {
	    return this.getTypedRuleContext(ValueExprPrimaryContext,0);
	};

	valueTypePredicatePart2() {
	    return this.getTypedRuleContext(ValueTypePredicatePart2Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterValueTypePredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitValueTypePredicate(this);
		}
	}


}



class ValueTypePredicatePart2Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_valueTypePredicatePart2;
    }

	IS() {
	    return this.getToken(GQLParser.IS, 0);
	};

	typed() {
	    return this.getTypedRuleContext(TypedContext,0);
	};

	valueType() {
	    return this.getTypedRuleContext(ValueTypeContext,0);
	};

	NOT() {
	    return this.getToken(GQLParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterValueTypePredicatePart2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitValueTypePredicatePart2(this);
		}
	}


}



class NormalizedPredicateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_normalizedPredicate;
    }

	stringValueExpr() {
	    return this.getTypedRuleContext(StringValueExprContext,0);
	};

	normalizedPredicatePart2() {
	    return this.getTypedRuleContext(NormalizedPredicatePart2Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterNormalizedPredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitNormalizedPredicate(this);
		}
	}


}



class NormalizedPredicatePart2Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_normalizedPredicatePart2;
    }

	IS() {
	    return this.getToken(GQLParser.IS, 0);
	};

	NORMALIZED() {
	    return this.getToken(GQLParser.NORMALIZED, 0);
	};

	NOT() {
	    return this.getToken(GQLParser.NOT, 0);
	};

	normalForm() {
	    return this.getTypedRuleContext(NormalFormContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterNormalizedPredicatePart2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitNormalizedPredicatePart2(this);
		}
	}


}



class DirectedPredicateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_directedPredicate;
    }

	elementVarRef() {
	    return this.getTypedRuleContext(ElementVarRefContext,0);
	};

	directedPredicate() {
	    return this.getTypedRuleContext(DirectedPredicateContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterDirectedPredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitDirectedPredicate(this);
		}
	}


}



class DirectedPredicatePart2Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_directedPredicatePart2;
    }

	IS() {
	    return this.getToken(GQLParser.IS, 0);
	};

	DIRECTED() {
	    return this.getToken(GQLParser.DIRECTED, 0);
	};

	NOT() {
	    return this.getToken(GQLParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterDirectedPredicatePart2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitDirectedPredicatePart2(this);
		}
	}


}



class LabeledPredicateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_labeledPredicate;
    }

	elementVarRef() {
	    return this.getTypedRuleContext(ElementVarRefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterLabeledPredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitLabeledPredicate(this);
		}
	}


}



class LabeledPredicatePart2Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_labeledPredicatePart2;
    }

	isLabeledOrColon() {
	    return this.getTypedRuleContext(IsLabeledOrColonContext,0);
	};

	labelExpr() {
	    return this.getTypedRuleContext(LabelExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterLabeledPredicatePart2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitLabeledPredicatePart2(this);
		}
	}


}



class IsLabeledOrColonContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_isLabeledOrColon;
    }

	IS() {
	    return this.getToken(GQLParser.IS, 0);
	};

	LABELED() {
	    return this.getToken(GQLParser.LABELED, 0);
	};

	NOT() {
	    return this.getToken(GQLParser.NOT, 0);
	};

	COLON() {
	    return this.getToken(GQLParser.COLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterIsLabeledOrColon(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitIsLabeledOrColon(this);
		}
	}


}



class SourceOrDestinationPredicateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_sourceOrDestinationPredicate;
    }

	nodeRef() {
	    return this.getTypedRuleContext(NodeRefContext,0);
	};

	sourcePredicatePart2() {
	    return this.getTypedRuleContext(SourcePredicatePart2Context,0);
	};

	destinationPredicatePart2() {
	    return this.getTypedRuleContext(DestinationPredicatePart2Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSourceOrDestinationPredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSourceOrDestinationPredicate(this);
		}
	}


}



class NodeRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_nodeRef;
    }

	elementVarRef() {
	    return this.getTypedRuleContext(ElementVarRefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterNodeRef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitNodeRef(this);
		}
	}


}



class SourcePredicatePart2Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_sourcePredicatePart2;
    }

	IS() {
	    return this.getToken(GQLParser.IS, 0);
	};

	SOURCE() {
	    return this.getToken(GQLParser.SOURCE, 0);
	};

	OF() {
	    return this.getToken(GQLParser.OF, 0);
	};

	edgeRef() {
	    return this.getTypedRuleContext(EdgeRefContext,0);
	};

	NOT() {
	    return this.getToken(GQLParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSourcePredicatePart2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSourcePredicatePart2(this);
		}
	}


}



class DestinationPredicatePart2Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_destinationPredicatePart2;
    }

	IS() {
	    return this.getToken(GQLParser.IS, 0);
	};

	DESTINATION() {
	    return this.getToken(GQLParser.DESTINATION, 0);
	};

	OF() {
	    return this.getToken(GQLParser.OF, 0);
	};

	edgeRef() {
	    return this.getTypedRuleContext(EdgeRefContext,0);
	};

	NOT() {
	    return this.getToken(GQLParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterDestinationPredicatePart2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitDestinationPredicatePart2(this);
		}
	}


}



class EdgeRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_edgeRef;
    }

	elementVarRef() {
	    return this.getTypedRuleContext(ElementVarRefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterEdgeRef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitEdgeRef(this);
		}
	}


}



class AllDifferentPredicateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_allDifferentPredicate;
    }

	ALL_DIFFERENT() {
	    return this.getToken(GQLParser.ALL_DIFFERENT, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	elementVarRef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ElementVarRefContext);
	    } else {
	        return this.getTypedRuleContext(ElementVarRefContext,i);
	    }
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.COMMA);
	    } else {
	        return this.getToken(GQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterAllDifferentPredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitAllDifferentPredicate(this);
		}
	}


}



class SamePredicateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_samePredicate;
    }

	SAME() {
	    return this.getToken(GQLParser.SAME, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	elementVarRef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ElementVarRefContext);
	    } else {
	        return this.getTypedRuleContext(ElementVarRefContext,i);
	    }
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.COMMA);
	    } else {
	        return this.getToken(GQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSamePredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSamePredicate(this);
		}
	}


}



class PropertyExistsPredicateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_propertyExistsPredicate;
    }

	PROPERTY_EXISTS() {
	    return this.getToken(GQLParser.PROPERTY_EXISTS, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	elementVarRef() {
	    return this.getTypedRuleContext(ElementVarRefContext,0);
	};

	COMMA() {
	    return this.getToken(GQLParser.COMMA, 0);
	};

	propertyName() {
	    return this.getTypedRuleContext(PropertyNameContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterPropertyExistsPredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitPropertyExistsPredicate(this);
		}
	}


}



class ValueSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_valueSpec;
    }

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	parameterValueSpec() {
	    return this.getTypedRuleContext(ParameterValueSpecContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterValueSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitValueSpec(this);
		}
	}


}



class UnsignedValueSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_unsignedValueSpec;
    }

	unsignedLiteral() {
	    return this.getTypedRuleContext(UnsignedLiteralContext,0);
	};

	parameterValueSpec() {
	    return this.getTypedRuleContext(ParameterValueSpecContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterUnsignedValueSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitUnsignedValueSpec(this);
		}
	}


}



class UnsignedIntSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_unsignedIntSpec;
    }

	UNSIGNED_INT() {
	    return this.getToken(GQLParser.UNSIGNED_INT, 0);
	};

	parameter() {
	    return this.getTypedRuleContext(ParameterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterUnsignedIntSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitUnsignedIntSpec(this);
		}
	}


}



class ParameterValueSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_parameterValueSpec;
    }

	parameter() {
	    return this.getTypedRuleContext(ParameterContext,0);
	};

	predefinedParameter() {
	    return this.getTypedRuleContext(PredefinedParameterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterParameterValueSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitParameterValueSpec(this);
		}
	}


}



class PredefinedParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_predefinedParameter;
    }

	CURRENT_USER() {
	    return this.getToken(GQLParser.CURRENT_USER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterPredefinedParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitPredefinedParameter(this);
		}
	}


}



class ValueExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_valueExpr;
    }

	commonValueExpr() {
	    return this.getTypedRuleContext(CommonValueExprContext,0);
	};

	booleanValueExpr() {
	    return this.getTypedRuleContext(BooleanValueExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterValueExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitValueExpr(this);
		}
	}


}



class CommonValueExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_commonValueExpr;
    }

	numericValueExpr() {
	    return this.getTypedRuleContext(NumericValueExprContext,0);
	};

	stringValueExpr() {
	    return this.getTypedRuleContext(StringValueExprContext,0);
	};

	dateTimeValueExpr() {
	    return this.getTypedRuleContext(DateTimeValueExprContext,0);
	};

	durationValueExpr() {
	    return this.getTypedRuleContext(DurationValueExprContext,0);
	};

	listValueExpr() {
	    return this.getTypedRuleContext(ListValueExprContext,0);
	};

	recordValueExpr() {
	    return this.getTypedRuleContext(RecordValueExprContext,0);
	};

	pathValueExpr() {
	    return this.getTypedRuleContext(PathValueExprContext,0);
	};

	refValueExpr() {
	    return this.getTypedRuleContext(RefValueExprContext,0);
	};

	commonValuePropertiesGroup() {
	    return this.getTypedRuleContext(CommonValuePropertiesGroupContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterCommonValueExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitCommonValueExpr(this);
		}
	}


}



class CommonValuePropertiesGroupContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_commonValuePropertiesGroup;
    }

	propertyName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PropertyNameContext);
	    } else {
	        return this.getTypedRuleContext(PropertyNameContext,i);
	    }
	};

	PERIOD = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.PERIOD);
	    } else {
	        return this.getToken(GQLParser.PERIOD, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterCommonValuePropertiesGroup(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitCommonValuePropertiesGroup(this);
		}
	}


}



class RefValueExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_refValueExpr;
    }

	graphRefValueExpr() {
	    return this.getTypedRuleContext(GraphRefValueExprContext,0);
	};

	bindingTableRefValueExpr() {
	    return this.getTypedRuleContext(BindingTableRefValueExprContext,0);
	};

	nodeRefValueExpr() {
	    return this.getTypedRuleContext(NodeRefValueExprContext,0);
	};

	edgeRefValueExpr() {
	    return this.getTypedRuleContext(EdgeRefValueExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterRefValueExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitRefValueExpr(this);
		}
	}


}



class GraphRefValueExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_graphRefValueExpr;
    }

	GRAPH() {
	    return this.getToken(GQLParser.GRAPH, 0);
	};

	graphExpr() {
	    return this.getTypedRuleContext(GraphExprContext,0);
	};

	PROPERTY() {
	    return this.getToken(GQLParser.PROPERTY, 0);
	};

	valueExprPrimary() {
	    return this.getTypedRuleContext(ValueExprPrimaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGraphRefValueExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGraphRefValueExpr(this);
		}
	}


}



class BindingTableRefValueExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_bindingTableRefValueExpr;
    }

	TABLE() {
	    return this.getToken(GQLParser.TABLE, 0);
	};

	bindingTableExpr() {
	    return this.getTypedRuleContext(BindingTableExprContext,0);
	};

	BINDING() {
	    return this.getToken(GQLParser.BINDING, 0);
	};

	valueExprPrimary() {
	    return this.getTypedRuleContext(ValueExprPrimaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterBindingTableRefValueExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitBindingTableRefValueExpr(this);
		}
	}


}



class NodeRefValueExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_nodeRefValueExpr;
    }

	valueExprPrimary() {
	    return this.getTypedRuleContext(ValueExprPrimaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterNodeRefValueExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitNodeRefValueExpr(this);
		}
	}


}



class EdgeRefValueExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_edgeRefValueExpr;
    }

	valueExprPrimary() {
	    return this.getTypedRuleContext(ValueExprPrimaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterEdgeRefValueExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitEdgeRefValueExpr(this);
		}
	}


}



class RecordValueExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_recordValueExpr;
    }

	valueExprPrimary() {
	    return this.getTypedRuleContext(ValueExprPrimaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterRecordValueExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitRecordValueExpr(this);
		}
	}


}



class AggregatingValueExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_aggregatingValueExpr;
    }

	valueExpr() {
	    return this.getTypedRuleContext(ValueExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterAggregatingValueExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitAggregatingValueExpr(this);
		}
	}


}



class BooleanValueExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_booleanValueExpr;
    }

	booleanTerm() {
	    return this.getTypedRuleContext(BooleanTermContext,0);
	};

	OR() {
	    return this.getToken(GQLParser.OR, 0);
	};

	booleanValueExpr() {
	    return this.getTypedRuleContext(BooleanValueExprContext,0);
	};

	XOR() {
	    return this.getToken(GQLParser.XOR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterBooleanValueExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitBooleanValueExpr(this);
		}
	}


}



class BooleanTermContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_booleanTerm;
    }

	booleanFactor() {
	    return this.getTypedRuleContext(BooleanFactorContext,0);
	};

	booleanTerm() {
	    return this.getTypedRuleContext(BooleanTermContext,0);
	};

	AND() {
	    return this.getToken(GQLParser.AND, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterBooleanTerm(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitBooleanTerm(this);
		}
	}


}



class BooleanFactorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_booleanFactor;
    }

	booleanTest() {
	    return this.getTypedRuleContext(BooleanTestContext,0);
	};

	NOT() {
	    return this.getToken(GQLParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterBooleanFactor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitBooleanFactor(this);
		}
	}


}



class BooleanTestContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_booleanTest;
    }

	booleanPrimary() {
	    return this.getTypedRuleContext(BooleanPrimaryContext,0);
	};

	IS() {
	    return this.getToken(GQLParser.IS, 0);
	};

	truthValue() {
	    return this.getTypedRuleContext(TruthValueContext,0);
	};

	NOT() {
	    return this.getToken(GQLParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterBooleanTest(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitBooleanTest(this);
		}
	}


}



class TruthValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_truthValue;
    }

	TRUE() {
	    return this.getToken(GQLParser.TRUE, 0);
	};

	FALSE() {
	    return this.getToken(GQLParser.FALSE, 0);
	};

	UNKNOWN() {
	    return this.getToken(GQLParser.UNKNOWN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterTruthValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitTruthValue(this);
		}
	}


}



class BooleanPrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_booleanPrimary;
    }

	predicate() {
	    return this.getTypedRuleContext(PredicateContext,0);
	};

	booleanPredicand() {
	    return this.getTypedRuleContext(BooleanPredicandContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterBooleanPrimary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitBooleanPrimary(this);
		}
	}


}



class BooleanPredicandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_booleanPredicand;
    }

	paranthisedBooleanValueExpr() {
	    return this.getTypedRuleContext(ParanthisedBooleanValueExprContext,0);
	};

	nonParenthesizedValueExprPrimary() {
	    return this.getTypedRuleContext(NonParenthesizedValueExprPrimaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterBooleanPredicand(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitBooleanPredicand(this);
		}
	}


}



class ParanthisedBooleanValueExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_paranthisedBooleanValueExpr;
    }

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	booleanValueExpr() {
	    return this.getTypedRuleContext(BooleanValueExprContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterParanthisedBooleanValueExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitParanthisedBooleanValueExpr(this);
		}
	}


}



class NumericValueExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_numericValueExpr;
    }

	term() {
	    return this.getTypedRuleContext(TermContext,0);
	};

	PLUS() {
	    return this.getToken(GQLParser.PLUS, 0);
	};

	numericValueExpr() {
	    return this.getTypedRuleContext(NumericValueExprContext,0);
	};

	MINUS() {
	    return this.getToken(GQLParser.MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterNumericValueExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitNumericValueExpr(this);
		}
	}


}



class TermContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_term;
    }

	factor() {
	    return this.getTypedRuleContext(FactorContext,0);
	};

	ASTERISK() {
	    return this.getToken(GQLParser.ASTERISK, 0);
	};

	term() {
	    return this.getTypedRuleContext(TermContext,0);
	};

	SOLIDUS() {
	    return this.getToken(GQLParser.SOLIDUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterTerm(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitTerm(this);
		}
	}


}



class FactorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_factor;
    }

	numericPrimary() {
	    return this.getTypedRuleContext(NumericPrimaryContext,0);
	};

	SIGN() {
	    return this.getToken(GQLParser.SIGN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterFactor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitFactor(this);
		}
	}


}



class NumericPrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_numericPrimary;
    }

	valueExprPrimary() {
	    return this.getTypedRuleContext(ValueExprPrimaryContext,0);
	};

	numericValueFunction() {
	    return this.getTypedRuleContext(NumericValueFunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterNumericPrimary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitNumericPrimary(this);
		}
	}


}



class ValueExprPrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_valueExprPrimary;
    }

	parenthesizedValueExpr() {
	    return this.getTypedRuleContext(ParenthesizedValueExprContext,0);
	};

	nonParenthesizedValueExprPrimary() {
	    return this.getTypedRuleContext(NonParenthesizedValueExprPrimaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterValueExprPrimary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitValueExprPrimary(this);
		}
	}


}



class ParenthesizedValueExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_parenthesizedValueExpr;
    }

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	valueExpr() {
	    return this.getTypedRuleContext(ValueExprContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterParenthesizedValueExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitParenthesizedValueExpr(this);
		}
	}


}



class NonParenthesizedValueExprPrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_nonParenthesizedValueExprPrimary;
    }

	nonParenthesizedValueExprPrimarySpecialCase() {
	    return this.getTypedRuleContext(NonParenthesizedValueExprPrimarySpecialCaseContext,0);
	};

	bindingVarRef() {
	    return this.getTypedRuleContext(BindingVarRefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterNonParenthesizedValueExprPrimary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitNonParenthesizedValueExprPrimary(this);
		}
	}


}



class NonParenthesizedValueExprPrimarySpecialCaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_nonParenthesizedValueExprPrimarySpecialCase;
    }

	unsignedValueSpec() {
	    return this.getTypedRuleContext(UnsignedValueSpecContext,0);
	};

	aggregateFunction() {
	    return this.getTypedRuleContext(AggregateFunctionContext,0);
	};

	collectionValueConstructor() {
	    return this.getTypedRuleContext(CollectionValueConstructorContext,0);
	};

	valueQueryExpr() {
	    return this.getTypedRuleContext(ValueQueryExprContext,0);
	};

	caseExpr() {
	    return this.getTypedRuleContext(CaseExprContext,0);
	};

	letValueExpr() {
	    return this.getTypedRuleContext(LetValueExprContext,0);
	};

	castSpec() {
	    return this.getTypedRuleContext(CastSpecContext,0);
	};

	elementIdFunction() {
	    return this.getTypedRuleContext(ElementIdFunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterNonParenthesizedValueExprPrimarySpecialCase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitNonParenthesizedValueExprPrimarySpecialCase(this);
		}
	}


}



class CollectionValueConstructorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_collectionValueConstructor;
    }

	listValueConstructor() {
	    return this.getTypedRuleContext(ListValueConstructorContext,0);
	};

	recordValueConstructor() {
	    return this.getTypedRuleContext(RecordValueConstructorContext,0);
	};

	pathValueConstructor() {
	    return this.getTypedRuleContext(PathValueConstructorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterCollectionValueConstructor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitCollectionValueConstructor(this);
		}
	}


}



class NumericValueFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_numericValueFunction;
    }

	lengthExpr() {
	    return this.getTypedRuleContext(LengthExprContext,0);
	};

	absoluteValueExpr() {
	    return this.getTypedRuleContext(AbsoluteValueExprContext,0);
	};

	modulusExpr() {
	    return this.getTypedRuleContext(ModulusExprContext,0);
	};

	trigonometricFunction() {
	    return this.getTypedRuleContext(TrigonometricFunctionContext,0);
	};

	logarithmFunction() {
	    return this.getTypedRuleContext(LogarithmFunctionContext,0);
	};

	exponentialFunction() {
	    return this.getTypedRuleContext(ExponentialFunctionContext,0);
	};

	powerFunction() {
	    return this.getTypedRuleContext(PowerFunctionContext,0);
	};

	squareRootFunciton() {
	    return this.getTypedRuleContext(SquareRootFuncitonContext,0);
	};

	floorFunction() {
	    return this.getTypedRuleContext(FloorFunctionContext,0);
	};

	ceilingFunction() {
	    return this.getTypedRuleContext(CeilingFunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterNumericValueFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitNumericValueFunction(this);
		}
	}


}



class LengthExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_lengthExpr;
    }

	charLengthExpr() {
	    return this.getTypedRuleContext(CharLengthExprContext,0);
	};

	byteLengthExpr() {
	    return this.getTypedRuleContext(ByteLengthExprContext,0);
	};

	pathLengthExpr() {
	    return this.getTypedRuleContext(PathLengthExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterLengthExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitLengthExpr(this);
		}
	}


}



class CharLengthExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_charLengthExpr;
    }

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	charStringValueExpr() {
	    return this.getTypedRuleContext(CharStringValueExprContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	CHAR_LENGTH() {
	    return this.getToken(GQLParser.CHAR_LENGTH, 0);
	};

	CHARACTER_LENGTH() {
	    return this.getToken(GQLParser.CHARACTER_LENGTH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterCharLengthExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitCharLengthExpr(this);
		}
	}


}



class ByteLengthExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_byteLengthExpr;
    }

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	byteStringValueExpr() {
	    return this.getTypedRuleContext(ByteStringValueExprContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	BYTE_LENGTH() {
	    return this.getToken(GQLParser.BYTE_LENGTH, 0);
	};

	OCTET_LENGTH() {
	    return this.getToken(GQLParser.OCTET_LENGTH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterByteLengthExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitByteLengthExpr(this);
		}
	}


}



class PathLengthExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_pathLengthExpr;
    }

	PATH_LENGTH() {
	    return this.getToken(GQLParser.PATH_LENGTH, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	pathValueExpr() {
	    return this.getTypedRuleContext(PathValueExprContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterPathLengthExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitPathLengthExpr(this);
		}
	}


}



class AbsoluteValueExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_absoluteValueExpr;
    }

	ABS() {
	    return this.getToken(GQLParser.ABS, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	numericValueExpr() {
	    return this.getTypedRuleContext(NumericValueExprContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterAbsoluteValueExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitAbsoluteValueExpr(this);
		}
	}


}



class ModulusExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_modulusExpr;
    }

	MOD() {
	    return this.getToken(GQLParser.MOD, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	numericValueExprDividen() {
	    return this.getTypedRuleContext(NumericValueExprDividenContext,0);
	};

	COMMA() {
	    return this.getToken(GQLParser.COMMA, 0);
	};

	numericValueExprDivisor() {
	    return this.getTypedRuleContext(NumericValueExprDivisorContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterModulusExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitModulusExpr(this);
		}
	}


}



class NumericValueExprDividenContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_numericValueExprDividen;
    }

	numericValueExpr() {
	    return this.getTypedRuleContext(NumericValueExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterNumericValueExprDividen(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitNumericValueExprDividen(this);
		}
	}


}



class NumericValueExprDivisorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_numericValueExprDivisor;
    }

	numericValueExpr() {
	    return this.getTypedRuleContext(NumericValueExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterNumericValueExprDivisor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitNumericValueExprDivisor(this);
		}
	}


}



class TrigonometricFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_trigonometricFunction;
    }

	trigonometricFunctionName() {
	    return this.getTypedRuleContext(TrigonometricFunctionNameContext,0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	numericValueExpr() {
	    return this.getTypedRuleContext(NumericValueExprContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterTrigonometricFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitTrigonometricFunction(this);
		}
	}


}



class TrigonometricFunctionNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_trigonometricFunctionName;
    }

	SIN() {
	    return this.getToken(GQLParser.SIN, 0);
	};

	COS() {
	    return this.getToken(GQLParser.COS, 0);
	};

	TAN() {
	    return this.getToken(GQLParser.TAN, 0);
	};

	COT() {
	    return this.getToken(GQLParser.COT, 0);
	};

	SINH() {
	    return this.getToken(GQLParser.SINH, 0);
	};

	COSH() {
	    return this.getToken(GQLParser.COSH, 0);
	};

	TANH() {
	    return this.getToken(GQLParser.TANH, 0);
	};

	ASIN() {
	    return this.getToken(GQLParser.ASIN, 0);
	};

	ACOS() {
	    return this.getToken(GQLParser.ACOS, 0);
	};

	ATAN() {
	    return this.getToken(GQLParser.ATAN, 0);
	};

	DEGREES() {
	    return this.getToken(GQLParser.DEGREES, 0);
	};

	RADIANS() {
	    return this.getToken(GQLParser.RADIANS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterTrigonometricFunctionName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitTrigonometricFunctionName(this);
		}
	}


}



class LogarithmFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_logarithmFunction;
    }

	generalLogarithmFunction() {
	    return this.getTypedRuleContext(GeneralLogarithmFunctionContext,0);
	};

	commonLogarithmFunction() {
	    return this.getTypedRuleContext(CommonLogarithmFunctionContext,0);
	};

	naturalLogarithmFunction() {
	    return this.getTypedRuleContext(NaturalLogarithmFunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterLogarithmFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitLogarithmFunction(this);
		}
	}


}



class GeneralLogarithmFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_generalLogarithmFunction;
    }

	MOD() {
	    return this.getToken(GQLParser.MOD, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	generalLogarithmBase() {
	    return this.getTypedRuleContext(GeneralLogarithmBaseContext,0);
	};

	COMMA() {
	    return this.getToken(GQLParser.COMMA, 0);
	};

	generalLogarithmArgument() {
	    return this.getTypedRuleContext(GeneralLogarithmArgumentContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGeneralLogarithmFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGeneralLogarithmFunction(this);
		}
	}


}



class GeneralLogarithmBaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_generalLogarithmBase;
    }

	numericValueExpr() {
	    return this.getTypedRuleContext(NumericValueExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGeneralLogarithmBase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGeneralLogarithmBase(this);
		}
	}


}



class GeneralLogarithmArgumentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_generalLogarithmArgument;
    }

	numericValueExpr() {
	    return this.getTypedRuleContext(NumericValueExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGeneralLogarithmArgument(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGeneralLogarithmArgument(this);
		}
	}


}



class CommonLogarithmFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_commonLogarithmFunction;
    }

	LOG10() {
	    return this.getToken(GQLParser.LOG10, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	numericValueExpr() {
	    return this.getTypedRuleContext(NumericValueExprContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterCommonLogarithmFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitCommonLogarithmFunction(this);
		}
	}


}



class NaturalLogarithmFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_naturalLogarithmFunction;
    }

	LN() {
	    return this.getToken(GQLParser.LN, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	numericValueExpr() {
	    return this.getTypedRuleContext(NumericValueExprContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterNaturalLogarithmFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitNaturalLogarithmFunction(this);
		}
	}


}



class ExponentialFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_exponentialFunction;
    }

	EXP() {
	    return this.getToken(GQLParser.EXP, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	numericValueExpr() {
	    return this.getTypedRuleContext(NumericValueExprContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterExponentialFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitExponentialFunction(this);
		}
	}


}



class PowerFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_powerFunction;
    }

	POWER() {
	    return this.getToken(GQLParser.POWER, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	numericValueExprBase() {
	    return this.getTypedRuleContext(NumericValueExprBaseContext,0);
	};

	COMMA() {
	    return this.getToken(GQLParser.COMMA, 0);
	};

	numericValueExprExponent() {
	    return this.getTypedRuleContext(NumericValueExprExponentContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterPowerFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitPowerFunction(this);
		}
	}


}



class NumericValueExprBaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_numericValueExprBase;
    }

	numericValueExpr() {
	    return this.getTypedRuleContext(NumericValueExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterNumericValueExprBase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitNumericValueExprBase(this);
		}
	}


}



class NumericValueExprExponentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_numericValueExprExponent;
    }

	numericValueExpr() {
	    return this.getTypedRuleContext(NumericValueExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterNumericValueExprExponent(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitNumericValueExprExponent(this);
		}
	}


}



class SquareRootFuncitonContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_squareRootFunciton;
    }

	SQRT() {
	    return this.getToken(GQLParser.SQRT, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	numericValueExpr() {
	    return this.getTypedRuleContext(NumericValueExprContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSquareRootFunciton(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSquareRootFunciton(this);
		}
	}


}



class FloorFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_floorFunction;
    }

	FLOOR() {
	    return this.getToken(GQLParser.FLOOR, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	numericValueExpr() {
	    return this.getTypedRuleContext(NumericValueExprContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterFloorFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitFloorFunction(this);
		}
	}


}



class CeilingFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_ceilingFunction;
    }

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	numericValueExpr() {
	    return this.getTypedRuleContext(NumericValueExprContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	CEIL() {
	    return this.getToken(GQLParser.CEIL, 0);
	};

	CEILING() {
	    return this.getToken(GQLParser.CEILING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterCeilingFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitCeilingFunction(this);
		}
	}


}



class StringValueExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_stringValueExpr;
    }

	charStringValueExpr() {
	    return this.getTypedRuleContext(CharStringValueExprContext,0);
	};

	byteStringValueExpr() {
	    return this.getTypedRuleContext(ByteStringValueExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterStringValueExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitStringValueExpr(this);
		}
	}


}



class CharStringValueExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_charStringValueExpr;
    }

	charStringConcatenation() {
	    return this.getTypedRuleContext(CharStringConcatenationContext,0);
	};

	charStringFactor() {
	    return this.getTypedRuleContext(CharStringFactorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterCharStringValueExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitCharStringValueExpr(this);
		}
	}


}



class CharStringConcatenationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_charStringConcatenation;
    }

	charStringFactor() {
	    return this.getTypedRuleContext(CharStringFactorContext,0);
	};

	CONCATENATION() {
	    return this.getToken(GQLParser.CONCATENATION, 0);
	};

	charStringValueExpr() {
	    return this.getTypedRuleContext(CharStringValueExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterCharStringConcatenation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitCharStringConcatenation(this);
		}
	}


}



class CharStringFactorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_charStringFactor;
    }

	charStringPrimary() {
	    return this.getTypedRuleContext(CharStringPrimaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterCharStringFactor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitCharStringFactor(this);
		}
	}


}



class CharStringPrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_charStringPrimary;
    }

	valueExprPrimary() {
	    return this.getTypedRuleContext(ValueExprPrimaryContext,0);
	};

	stringValueFunction() {
	    return this.getTypedRuleContext(StringValueFunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterCharStringPrimary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitCharStringPrimary(this);
		}
	}


}



class ByteStringValueExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_byteStringValueExpr;
    }

	byteStringConcatenation() {
	    return this.getTypedRuleContext(ByteStringConcatenationContext,0);
	};

	byteStringFactor() {
	    return this.getTypedRuleContext(ByteStringFactorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterByteStringValueExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitByteStringValueExpr(this);
		}
	}


}



class ByteStringFactorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_byteStringFactor;
    }

	byteStringPrimary() {
	    return this.getTypedRuleContext(ByteStringPrimaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterByteStringFactor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitByteStringFactor(this);
		}
	}


}



class ByteStringPrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_byteStringPrimary;
    }

	valueExprPrimary() {
	    return this.getTypedRuleContext(ValueExprPrimaryContext,0);
	};

	stringValueFunction() {
	    return this.getTypedRuleContext(StringValueFunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterByteStringPrimary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitByteStringPrimary(this);
		}
	}


}



class ByteStringConcatenationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_byteStringConcatenation;
    }

	byteStringFactor() {
	    return this.getTypedRuleContext(ByteStringFactorContext,0);
	};

	CONCATENATION() {
	    return this.getToken(GQLParser.CONCATENATION, 0);
	};

	byteStringValueExpr() {
	    return this.getTypedRuleContext(ByteStringValueExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterByteStringConcatenation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitByteStringConcatenation(this);
		}
	}


}



class StringValueFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_stringValueFunction;
    }

	charStringFunction() {
	    return this.getTypedRuleContext(CharStringFunctionContext,0);
	};

	byteStringFunction() {
	    return this.getTypedRuleContext(ByteStringFunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterStringValueFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitStringValueFunction(this);
		}
	}


}



class CharStringFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_charStringFunction;
    }

	foldFunction() {
	    return this.getTypedRuleContext(FoldFunctionContext,0);
	};

	trimFunction() {
	    return this.getTypedRuleContext(TrimFunctionContext,0);
	};

	normalizeFunction() {
	    return this.getTypedRuleContext(NormalizeFunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterCharStringFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitCharStringFunction(this);
		}
	}


}



class FoldFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_foldFunction;
    }

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	charStringValueExpr() {
	    return this.getTypedRuleContext(CharStringValueExprContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	UPPER() {
	    return this.getToken(GQLParser.UPPER, 0);
	};

	LOWER() {
	    return this.getToken(GQLParser.LOWER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterFoldFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitFoldFunction(this);
		}
	}


}



class TrimFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_trimFunction;
    }

	singleCharTrimFunction() {
	    return this.getTypedRuleContext(SingleCharTrimFunctionContext,0);
	};

	multiCharTrimFunction() {
	    return this.getTypedRuleContext(MultiCharTrimFunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterTrimFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitTrimFunction(this);
		}
	}


}



class SingleCharTrimFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_singleCharTrimFunction;
    }

	TRIM() {
	    return this.getToken(GQLParser.TRIM, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	trimOperands() {
	    return this.getTypedRuleContext(TrimOperandsContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSingleCharTrimFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSingleCharTrimFunction(this);
		}
	}


}



class MultiCharTrimFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_multiCharTrimFunction;
    }

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	trimSource() {
	    return this.getTypedRuleContext(TrimSourceContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	BTRIM() {
	    return this.getToken(GQLParser.BTRIM, 0);
	};

	LTRIM() {
	    return this.getToken(GQLParser.LTRIM, 0);
	};

	RTRIM() {
	    return this.getToken(GQLParser.RTRIM, 0);
	};

	COMMA() {
	    return this.getToken(GQLParser.COMMA, 0);
	};

	trimCharString() {
	    return this.getTypedRuleContext(TrimCharStringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterMultiCharTrimFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitMultiCharTrimFunction(this);
		}
	}


}



class TrimOperandsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_trimOperands;
    }

	trimSource() {
	    return this.getTypedRuleContext(TrimSourceContext,0);
	};

	FROM() {
	    return this.getToken(GQLParser.FROM, 0);
	};

	trimSpec() {
	    return this.getTypedRuleContext(TrimSpecContext,0);
	};

	trimCharString() {
	    return this.getTypedRuleContext(TrimCharStringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterTrimOperands(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitTrimOperands(this);
		}
	}


}



class TrimSourceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_trimSource;
    }

	charStringValueExpr() {
	    return this.getTypedRuleContext(CharStringValueExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterTrimSource(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitTrimSource(this);
		}
	}


}



class TrimSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_trimSpec;
    }

	LEADING() {
	    return this.getToken(GQLParser.LEADING, 0);
	};

	TRAILING() {
	    return this.getToken(GQLParser.TRAILING, 0);
	};

	BOTH() {
	    return this.getToken(GQLParser.BOTH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterTrimSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitTrimSpec(this);
		}
	}


}



class TrimCharStringContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_trimCharString;
    }

	charStringValueExpr() {
	    return this.getTypedRuleContext(CharStringValueExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterTrimCharString(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitTrimCharString(this);
		}
	}


}



class NormalizeFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_normalizeFunction;
    }

	NORMALIZE() {
	    return this.getToken(GQLParser.NORMALIZE, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	charStringValueExpr() {
	    return this.getTypedRuleContext(CharStringValueExprContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	COMMA() {
	    return this.getToken(GQLParser.COMMA, 0);
	};

	normalForm() {
	    return this.getTypedRuleContext(NormalFormContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterNormalizeFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitNormalizeFunction(this);
		}
	}


}



class NormalFormContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_normalForm;
    }

	NFC() {
	    return this.getToken(GQLParser.NFC, 0);
	};

	NFD() {
	    return this.getToken(GQLParser.NFD, 0);
	};

	NFKC() {
	    return this.getToken(GQLParser.NFKC, 0);
	};

	NFKD() {
	    return this.getToken(GQLParser.NFKD, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterNormalForm(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitNormalForm(this);
		}
	}


}



class ByteStringFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_byteStringFunction;
    }

	byteStrinTrimFunction() {
	    return this.getTypedRuleContext(ByteStrinTrimFunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterByteStringFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitByteStringFunction(this);
		}
	}


}



class ByteStrinTrimFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_byteStrinTrimFunction;
    }

	TRIM() {
	    return this.getToken(GQLParser.TRIM, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	byteStringTrimOperands() {
	    return this.getTypedRuleContext(ByteStringTrimOperandsContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterByteStrinTrimFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitByteStrinTrimFunction(this);
		}
	}


}



class ByteStringTrimOperandsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_byteStringTrimOperands;
    }

	byteStringTrimSource() {
	    return this.getTypedRuleContext(ByteStringTrimSourceContext,0);
	};

	FROM() {
	    return this.getToken(GQLParser.FROM, 0);
	};

	trimSpec() {
	    return this.getTypedRuleContext(TrimSpecContext,0);
	};

	trimByteString() {
	    return this.getTypedRuleContext(TrimByteStringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterByteStringTrimOperands(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitByteStringTrimOperands(this);
		}
	}


}



class ByteStringTrimSourceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_byteStringTrimSource;
    }

	byteStringValueExpr() {
	    return this.getTypedRuleContext(ByteStringValueExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterByteStringTrimSource(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitByteStringTrimSource(this);
		}
	}


}



class TrimByteStringContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_trimByteString;
    }

	byteStringValueExpr() {
	    return this.getTypedRuleContext(ByteStringValueExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterTrimByteString(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitTrimByteString(this);
		}
	}


}



class StringLengthContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_stringLength;
    }

	numericValueExpr() {
	    return this.getTypedRuleContext(NumericValueExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterStringLength(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitStringLength(this);
		}
	}


}



class DateTimeValueExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_dateTimeValueExpr;
    }

	dateTimeTerm() {
	    return this.getTypedRuleContext(DateTimeTermContext,0);
	};

	durationValueExpr() {
	    return this.getTypedRuleContext(DurationValueExprContext,0);
	};

	PLUS() {
	    return this.getToken(GQLParser.PLUS, 0);
	};

	dateTimeValueExpr() {
	    return this.getTypedRuleContext(DateTimeValueExprContext,0);
	};

	durationTerm() {
	    return this.getTypedRuleContext(DurationTermContext,0);
	};

	MINUS() {
	    return this.getToken(GQLParser.MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterDateTimeValueExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitDateTimeValueExpr(this);
		}
	}


}



class DateTimeTermContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_dateTimeTerm;
    }

	dateTimeFactor() {
	    return this.getTypedRuleContext(DateTimeFactorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterDateTimeTerm(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitDateTimeTerm(this);
		}
	}


}



class DateTimeFactorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_dateTimeFactor;
    }

	dateTimePrimary() {
	    return this.getTypedRuleContext(DateTimePrimaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterDateTimeFactor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitDateTimeFactor(this);
		}
	}


}



class DateTimePrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_dateTimePrimary;
    }

	valueExprPrimary() {
	    return this.getTypedRuleContext(ValueExprPrimaryContext,0);
	};

	dateTimeValueFunction() {
	    return this.getTypedRuleContext(DateTimeValueFunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterDateTimePrimary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitDateTimePrimary(this);
		}
	}


}



class DateTimeValueFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_dateTimeValueFunction;
    }

	dateFunction() {
	    return this.getTypedRuleContext(DateFunctionContext,0);
	};

	timeFunction() {
	    return this.getTypedRuleContext(TimeFunctionContext,0);
	};

	dateTimeFunction() {
	    return this.getTypedRuleContext(DateTimeFunctionContext,0);
	};

	localTimeFunction() {
	    return this.getTypedRuleContext(LocalTimeFunctionContext,0);
	};

	localDatetimeFunction() {
	    return this.getTypedRuleContext(LocalDatetimeFunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterDateTimeValueFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitDateTimeValueFunction(this);
		}
	}


}



class DateFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_dateFunction;
    }

	CURRENT_DATE() {
	    return this.getToken(GQLParser.CURRENT_DATE, 0);
	};

	DATE() {
	    return this.getToken(GQLParser.DATE, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	dateFunctionParameters() {
	    return this.getTypedRuleContext(DateFunctionParametersContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterDateFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitDateFunction(this);
		}
	}


}



class TimeFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_timeFunction;
    }

	CURRENT_TIME() {
	    return this.getToken(GQLParser.CURRENT_TIME, 0);
	};

	ZONED_TIME() {
	    return this.getToken(GQLParser.ZONED_TIME, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	timeFunctionParameters() {
	    return this.getTypedRuleContext(TimeFunctionParametersContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterTimeFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitTimeFunction(this);
		}
	}


}



class LocalTimeFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_localTimeFunction;
    }

	LOCAL_TIME() {
	    return this.getToken(GQLParser.LOCAL_TIME, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	timeFunctionParameters() {
	    return this.getTypedRuleContext(TimeFunctionParametersContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterLocalTimeFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitLocalTimeFunction(this);
		}
	}


}



class DateTimeFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_dateTimeFunction;
    }

	CURRENT_TIMESTAMP() {
	    return this.getToken(GQLParser.CURRENT_TIMESTAMP, 0);
	};

	ZONED_DATETIME() {
	    return this.getToken(GQLParser.ZONED_DATETIME, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	dateTimeFunctionParameters() {
	    return this.getTypedRuleContext(DateTimeFunctionParametersContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterDateTimeFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitDateTimeFunction(this);
		}
	}


}



class LocalDatetimeFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_localDatetimeFunction;
    }

	LOCAL_TIMESTAMP() {
	    return this.getToken(GQLParser.LOCAL_TIMESTAMP, 0);
	};

	LOCAL_DATETIME() {
	    return this.getToken(GQLParser.LOCAL_DATETIME, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	dateTimeFunctionParameters() {
	    return this.getTypedRuleContext(DateTimeFunctionParametersContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterLocalDatetimeFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitLocalDatetimeFunction(this);
		}
	}


}



class DateFunctionParametersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_dateFunctionParameters;
    }

	dateString() {
	    return this.getTypedRuleContext(DateStringContext,0);
	};

	recordValueConstructor() {
	    return this.getTypedRuleContext(RecordValueConstructorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterDateFunctionParameters(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitDateFunctionParameters(this);
		}
	}


}



class TimeFunctionParametersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_timeFunctionParameters;
    }

	timeString() {
	    return this.getTypedRuleContext(TimeStringContext,0);
	};

	recordValueConstructor() {
	    return this.getTypedRuleContext(RecordValueConstructorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterTimeFunctionParameters(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitTimeFunctionParameters(this);
		}
	}


}



class DateTimeFunctionParametersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_dateTimeFunctionParameters;
    }

	dateTimeString() {
	    return this.getTypedRuleContext(DateTimeStringContext,0);
	};

	recordValueConstructor() {
	    return this.getTypedRuleContext(RecordValueConstructorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterDateTimeFunctionParameters(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitDateTimeFunctionParameters(this);
		}
	}


}



class DurationValueExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_durationValueExpr;
    }

	durationTerm() {
	    return this.getTypedRuleContext(DurationTermContext,0);
	};

	dateTimeSubtraction() {
	    return this.getTypedRuleContext(DateTimeSubtractionContext,0);
	};

	durationValueExpr() {
	    return this.getTypedRuleContext(DurationValueExprContext,0);
	};

	PLUS() {
	    return this.getToken(GQLParser.PLUS, 0);
	};

	MINUS() {
	    return this.getToken(GQLParser.MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterDurationValueExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitDurationValueExpr(this);
		}
	}


}



class DateTimeSubtractionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_dateTimeSubtraction;
    }

	DURATION_BETWEEN() {
	    return this.getToken(GQLParser.DURATION_BETWEEN, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	dateTimeSubtractionParameters() {
	    return this.getTypedRuleContext(DateTimeSubtractionParametersContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterDateTimeSubtraction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitDateTimeSubtraction(this);
		}
	}


}



class DateTimeSubtractionParametersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_dateTimeSubtractionParameters;
    }

	dateTimeValueExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DateTimeValueExprContext);
	    } else {
	        return this.getTypedRuleContext(DateTimeValueExprContext,i);
	    }
	};

	COMMA() {
	    return this.getToken(GQLParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterDateTimeSubtractionParameters(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitDateTimeSubtractionParameters(this);
		}
	}


}



class DurationTermContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_durationTerm;
    }

	durationFactor() {
	    return this.getTypedRuleContext(DurationFactorContext,0);
	};

	term() {
	    return this.getTypedRuleContext(TermContext,0);
	};

	ASTERISK() {
	    return this.getToken(GQLParser.ASTERISK, 0);
	};

	durationTerm() {
	    return this.getTypedRuleContext(DurationTermContext,0);
	};

	factor() {
	    return this.getTypedRuleContext(FactorContext,0);
	};

	SOLIDUS() {
	    return this.getToken(GQLParser.SOLIDUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterDurationTerm(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitDurationTerm(this);
		}
	}


}



class DurationFactorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_durationFactor;
    }

	durationPrimary() {
	    return this.getTypedRuleContext(DurationPrimaryContext,0);
	};

	SIGN() {
	    return this.getToken(GQLParser.SIGN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterDurationFactor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitDurationFactor(this);
		}
	}


}



class DurationPrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_durationPrimary;
    }

	valueExprPrimary() {
	    return this.getTypedRuleContext(ValueExprPrimaryContext,0);
	};

	durationValueFunction() {
	    return this.getTypedRuleContext(DurationValueFunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterDurationPrimary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitDurationPrimary(this);
		}
	}


}



class DurationValueExpr1Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_durationValueExpr1;
    }

	durationValueExpr() {
	    return this.getTypedRuleContext(DurationValueExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterDurationValueExpr1(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitDurationValueExpr1(this);
		}
	}


}



class DurationTerm1Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_durationTerm1;
    }

	durationTerm() {
	    return this.getTypedRuleContext(DurationTermContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterDurationTerm1(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitDurationTerm1(this);
		}
	}


}



class DurationTerm2Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_durationTerm2;
    }

	durationTerm() {
	    return this.getTypedRuleContext(DurationTermContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterDurationTerm2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitDurationTerm2(this);
		}
	}


}



class DateTimeValueExpr1Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_dateTimeValueExpr1;
    }

	dateTimeValueExpr() {
	    return this.getTypedRuleContext(DateTimeValueExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterDateTimeValueExpr1(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitDateTimeValueExpr1(this);
		}
	}


}



class DateTimeValueExpr2Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_dateTimeValueExpr2;
    }

	dateTimeValueExpr() {
	    return this.getTypedRuleContext(DateTimeValueExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterDateTimeValueExpr2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitDateTimeValueExpr2(this);
		}
	}


}



class DurationValueFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_durationValueFunction;
    }

	durationFunction() {
	    return this.getTypedRuleContext(DurationFunctionContext,0);
	};

	durationAbsoluteValueFunction() {
	    return this.getTypedRuleContext(DurationAbsoluteValueFunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterDurationValueFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitDurationValueFunction(this);
		}
	}


}



class DurationFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_durationFunction;
    }

	DURATION() {
	    return this.getToken(GQLParser.DURATION, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	durationFunctionParameters() {
	    return this.getTypedRuleContext(DurationFunctionParametersContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterDurationFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitDurationFunction(this);
		}
	}


}



class DurationFunctionParametersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_durationFunctionParameters;
    }

	durationString() {
	    return this.getTypedRuleContext(DurationStringContext,0);
	};

	recordValueConstructor() {
	    return this.getTypedRuleContext(RecordValueConstructorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterDurationFunctionParameters(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitDurationFunctionParameters(this);
		}
	}


}



class DurationAbsoluteValueFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_durationAbsoluteValueFunction;
    }

	ABS() {
	    return this.getToken(GQLParser.ABS, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	durationValueExpr() {
	    return this.getTypedRuleContext(DurationValueExprContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterDurationAbsoluteValueFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitDurationAbsoluteValueFunction(this);
		}
	}


}



class ListValueExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_listValueExpr;
    }

	listConcatenation() {
	    return this.getTypedRuleContext(ListConcatenationContext,0);
	};

	listPrimary() {
	    return this.getTypedRuleContext(ListPrimaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterListValueExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitListValueExpr(this);
		}
	}


}



class ListConcatenationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_listConcatenation;
    }

	listPrimary() {
	    return this.getTypedRuleContext(ListPrimaryContext,0);
	};

	CONCATENATION() {
	    return this.getToken(GQLParser.CONCATENATION, 0);
	};

	listValueExpr() {
	    return this.getTypedRuleContext(ListValueExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterListConcatenation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitListConcatenation(this);
		}
	}


}



class ListPrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_listPrimary;
    }

	listValueFunction() {
	    return this.getTypedRuleContext(ListValueFunctionContext,0);
	};

	valueExprPrimary() {
	    return this.getTypedRuleContext(ValueExprPrimaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterListPrimary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitListPrimary(this);
		}
	}


}



class ListValueFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_listValueFunction;
    }

	trimListFunction() {
	    return this.getTypedRuleContext(TrimListFunctionContext,0);
	};

	elementsFunction() {
	    return this.getTypedRuleContext(ElementsFunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterListValueFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitListValueFunction(this);
		}
	}


}



class TrimListFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_trimListFunction;
    }

	TRIM() {
	    return this.getToken(GQLParser.TRIM, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	listValueExpr() {
	    return this.getTypedRuleContext(ListValueExprContext,0);
	};

	COMMA() {
	    return this.getToken(GQLParser.COMMA, 0);
	};

	numericValueExpr() {
	    return this.getTypedRuleContext(NumericValueExprContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterTrimListFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitTrimListFunction(this);
		}
	}


}



class ElementsFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_elementsFunction;
    }

	ELEMENTS() {
	    return this.getToken(GQLParser.ELEMENTS, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	pathValueExpr() {
	    return this.getTypedRuleContext(PathValueExprContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterElementsFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitElementsFunction(this);
		}
	}


}



class ListValueConstructorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_listValueConstructor;
    }

	listValueConstructorByEnumeration() {
	    return this.getTypedRuleContext(ListValueConstructorByEnumerationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterListValueConstructor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitListValueConstructor(this);
		}
	}


}



class ListValueConstructorByEnumerationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_listValueConstructorByEnumeration;
    }

	LEFT_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.LEFT_BRACKET);
	    } else {
	        return this.getToken(GQLParser.LEFT_BRACKET, i);
	    }
	};


	listValueTypeName() {
	    return this.getTypedRuleContext(ListValueTypeNameContext,0);
	};

	RIGHT_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.RIGHT_BRACKET);
	    } else {
	        return this.getToken(GQLParser.RIGHT_BRACKET, i);
	    }
	};


	listElementList() {
	    return this.getTypedRuleContext(ListElementListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterListValueConstructorByEnumeration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitListValueConstructorByEnumeration(this);
		}
	}


}



class ListElementListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_listElementList;
    }

	listElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ListElementContext);
	    } else {
	        return this.getTypedRuleContext(ListElementContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.COMMA);
	    } else {
	        return this.getToken(GQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterListElementList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitListElementList(this);
		}
	}


}



class ListElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_listElement;
    }

	valueExpr() {
	    return this.getTypedRuleContext(ValueExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterListElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitListElement(this);
		}
	}


}



class RecordValueConstructorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_recordValueConstructor;
    }

	fieldsSpec() {
	    return this.getTypedRuleContext(FieldsSpecContext,0);
	};

	RECORD() {
	    return this.getToken(GQLParser.RECORD, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterRecordValueConstructor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitRecordValueConstructor(this);
		}
	}


}



class FieldsSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_fieldsSpec;
    }

	LEFT_BRACE() {
	    return this.getToken(GQLParser.LEFT_BRACE, 0);
	};

	RIGHT_BRACE() {
	    return this.getToken(GQLParser.RIGHT_BRACE, 0);
	};

	fieldList() {
	    return this.getTypedRuleContext(FieldListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterFieldsSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitFieldsSpec(this);
		}
	}


}



class FieldListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_fieldList;
    }

	field = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FieldContext);
	    } else {
	        return this.getTypedRuleContext(FieldContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.COMMA);
	    } else {
	        return this.getToken(GQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterFieldList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitFieldList(this);
		}
	}


}



class FieldContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_field;
    }

	fieldName() {
	    return this.getTypedRuleContext(FieldNameContext,0);
	};

	COLON() {
	    return this.getToken(GQLParser.COLON, 0);
	};

	valueExpr() {
	    return this.getTypedRuleContext(ValueExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterField(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitField(this);
		}
	}


}



class PathValueExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_pathValueExpr;
    }

	pathValueConcatenation() {
	    return this.getTypedRuleContext(PathValueConcatenationContext,0);
	};

	pathValuePrimary() {
	    return this.getTypedRuleContext(PathValuePrimaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterPathValueExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitPathValueExpr(this);
		}
	}


}



class PathValueConcatenationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_pathValueConcatenation;
    }

	pathValuePrimary() {
	    return this.getTypedRuleContext(PathValuePrimaryContext,0);
	};

	CONCATENATION() {
	    return this.getToken(GQLParser.CONCATENATION, 0);
	};

	pathValueExpr() {
	    return this.getTypedRuleContext(PathValueExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterPathValueConcatenation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitPathValueConcatenation(this);
		}
	}


}



class PathValuePrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_pathValuePrimary;
    }

	valueExprPrimary() {
	    return this.getTypedRuleContext(ValueExprPrimaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterPathValuePrimary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitPathValuePrimary(this);
		}
	}


}



class PathValueConstructorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_pathValueConstructor;
    }

	pathValueConstructorByEnumeration() {
	    return this.getTypedRuleContext(PathValueConstructorByEnumerationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterPathValueConstructor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitPathValueConstructor(this);
		}
	}


}



class PathValueConstructorByEnumerationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_pathValueConstructorByEnumeration;
    }

	PATH() {
	    return this.getToken(GQLParser.PATH, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	pathElementList() {
	    return this.getTypedRuleContext(PathElementListContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterPathValueConstructorByEnumeration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitPathValueConstructorByEnumeration(this);
		}
	}


}



class PathElementListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_pathElementList;
    }

	pathElementListStart() {
	    return this.getTypedRuleContext(PathElementListStartContext,0);
	};

	pathElementListStep() {
	    return this.getTypedRuleContext(PathElementListStepContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterPathElementList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitPathElementList(this);
		}
	}


}



class PathElementListStartContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_pathElementListStart;
    }

	nodeRefValueExpr() {
	    return this.getTypedRuleContext(NodeRefValueExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterPathElementListStart(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitPathElementListStart(this);
		}
	}


}



class PathElementListStepContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_pathElementListStep;
    }

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.COMMA);
	    } else {
	        return this.getToken(GQLParser.COMMA, i);
	    }
	};


	edgeRefValueExpr() {
	    return this.getTypedRuleContext(EdgeRefValueExprContext,0);
	};

	nodeRefValueExpr() {
	    return this.getTypedRuleContext(NodeRefValueExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterPathElementListStep(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitPathElementListStep(this);
		}
	}


}



class PropertyRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_propertyRef;
    }

	propertySource() {
	    return this.getTypedRuleContext(PropertySourceContext,0);
	};

	PERIOD() {
	    return this.getToken(GQLParser.PERIOD, 0);
	};

	propertyName() {
	    return this.getTypedRuleContext(PropertyNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterPropertyRef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitPropertyRef(this);
		}
	}


}



class PropertySourceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_propertySource;
    }

	nodeRefValueExpr() {
	    return this.getTypedRuleContext(NodeRefValueExprContext,0);
	};

	edgeRefValueExpr() {
	    return this.getTypedRuleContext(EdgeRefValueExprContext,0);
	};

	recordValueExpr() {
	    return this.getTypedRuleContext(RecordValueExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterPropertySource(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitPropertySource(this);
		}
	}


}



class ValueQueryExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_valueQueryExpr;
    }

	VALUE() {
	    return this.getToken(GQLParser.VALUE, 0);
	};

	nestedQuerySpec() {
	    return this.getTypedRuleContext(NestedQuerySpecContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterValueQueryExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitValueQueryExpr(this);
		}
	}


}



class CaseExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_caseExpr;
    }

	caseAbbreviation() {
	    return this.getTypedRuleContext(CaseAbbreviationContext,0);
	};

	caseSpecification() {
	    return this.getTypedRuleContext(CaseSpecificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterCaseExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitCaseExpr(this);
		}
	}


}



class CaseAbbreviationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_caseAbbreviation;
    }

	NULLIF() {
	    return this.getToken(GQLParser.NULLIF, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	valueExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueExprContext);
	    } else {
	        return this.getTypedRuleContext(ValueExprContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.COMMA);
	    } else {
	        return this.getToken(GQLParser.COMMA, i);
	    }
	};


	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	COALESCE() {
	    return this.getToken(GQLParser.COALESCE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterCaseAbbreviation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitCaseAbbreviation(this);
		}
	}


}



class CaseSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_caseSpecification;
    }

	simpleCase() {
	    return this.getTypedRuleContext(SimpleCaseContext,0);
	};

	searchedCase() {
	    return this.getTypedRuleContext(SearchedCaseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterCaseSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitCaseSpecification(this);
		}
	}


}



class SimpleCaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simpleCase;
    }

	CASE() {
	    return this.getToken(GQLParser.CASE, 0);
	};

	caseOperand() {
	    return this.getTypedRuleContext(CaseOperandContext,0);
	};

	simpleWhenClause() {
	    return this.getTypedRuleContext(SimpleWhenClauseContext,0);
	};

	END() {
	    return this.getToken(GQLParser.END, 0);
	};

	elseClause() {
	    return this.getTypedRuleContext(ElseClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSimpleCase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSimpleCase(this);
		}
	}


}



class SearchedCaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_searchedCase;
    }

	CASE() {
	    return this.getToken(GQLParser.CASE, 0);
	};

	searchedWhenClause() {
	    return this.getTypedRuleContext(SearchedWhenClauseContext,0);
	};

	END() {
	    return this.getToken(GQLParser.END, 0);
	};

	elseClause() {
	    return this.getTypedRuleContext(ElseClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSearchedCase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSearchedCase(this);
		}
	}


}



class SimpleWhenClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simpleWhenClause;
    }

	WHEN() {
	    return this.getToken(GQLParser.WHEN, 0);
	};

	whenOperandList() {
	    return this.getTypedRuleContext(WhenOperandListContext,0);
	};

	THEN() {
	    return this.getToken(GQLParser.THEN, 0);
	};

	result() {
	    return this.getTypedRuleContext(ResultContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSimpleWhenClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSimpleWhenClause(this);
		}
	}


}



class SearchedWhenClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_searchedWhenClause;
    }

	WHEN() {
	    return this.getToken(GQLParser.WHEN, 0);
	};

	searchCondition() {
	    return this.getTypedRuleContext(SearchConditionContext,0);
	};

	THEN() {
	    return this.getToken(GQLParser.THEN, 0);
	};

	result() {
	    return this.getTypedRuleContext(ResultContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSearchedWhenClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSearchedWhenClause(this);
		}
	}


}



class ElseClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_elseClause;
    }

	ELSE() {
	    return this.getToken(GQLParser.ELSE, 0);
	};

	result() {
	    return this.getTypedRuleContext(ResultContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterElseClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitElseClause(this);
		}
	}


}



class CaseOperandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_caseOperand;
    }

	nonParenthesizedValueExprPrimary() {
	    return this.getTypedRuleContext(NonParenthesizedValueExprPrimaryContext,0);
	};

	elementVarRef() {
	    return this.getTypedRuleContext(ElementVarRefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterCaseOperand(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitCaseOperand(this);
		}
	}


}



class WhenOperandListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_whenOperandList;
    }

	whenOperand = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WhenOperandContext);
	    } else {
	        return this.getTypedRuleContext(WhenOperandContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.COMMA);
	    } else {
	        return this.getToken(GQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterWhenOperandList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitWhenOperandList(this);
		}
	}


}



class WhenOperandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_whenOperand;
    }

	nonParenthesizedValueExprPrimary() {
	    return this.getTypedRuleContext(NonParenthesizedValueExprPrimaryContext,0);
	};

	comparisonPredicatePart2() {
	    return this.getTypedRuleContext(ComparisonPredicatePart2Context,0);
	};

	nullPredicatePart2() {
	    return this.getTypedRuleContext(NullPredicatePart2Context,0);
	};

	valueTypePredicatePart2() {
	    return this.getTypedRuleContext(ValueTypePredicatePart2Context,0);
	};

	directedPredicatePart2() {
	    return this.getTypedRuleContext(DirectedPredicatePart2Context,0);
	};

	labeledPredicatePart2() {
	    return this.getTypedRuleContext(LabeledPredicatePart2Context,0);
	};

	sourcePredicatePart2() {
	    return this.getTypedRuleContext(SourcePredicatePart2Context,0);
	};

	destinationPredicatePart2() {
	    return this.getTypedRuleContext(DestinationPredicatePart2Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterWhenOperand(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitWhenOperand(this);
		}
	}


}



class ResultContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_result;
    }

	resultExpr() {
	    return this.getTypedRuleContext(ResultExprContext,0);
	};

	NULL() {
	    return this.getToken(GQLParser.NULL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterResult(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitResult(this);
		}
	}


}



class ResultExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_resultExpr;
    }

	valueExpr() {
	    return this.getTypedRuleContext(ValueExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterResultExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitResultExpr(this);
		}
	}


}



class CastSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_castSpec;
    }

	CAST() {
	    return this.getToken(GQLParser.CAST, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	castOperand() {
	    return this.getTypedRuleContext(CastOperandContext,0);
	};

	AS() {
	    return this.getToken(GQLParser.AS, 0);
	};

	castTarget() {
	    return this.getTypedRuleContext(CastTargetContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterCastSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitCastSpec(this);
		}
	}


}



class CastOperandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_castOperand;
    }

	valueExpr() {
	    return this.getTypedRuleContext(ValueExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterCastOperand(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitCastOperand(this);
		}
	}


}



class CastTargetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_castTarget;
    }

	valueType() {
	    return this.getTypedRuleContext(ValueTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterCastTarget(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitCastTarget(this);
		}
	}


}



class ElementIdFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_elementIdFunction;
    }

	ELEMENT_ID() {
	    return this.getToken(GQLParser.ELEMENT_ID, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	elementVarRef() {
	    return this.getTypedRuleContext(ElementVarRefContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterElementIdFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitElementIdFunction(this);
		}
	}


}



class LetValueExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_letValueExpr;
    }

	LET() {
	    return this.getToken(GQLParser.LET, 0);
	};

	letVarDefList() {
	    return this.getTypedRuleContext(LetVarDefListContext,0);
	};

	IN() {
	    return this.getToken(GQLParser.IN, 0);
	};

	valueExpr() {
	    return this.getTypedRuleContext(ValueExprContext,0);
	};

	END() {
	    return this.getToken(GQLParser.END, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterLetValueExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitLetValueExpr(this);
		}
	}


}



class LiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_literal;
    }

	SIGNED_NUMERIC_LITERAL() {
	    return this.getToken(GQLParser.SIGNED_NUMERIC_LITERAL, 0);
	};

	generalLiteral() {
	    return this.getTypedRuleContext(GeneralLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitLiteral(this);
		}
	}


}



class GeneralLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_generalLiteral;
    }

	predefinedTypeLiteral() {
	    return this.getTypedRuleContext(PredefinedTypeLiteralContext,0);
	};

	listLiteral() {
	    return this.getTypedRuleContext(ListLiteralContext,0);
	};

	recordLiteral() {
	    return this.getTypedRuleContext(RecordLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGeneralLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGeneralLiteral(this);
		}
	}


}



class PredefinedTypeLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_predefinedTypeLiteral;
    }

	booleanLiteral() {
	    return this.getTypedRuleContext(BooleanLiteralContext,0);
	};

	characterStringLiteral() {
	    return this.getTypedRuleContext(CharacterStringLiteralContext,0);
	};

	BYTE_STRING_LITERAL() {
	    return this.getToken(GQLParser.BYTE_STRING_LITERAL, 0);
	};

	temporalLiteral() {
	    return this.getTypedRuleContext(TemporalLiteralContext,0);
	};

	durationLiteral() {
	    return this.getTypedRuleContext(DurationLiteralContext,0);
	};

	nullLiteral() {
	    return this.getTypedRuleContext(NullLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterPredefinedTypeLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitPredefinedTypeLiteral(this);
		}
	}


}



class UnsignedLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_unsignedLiteral;
    }

	UNSIGNED_NUMERIC_LITERAL() {
	    return this.getToken(GQLParser.UNSIGNED_NUMERIC_LITERAL, 0);
	};

	generalLiteral() {
	    return this.getTypedRuleContext(GeneralLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterUnsignedLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitUnsignedLiteral(this);
		}
	}


}



class BooleanLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_booleanLiteral;
    }

	TRUE() {
	    return this.getToken(GQLParser.TRUE, 0);
	};

	FALSE() {
	    return this.getToken(GQLParser.FALSE, 0);
	};

	UNKNOWN() {
	    return this.getToken(GQLParser.UNKNOWN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterBooleanLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitBooleanLiteral(this);
		}
	}


}



class CharacterStringLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_characterStringLiteral;
    }

	singleQuotedCharacterSequence() {
	    return this.getTypedRuleContext(SingleQuotedCharacterSequenceContext,0);
	};

	doubleQuotedCharacterSequence() {
	    return this.getTypedRuleContext(DoubleQuotedCharacterSequenceContext,0);
	};

	accentQuotedCharacterSequence() {
	    return this.getTypedRuleContext(AccentQuotedCharacterSequenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterCharacterStringLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitCharacterStringLiteral(this);
		}
	}


}



class UnbrokenCharacterStringLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_unbrokenCharacterStringLiteral;
    }

	unbrokenSingleQuotedCharacterSequence() {
	    return this.getTypedRuleContext(UnbrokenSingleQuotedCharacterSequenceContext,0);
	};

	noEscape() {
	    return this.getTypedRuleContext(NoEscapeContext,0);
	};

	unbrokenDoubleQuotedCharacterSequence() {
	    return this.getTypedRuleContext(UnbrokenDoubleQuotedCharacterSequenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterUnbrokenCharacterStringLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitUnbrokenCharacterStringLiteral(this);
		}
	}


}



class SingleQuotedCharacterSequenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_singleQuotedCharacterSequence;
    }

	unbrokenSingleQuotedCharacterSequence = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UnbrokenSingleQuotedCharacterSequenceContext);
	    } else {
	        return this.getTypedRuleContext(UnbrokenSingleQuotedCharacterSequenceContext,i);
	    }
	};

	noEscape() {
	    return this.getTypedRuleContext(NoEscapeContext,0);
	};

	VERTICAL_BAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.VERTICAL_BAR);
	    } else {
	        return this.getToken(GQLParser.VERTICAL_BAR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSingleQuotedCharacterSequence(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSingleQuotedCharacterSequence(this);
		}
	}


}



class DoubleQuotedCharacterSequenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_doubleQuotedCharacterSequence;
    }

	unbrokenDoubleQuotedCharacterSequence = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UnbrokenDoubleQuotedCharacterSequenceContext);
	    } else {
	        return this.getTypedRuleContext(UnbrokenDoubleQuotedCharacterSequenceContext,i);
	    }
	};

	noEscape() {
	    return this.getTypedRuleContext(NoEscapeContext,0);
	};

	VERTICAL_BAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.VERTICAL_BAR);
	    } else {
	        return this.getToken(GQLParser.VERTICAL_BAR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterDoubleQuotedCharacterSequence(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitDoubleQuotedCharacterSequence(this);
		}
	}


}



class AccentQuotedCharacterSequenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_accentQuotedCharacterSequence;
    }

	unbrokenAccentQuotedCharacterSequence = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UnbrokenAccentQuotedCharacterSequenceContext);
	    } else {
	        return this.getTypedRuleContext(UnbrokenAccentQuotedCharacterSequenceContext,i);
	    }
	};

	noEscape() {
	    return this.getTypedRuleContext(NoEscapeContext,0);
	};

	VERTICAL_BAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.VERTICAL_BAR);
	    } else {
	        return this.getToken(GQLParser.VERTICAL_BAR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterAccentQuotedCharacterSequence(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitAccentQuotedCharacterSequence(this);
		}
	}


}



class NoEscapeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_noEscape;
    }

	COMMERCIAL_AT() {
	    return this.getToken(GQLParser.COMMERCIAL_AT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterNoEscape(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitNoEscape(this);
		}
	}


}



class UnbrokenSingleQuotedCharacterSequenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_unbrokenSingleQuotedCharacterSequence;
    }

	SINGLE_QUOTED_STRING_LITERAL() {
	    return this.getToken(GQLParser.SINGLE_QUOTED_STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterUnbrokenSingleQuotedCharacterSequence(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitUnbrokenSingleQuotedCharacterSequence(this);
		}
	}


}



class UnbrokenDoubleQuotedCharacterSequenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_unbrokenDoubleQuotedCharacterSequence;
    }

	DOUBLE_QUOTED_STRING_LITERAL() {
	    return this.getToken(GQLParser.DOUBLE_QUOTED_STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterUnbrokenDoubleQuotedCharacterSequence(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitUnbrokenDoubleQuotedCharacterSequence(this);
		}
	}


}



class UnbrokenAccentQuotedCharacterSequenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_unbrokenAccentQuotedCharacterSequence;
    }

	ACCENT_QUOTED_STRING_LITERAL() {
	    return this.getToken(GQLParser.ACCENT_QUOTED_STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterUnbrokenAccentQuotedCharacterSequence(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitUnbrokenAccentQuotedCharacterSequence(this);
		}
	}


}



class TemporalLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_temporalLiteral;
    }

	dateLiteral() {
	    return this.getTypedRuleContext(DateLiteralContext,0);
	};

	timeLiteral() {
	    return this.getTypedRuleContext(TimeLiteralContext,0);
	};

	dateTimeLiteral() {
	    return this.getTypedRuleContext(DateTimeLiteralContext,0);
	};

	sqlDateTimeLiteral() {
	    return this.getTypedRuleContext(SqlDateTimeLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterTemporalLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitTemporalLiteral(this);
		}
	}


}



class DateLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_dateLiteral;
    }

	DATE() {
	    return this.getToken(GQLParser.DATE, 0);
	};

	unbrokenCharacterStringLiteral() {
	    return this.getTypedRuleContext(UnbrokenCharacterStringLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterDateLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitDateLiteral(this);
		}
	}


}



class TimeLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_timeLiteral;
    }

	TIME() {
	    return this.getToken(GQLParser.TIME, 0);
	};

	unbrokenCharacterStringLiteral() {
	    return this.getTypedRuleContext(UnbrokenCharacterStringLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterTimeLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitTimeLiteral(this);
		}
	}


}



class DateTimeLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_dateTimeLiteral;
    }

	DATETIME() {
	    return this.getToken(GQLParser.DATETIME, 0);
	};

	unbrokenCharacterStringLiteral() {
	    return this.getTypedRuleContext(UnbrokenCharacterStringLiteralContext,0);
	};

	TIMESTAMP() {
	    return this.getToken(GQLParser.TIMESTAMP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterDateTimeLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitDateTimeLiteral(this);
		}
	}


}



class DateStringContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_dateString;
    }

	unbrokenCharacterStringLiteral() {
	    return this.getTypedRuleContext(UnbrokenCharacterStringLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterDateString(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitDateString(this);
		}
	}


}



class TimeStringContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_timeString;
    }

	unbrokenCharacterStringLiteral() {
	    return this.getTypedRuleContext(UnbrokenCharacterStringLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterTimeString(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitTimeString(this);
		}
	}


}



class DateTimeStringContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_dateTimeString;
    }

	unbrokenCharacterStringLiteral() {
	    return this.getTypedRuleContext(UnbrokenCharacterStringLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterDateTimeString(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitDateTimeString(this);
		}
	}


}



class SqlDateTimeLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_sqlDateTimeLiteral;
    }

	DATE() {
	    return this.getToken(GQLParser.DATE, 0);
	};

	QUOTE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.QUOTE);
	    } else {
	        return this.getToken(GQLParser.QUOTE, i);
	    }
	};


	FOUR_DIGIT() {
	    return this.getToken(GQLParser.FOUR_DIGIT, 0);
	};

	MINUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.MINUS);
	    } else {
	        return this.getToken(GQLParser.MINUS, i);
	    }
	};


	DOUBLE_DIGIT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.DOUBLE_DIGIT);
	    } else {
	        return this.getToken(GQLParser.DOUBLE_DIGIT, i);
	    }
	};


	TIME() {
	    return this.getToken(GQLParser.TIME, 0);
	};

	COLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.COLON);
	    } else {
	        return this.getToken(GQLParser.COLON, i);
	    }
	};


	TIMESTAMP() {
	    return this.getToken(GQLParser.TIMESTAMP, 0);
	};

	DATETIME() {
	    return this.getToken(GQLParser.DATETIME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSqlDateTimeLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSqlDateTimeLiteral(this);
		}
	}


}



class DurationLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_durationLiteral;
    }

	DURATION() {
	    return this.getToken(GQLParser.DURATION, 0);
	};

	durationString() {
	    return this.getTypedRuleContext(DurationStringContext,0);
	};

	sqlIntervalLiteral() {
	    return this.getTypedRuleContext(SqlIntervalLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterDurationLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitDurationLiteral(this);
		}
	}


}



class DurationStringContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_durationString;
    }

	unbrokenCharacterStringLiteral() {
	    return this.getTypedRuleContext(UnbrokenCharacterStringLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterDurationString(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitDurationString(this);
		}
	}


}



class SqlIntervalLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_sqlIntervalLiteral;
    }

	UNSIGNED_INT() {
	    return this.getToken(GQLParser.UNSIGNED_INT, 0);
	};

	sqlIntervalType() {
	    return this.getTypedRuleContext(SqlIntervalTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSqlIntervalLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSqlIntervalLiteral(this);
		}
	}


}



class SqlIntervalTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_sqlIntervalType;
    }

	INTERVAL_DAY() {
	    return this.getToken(GQLParser.INTERVAL_DAY, 0);
	};

	INTERVAL_WEEK() {
	    return this.getToken(GQLParser.INTERVAL_WEEK, 0);
	};

	INTERVAL_MONTH() {
	    return this.getToken(GQLParser.INTERVAL_MONTH, 0);
	};

	INTERVAL_YEAR() {
	    return this.getToken(GQLParser.INTERVAL_YEAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSqlIntervalType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSqlIntervalType(this);
		}
	}


}



class NullLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_nullLiteral;
    }

	NULL() {
	    return this.getToken(GQLParser.NULL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterNullLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitNullLiteral(this);
		}
	}


}



class ListLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_listLiteral;
    }

	listValueConstructorByEnumeration() {
	    return this.getTypedRuleContext(ListValueConstructorByEnumerationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterListLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitListLiteral(this);
		}
	}


}



class RecordLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_recordLiteral;
    }

	recordValueConstructor() {
	    return this.getTypedRuleContext(RecordValueConstructorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterRecordLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitRecordLiteral(this);
		}
	}


}



class ObjectNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_objectName;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterObjectName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitObjectName(this);
		}
	}


}



class ObjectNameOrBindingVarContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_objectNameOrBindingVar;
    }

	REGULAR_IDENTIFIER() {
	    return this.getToken(GQLParser.REGULAR_IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterObjectNameOrBindingVar(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitObjectNameOrBindingVar(this);
		}
	}


}



class DirectoryNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_directoryName;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterDirectoryName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitDirectoryName(this);
		}
	}


}



class SchemaNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_schemaName;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSchemaName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSchemaName(this);
		}
	}


}



class GraphNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_graphName;
    }

	REGULAR_IDENTIFIER() {
	    return this.getToken(GQLParser.REGULAR_IDENTIFIER, 0);
	};

	delimitedGraphName() {
	    return this.getTypedRuleContext(DelimitedGraphNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGraphName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGraphName(this);
		}
	}


}



class DelimitedGraphNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_delimitedGraphName;
    }

	delimitedIdentifier() {
	    return this.getTypedRuleContext(DelimitedIdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterDelimitedGraphName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitDelimitedGraphName(this);
		}
	}


}



class GraphTypeNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_graphTypeName;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGraphTypeName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGraphTypeName(this);
		}
	}


}



class ElementTypeNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_elementTypeName;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterElementTypeName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitElementTypeName(this);
		}
	}


}



class BindingTableNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_bindingTableName;
    }

	REGULAR_IDENTIFIER() {
	    return this.getToken(GQLParser.REGULAR_IDENTIFIER, 0);
	};

	delimitedBindingTableName() {
	    return this.getTypedRuleContext(DelimitedBindingTableNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterBindingTableName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitBindingTableName(this);
		}
	}


}



class DelimitedBindingTableNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_delimitedBindingTableName;
    }

	delimitedIdentifier() {
	    return this.getTypedRuleContext(DelimitedIdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterDelimitedBindingTableName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitDelimitedBindingTableName(this);
		}
	}


}



class ProcedureNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_procedureName;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterProcedureName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitProcedureName(this);
		}
	}


}



class LabelNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_labelName;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterLabelName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitLabelName(this);
		}
	}


}



class PropertyNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_propertyName;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterPropertyName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitPropertyName(this);
		}
	}


}



class FieldNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_fieldName;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterFieldName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitFieldName(this);
		}
	}


}



class ParameterNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_parameterName;
    }

	DOLLAR() {
	    return this.getToken(GQLParser.DOLLAR, 0);
	};

	separatedIdentifier() {
	    return this.getTypedRuleContext(SeparatedIdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterParameterName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitParameterName(this);
		}
	}


}



class VarContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_var;
    }

	graphVar() {
	    return this.getTypedRuleContext(GraphVarContext,0);
	};

	graphPatternVar() {
	    return this.getTypedRuleContext(GraphPatternVarContext,0);
	};

	bindingTableVar() {
	    return this.getTypedRuleContext(BindingTableVarContext,0);
	};

	valueVar() {
	    return this.getTypedRuleContext(ValueVarContext,0);
	};

	bindingVar() {
	    return this.getTypedRuleContext(BindingVarContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterVar(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitVar(this);
		}
	}


}



class GraphVarContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_graphVar;
    }

	bindingVar() {
	    return this.getTypedRuleContext(BindingVarContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGraphVar(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGraphVar(this);
		}
	}


}



class GraphPatternVarContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_graphPatternVar;
    }

	elementVar() {
	    return this.getTypedRuleContext(ElementVarContext,0);
	};

	pathOrSubpathVar() {
	    return this.getTypedRuleContext(PathOrSubpathVarContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGraphPatternVar(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGraphPatternVar(this);
		}
	}


}



class PathOrSubpathVarContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_pathOrSubpathVar;
    }

	pathVar() {
	    return this.getTypedRuleContext(PathVarContext,0);
	};

	subpathVar() {
	    return this.getTypedRuleContext(SubpathVarContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterPathOrSubpathVar(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitPathOrSubpathVar(this);
		}
	}


}



class ElementVarContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_elementVar;
    }

	bindingVar() {
	    return this.getTypedRuleContext(BindingVarContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterElementVar(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitElementVar(this);
		}
	}


}



class PathVarContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_pathVar;
    }

	bindingVar() {
	    return this.getTypedRuleContext(BindingVarContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterPathVar(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitPathVar(this);
		}
	}


}



class SubpathVarContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_subpathVar;
    }

	REGULAR_IDENTIFIER() {
	    return this.getToken(GQLParser.REGULAR_IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSubpathVar(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSubpathVar(this);
		}
	}


}



class BindingTableVarContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_bindingTableVar;
    }

	bindingVar() {
	    return this.getTypedRuleContext(BindingVarContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterBindingTableVar(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitBindingTableVar(this);
		}
	}


}



class ValueVarContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_valueVar;
    }

	bindingVar() {
	    return this.getTypedRuleContext(BindingVarContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterValueVar(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitValueVar(this);
		}
	}


}



class BindingVarContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_bindingVar;
    }

	REGULAR_IDENTIFIER() {
	    return this.getToken(GQLParser.REGULAR_IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterBindingVar(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitBindingVar(this);
		}
	}


}



class TokenContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_token;
    }

	nonDelimiterToken() {
	    return this.getTypedRuleContext(NonDelimiterTokenContext,0);
	};

	delimiterToken() {
	    return this.getTypedRuleContext(DelimiterTokenContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterToken(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitToken(this);
		}
	}


}



class NonDelimiterTokenContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_nonDelimiterToken;
    }

	REGULAR_IDENTIFIER() {
	    return this.getToken(GQLParser.REGULAR_IDENTIFIER, 0);
	};

	parameterName() {
	    return this.getTypedRuleContext(ParameterNameContext,0);
	};

	keyWord() {
	    return this.getTypedRuleContext(KeyWordContext,0);
	};

	UNSIGNED_NUMERIC_LITERAL() {
	    return this.getToken(GQLParser.UNSIGNED_NUMERIC_LITERAL, 0);
	};

	BYTE_STRING_LITERAL() {
	    return this.getToken(GQLParser.BYTE_STRING_LITERAL, 0);
	};

	MULTISET_ALTERNATION() {
	    return this.getToken(GQLParser.MULTISET_ALTERNATION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterNonDelimiterToken(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitNonDelimiterToken(this);
		}
	}


}



class IdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_identifier;
    }

	REGULAR_IDENTIFIER() {
	    return this.getToken(GQLParser.REGULAR_IDENTIFIER, 0);
	};

	delimitedIdentifier() {
	    return this.getTypedRuleContext(DelimitedIdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitIdentifier(this);
		}
	}


}



class SeparatedIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_separatedIdentifier;
    }

	REGULAR_IDENTIFIER() {
	    return this.getToken(GQLParser.REGULAR_IDENTIFIER, 0);
	};

	delimitedIdentifier() {
	    return this.getTypedRuleContext(DelimitedIdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSeparatedIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSeparatedIdentifier(this);
		}
	}


}



class NonDelimitedIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_nonDelimitedIdentifier;
    }

	REGULAR_IDENTIFIER() {
	    return this.getToken(GQLParser.REGULAR_IDENTIFIER, 0);
	};

	EXTENDED_IDENTIFIER() {
	    return this.getToken(GQLParser.EXTENDED_IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterNonDelimitedIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitNonDelimitedIdentifier(this);
		}
	}


}



class DelimitedIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_delimitedIdentifier;
    }

	doubleQuotedCharacterSequence() {
	    return this.getTypedRuleContext(DoubleQuotedCharacterSequenceContext,0);
	};

	accentQuotedCharacterSequence() {
	    return this.getTypedRuleContext(AccentQuotedCharacterSequenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterDelimitedIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitDelimitedIdentifier(this);
		}
	}


}



class KeyWordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_keyWord;
    }

	reservedWord() {
	    return this.getTypedRuleContext(ReservedWordContext,0);
	};

	nonReservedWord() {
	    return this.getTypedRuleContext(NonReservedWordContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterKeyWord(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitKeyWord(this);
		}
	}


}



class ReservedWordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_reservedWord;
    }

	preReservedWord() {
	    return this.getTypedRuleContext(PreReservedWordContext,0);
	};

	ABS() {
	    return this.getToken(GQLParser.ABS, 0);
	};

	ACOS() {
	    return this.getToken(GQLParser.ACOS, 0);
	};

	ALL() {
	    return this.getToken(GQLParser.ALL, 0);
	};

	ALL_DIFFERENT() {
	    return this.getToken(GQLParser.ALL_DIFFERENT, 0);
	};

	AND() {
	    return this.getToken(GQLParser.AND, 0);
	};

	ANY() {
	    return this.getToken(GQLParser.ANY, 0);
	};

	ARRAY() {
	    return this.getToken(GQLParser.ARRAY, 0);
	};

	AS() {
	    return this.getToken(GQLParser.AS, 0);
	};

	ASC() {
	    return this.getToken(GQLParser.ASC, 0);
	};

	ASCENDING() {
	    return this.getToken(GQLParser.ASCENDING, 0);
	};

	ASIN() {
	    return this.getToken(GQLParser.ASIN, 0);
	};

	AT() {
	    return this.getToken(GQLParser.AT, 0);
	};

	ATAN() {
	    return this.getToken(GQLParser.ATAN, 0);
	};

	AVG() {
	    return this.getToken(GQLParser.AVG, 0);
	};

	BIG() {
	    return this.getToken(GQLParser.BIG, 0);
	};

	BIGINT() {
	    return this.getToken(GQLParser.BIGINT, 0);
	};

	BINARY() {
	    return this.getToken(GQLParser.BINARY, 0);
	};

	BOOL() {
	    return this.getToken(GQLParser.BOOL, 0);
	};

	BOOLEAN() {
	    return this.getToken(GQLParser.BOOLEAN, 0);
	};

	BOTH() {
	    return this.getToken(GQLParser.BOTH, 0);
	};

	BTRIM() {
	    return this.getToken(GQLParser.BTRIM, 0);
	};

	BY() {
	    return this.getToken(GQLParser.BY, 0);
	};

	BYTE_LENGTH() {
	    return this.getToken(GQLParser.BYTE_LENGTH, 0);
	};

	BYTES() {
	    return this.getToken(GQLParser.BYTES, 0);
	};

	CALL() {
	    return this.getToken(GQLParser.CALL, 0);
	};

	CASE() {
	    return this.getToken(GQLParser.CASE, 0);
	};

	CAST() {
	    return this.getToken(GQLParser.CAST, 0);
	};

	CEIL() {
	    return this.getToken(GQLParser.CEIL, 0);
	};

	CEILING() {
	    return this.getToken(GQLParser.CEILING, 0);
	};

	CHAR_LENGTH() {
	    return this.getToken(GQLParser.CHAR_LENGTH, 0);
	};

	CHARACTER_LENGTH() {
	    return this.getToken(GQLParser.CHARACTER_LENGTH, 0);
	};

	CHARACTERISTICS() {
	    return this.getToken(GQLParser.CHARACTERISTICS, 0);
	};

	CLOSE() {
	    return this.getToken(GQLParser.CLOSE, 0);
	};

	COALESCE() {
	    return this.getToken(GQLParser.COALESCE, 0);
	};

	COLLECT() {
	    return this.getToken(GQLParser.COLLECT, 0);
	};

	COMMIT() {
	    return this.getToken(GQLParser.COMMIT, 0);
	};

	COPY() {
	    return this.getToken(GQLParser.COPY, 0);
	};

	COS() {
	    return this.getToken(GQLParser.COS, 0);
	};

	COSH() {
	    return this.getToken(GQLParser.COSH, 0);
	};

	COT() {
	    return this.getToken(GQLParser.COT, 0);
	};

	COUNT() {
	    return this.getToken(GQLParser.COUNT, 0);
	};

	CREATE() {
	    return this.getToken(GQLParser.CREATE, 0);
	};

	CURRENT_DATE() {
	    return this.getToken(GQLParser.CURRENT_DATE, 0);
	};

	CURRENT_GRAPH() {
	    return this.getToken(GQLParser.CURRENT_GRAPH, 0);
	};

	CURRENT_PROPERTY_GRAPH() {
	    return this.getToken(GQLParser.CURRENT_PROPERTY_GRAPH, 0);
	};

	CURRENT_SCHEMA() {
	    return this.getToken(GQLParser.CURRENT_SCHEMA, 0);
	};

	CURRENT_TIME() {
	    return this.getToken(GQLParser.CURRENT_TIME, 0);
	};

	CURRENT_TIMESTAMP() {
	    return this.getToken(GQLParser.CURRENT_TIMESTAMP, 0);
	};

	CURRENT_USER() {
	    return this.getToken(GQLParser.CURRENT_USER, 0);
	};

	DATE() {
	    return this.getToken(GQLParser.DATE, 0);
	};

	DATETIME() {
	    return this.getToken(GQLParser.DATETIME, 0);
	};

	DAY() {
	    return this.getToken(GQLParser.DAY, 0);
	};

	DEC() {
	    return this.getToken(GQLParser.DEC, 0);
	};

	DECIMAL() {
	    return this.getToken(GQLParser.DECIMAL, 0);
	};

	DEGREES() {
	    return this.getToken(GQLParser.DEGREES, 0);
	};

	DELETE() {
	    return this.getToken(GQLParser.DELETE, 0);
	};

	DESC() {
	    return this.getToken(GQLParser.DESC, 0);
	};

	DESCENDING() {
	    return this.getToken(GQLParser.DESCENDING, 0);
	};

	DETACH() {
	    return this.getToken(GQLParser.DETACH, 0);
	};

	DISTINCT() {
	    return this.getToken(GQLParser.DISTINCT, 0);
	};

	DOUBLE() {
	    return this.getToken(GQLParser.DOUBLE, 0);
	};

	DROP() {
	    return this.getToken(GQLParser.DROP, 0);
	};

	DURATION() {
	    return this.getToken(GQLParser.DURATION, 0);
	};

	DURATION_BETWEEN() {
	    return this.getToken(GQLParser.DURATION_BETWEEN, 0);
	};

	ELEMENT_ID() {
	    return this.getToken(GQLParser.ELEMENT_ID, 0);
	};

	ELSE() {
	    return this.getToken(GQLParser.ELSE, 0);
	};

	END() {
	    return this.getToken(GQLParser.END, 0);
	};

	EXCEPT() {
	    return this.getToken(GQLParser.EXCEPT, 0);
	};

	EXISTS() {
	    return this.getToken(GQLParser.EXISTS, 0);
	};

	EXP() {
	    return this.getToken(GQLParser.EXP, 0);
	};

	FALSE() {
	    return this.getToken(GQLParser.FALSE, 0);
	};

	FILTER() {
	    return this.getToken(GQLParser.FILTER, 0);
	};

	FINISH() {
	    return this.getToken(GQLParser.FINISH, 0);
	};

	FLOAT() {
	    return this.getToken(GQLParser.FLOAT, 0);
	};

	FLOAT16() {
	    return this.getToken(GQLParser.FLOAT16, 0);
	};

	FLOAT32() {
	    return this.getToken(GQLParser.FLOAT32, 0);
	};

	FLOAT64() {
	    return this.getToken(GQLParser.FLOAT64, 0);
	};

	FLOAT128() {
	    return this.getToken(GQLParser.FLOAT128, 0);
	};

	FLOAT256() {
	    return this.getToken(GQLParser.FLOAT256, 0);
	};

	FLOOR() {
	    return this.getToken(GQLParser.FLOOR, 0);
	};

	FOR() {
	    return this.getToken(GQLParser.FOR, 0);
	};

	FROM() {
	    return this.getToken(GQLParser.FROM, 0);
	};

	GROUP() {
	    return this.getToken(GQLParser.GROUP, 0);
	};

	HAVING() {
	    return this.getToken(GQLParser.HAVING, 0);
	};

	HOME_GRAPH() {
	    return this.getToken(GQLParser.HOME_GRAPH, 0);
	};

	HOME_PROPERTY_GRAPH() {
	    return this.getToken(GQLParser.HOME_PROPERTY_GRAPH, 0);
	};

	HOME_SCHEMA() {
	    return this.getToken(GQLParser.HOME_SCHEMA, 0);
	};

	HOUR() {
	    return this.getToken(GQLParser.HOUR, 0);
	};

	IF() {
	    return this.getToken(GQLParser.IF, 0);
	};

	IN() {
	    return this.getToken(GQLParser.IN, 0);
	};

	INSERT() {
	    return this.getToken(GQLParser.INSERT, 0);
	};

	INT() {
	    return this.getToken(GQLParser.INT, 0);
	};

	INTEGER() {
	    return this.getToken(GQLParser.INTEGER, 0);
	};

	INT8() {
	    return this.getToken(GQLParser.INT8, 0);
	};

	INTEGER8() {
	    return this.getToken(GQLParser.INTEGER8, 0);
	};

	INT16() {
	    return this.getToken(GQLParser.INT16, 0);
	};

	INTEGER16() {
	    return this.getToken(GQLParser.INTEGER16, 0);
	};

	INT32() {
	    return this.getToken(GQLParser.INT32, 0);
	};

	INTEGER32() {
	    return this.getToken(GQLParser.INTEGER32, 0);
	};

	INT64() {
	    return this.getToken(GQLParser.INT64, 0);
	};

	INTEGER64() {
	    return this.getToken(GQLParser.INTEGER64, 0);
	};

	INT128() {
	    return this.getToken(GQLParser.INT128, 0);
	};

	INTEGER128() {
	    return this.getToken(GQLParser.INTEGER128, 0);
	};

	INT256() {
	    return this.getToken(GQLParser.INT256, 0);
	};

	INTEGER256() {
	    return this.getToken(GQLParser.INTEGER256, 0);
	};

	INTERSECT() {
	    return this.getToken(GQLParser.INTERSECT, 0);
	};

	INTERVAL() {
	    return this.getToken(GQLParser.INTERVAL, 0);
	};

	IS() {
	    return this.getToken(GQLParser.IS, 0);
	};

	LEADING() {
	    return this.getToken(GQLParser.LEADING, 0);
	};

	LET() {
	    return this.getToken(GQLParser.LET, 0);
	};

	LIKE() {
	    return this.getToken(GQLParser.LIKE, 0);
	};

	LIMIT() {
	    return this.getToken(GQLParser.LIMIT, 0);
	};

	LIST() {
	    return this.getToken(GQLParser.LIST, 0);
	};

	LN() {
	    return this.getToken(GQLParser.LN, 0);
	};

	LOCAL() {
	    return this.getToken(GQLParser.LOCAL, 0);
	};

	LOCAL_DATETIME() {
	    return this.getToken(GQLParser.LOCAL_DATETIME, 0);
	};

	LOCAL_TIME() {
	    return this.getToken(GQLParser.LOCAL_TIME, 0);
	};

	LOCAL_TIMESTAMP() {
	    return this.getToken(GQLParser.LOCAL_TIMESTAMP, 0);
	};

	LOG() {
	    return this.getToken(GQLParser.LOG, 0);
	};

	LOG10() {
	    return this.getToken(GQLParser.LOG10, 0);
	};

	LOWER() {
	    return this.getToken(GQLParser.LOWER, 0);
	};

	LTRIM() {
	    return this.getToken(GQLParser.LTRIM, 0);
	};

	MATCH() {
	    return this.getToken(GQLParser.MATCH, 0);
	};

	MAX() {
	    return this.getToken(GQLParser.MAX, 0);
	};

	MIN() {
	    return this.getToken(GQLParser.MIN, 0);
	};

	MINUTE() {
	    return this.getToken(GQLParser.MINUTE, 0);
	};

	MOD() {
	    return this.getToken(GQLParser.MOD, 0);
	};

	MONTH() {
	    return this.getToken(GQLParser.MONTH, 0);
	};

	NEXT() {
	    return this.getToken(GQLParser.NEXT, 0);
	};

	NODETACH() {
	    return this.getToken(GQLParser.NODETACH, 0);
	};

	NORMALIZE() {
	    return this.getToken(GQLParser.NORMALIZE, 0);
	};

	NOT() {
	    return this.getToken(GQLParser.NOT, 0);
	};

	NULL() {
	    return this.getToken(GQLParser.NULL, 0);
	};

	NULLS() {
	    return this.getToken(GQLParser.NULLS, 0);
	};

	NULLIF() {
	    return this.getToken(GQLParser.NULLIF, 0);
	};

	OCTET_LENGTH() {
	    return this.getToken(GQLParser.OCTET_LENGTH, 0);
	};

	OF() {
	    return this.getToken(GQLParser.OF, 0);
	};

	OFFSET() {
	    return this.getToken(GQLParser.OFFSET, 0);
	};

	OPEN() {
	    return this.getToken(GQLParser.OPEN, 0);
	};

	OPTIONAL() {
	    return this.getToken(GQLParser.OPTIONAL, 0);
	};

	OR() {
	    return this.getToken(GQLParser.OR, 0);
	};

	ORDER() {
	    return this.getToken(GQLParser.ORDER, 0);
	};

	OTHERWISE() {
	    return this.getToken(GQLParser.OTHERWISE, 0);
	};

	PARAMETER() {
	    return this.getToken(GQLParser.PARAMETER, 0);
	};

	PARAMETERS() {
	    return this.getToken(GQLParser.PARAMETERS, 0);
	};

	PATH() {
	    return this.getToken(GQLParser.PATH, 0);
	};

	PATH_LENGTH() {
	    return this.getToken(GQLParser.PATH_LENGTH, 0);
	};

	PATHS() {
	    return this.getToken(GQLParser.PATHS, 0);
	};

	PERCENTILE_CONT() {
	    return this.getToken(GQLParser.PERCENTILE_CONT, 0);
	};

	PERCENTILE_DISC() {
	    return this.getToken(GQLParser.PERCENTILE_DISC, 0);
	};

	POWER() {
	    return this.getToken(GQLParser.POWER, 0);
	};

	PRECISION() {
	    return this.getToken(GQLParser.PRECISION, 0);
	};

	PROPERTY_EXISTS() {
	    return this.getToken(GQLParser.PROPERTY_EXISTS, 0);
	};

	RADIANS() {
	    return this.getToken(GQLParser.RADIANS, 0);
	};

	REAL() {
	    return this.getToken(GQLParser.REAL, 0);
	};

	RECORD() {
	    return this.getToken(GQLParser.RECORD, 0);
	};

	REMOVE() {
	    return this.getToken(GQLParser.REMOVE, 0);
	};

	REPLACE() {
	    return this.getToken(GQLParser.REPLACE, 0);
	};

	RESET() {
	    return this.getToken(GQLParser.RESET, 0);
	};

	RETURN() {
	    return this.getToken(GQLParser.RETURN, 0);
	};

	ROLLBACK() {
	    return this.getToken(GQLParser.ROLLBACK, 0);
	};

	RTRIM() {
	    return this.getToken(GQLParser.RTRIM, 0);
	};

	SAME() {
	    return this.getToken(GQLParser.SAME, 0);
	};

	SCHEMA() {
	    return this.getToken(GQLParser.SCHEMA, 0);
	};

	SECOND() {
	    return this.getToken(GQLParser.SECOND, 0);
	};

	SELECT() {
	    return this.getToken(GQLParser.SELECT, 0);
	};

	SESSION() {
	    return this.getToken(GQLParser.SESSION, 0);
	};

	SET() {
	    return this.getToken(GQLParser.SET, 0);
	};

	SIGNED() {
	    return this.getToken(GQLParser.SIGNED, 0);
	};

	SIN() {
	    return this.getToken(GQLParser.SIN, 0);
	};

	SINH() {
	    return this.getToken(GQLParser.SINH, 0);
	};

	SKIP_() {
	    return this.getToken(GQLParser.SKIP_, 0);
	};

	SMALL() {
	    return this.getToken(GQLParser.SMALL, 0);
	};

	SMALLINT() {
	    return this.getToken(GQLParser.SMALLINT, 0);
	};

	SQRT() {
	    return this.getToken(GQLParser.SQRT, 0);
	};

	START() {
	    return this.getToken(GQLParser.START, 0);
	};

	STDDEV_POP() {
	    return this.getToken(GQLParser.STDDEV_POP, 0);
	};

	STDDEV_SAMP() {
	    return this.getToken(GQLParser.STDDEV_SAMP, 0);
	};

	STRING() {
	    return this.getToken(GQLParser.STRING, 0);
	};

	SUM() {
	    return this.getToken(GQLParser.SUM, 0);
	};

	TAN() {
	    return this.getToken(GQLParser.TAN, 0);
	};

	TANH() {
	    return this.getToken(GQLParser.TANH, 0);
	};

	THEN() {
	    return this.getToken(GQLParser.THEN, 0);
	};

	TIME() {
	    return this.getToken(GQLParser.TIME, 0);
	};

	TIMESTAMP() {
	    return this.getToken(GQLParser.TIMESTAMP, 0);
	};

	TRAILING() {
	    return this.getToken(GQLParser.TRAILING, 0);
	};

	TRIM() {
	    return this.getToken(GQLParser.TRIM, 0);
	};

	TRUE() {
	    return this.getToken(GQLParser.TRUE, 0);
	};

	TYPED() {
	    return this.getToken(GQLParser.TYPED, 0);
	};

	UBIGINT() {
	    return this.getToken(GQLParser.UBIGINT, 0);
	};

	UINT() {
	    return this.getToken(GQLParser.UINT, 0);
	};

	UINT8() {
	    return this.getToken(GQLParser.UINT8, 0);
	};

	UINT16() {
	    return this.getToken(GQLParser.UINT16, 0);
	};

	UINT32() {
	    return this.getToken(GQLParser.UINT32, 0);
	};

	UINT64() {
	    return this.getToken(GQLParser.UINT64, 0);
	};

	UINT128() {
	    return this.getToken(GQLParser.UINT128, 0);
	};

	UINT256() {
	    return this.getToken(GQLParser.UINT256, 0);
	};

	UNION() {
	    return this.getToken(GQLParser.UNION, 0);
	};

	UNKNOWN() {
	    return this.getToken(GQLParser.UNKNOWN, 0);
	};

	UNSIGNED() {
	    return this.getToken(GQLParser.UNSIGNED, 0);
	};

	UPPER() {
	    return this.getToken(GQLParser.UPPER, 0);
	};

	USE() {
	    return this.getToken(GQLParser.USE, 0);
	};

	USMALLINT() {
	    return this.getToken(GQLParser.USMALLINT, 0);
	};

	VALUE() {
	    return this.getToken(GQLParser.VALUE, 0);
	};

	VARBINARY() {
	    return this.getToken(GQLParser.VARBINARY, 0);
	};

	VARCHAR() {
	    return this.getToken(GQLParser.VARCHAR, 0);
	};

	VARIABLE() {
	    return this.getToken(GQLParser.VARIABLE, 0);
	};

	WHEN() {
	    return this.getToken(GQLParser.WHEN, 0);
	};

	WHERE() {
	    return this.getToken(GQLParser.WHERE, 0);
	};

	WITH() {
	    return this.getToken(GQLParser.WITH, 0);
	};

	XOR() {
	    return this.getToken(GQLParser.XOR, 0);
	};

	YEAR() {
	    return this.getToken(GQLParser.YEAR, 0);
	};

	YIELD() {
	    return this.getToken(GQLParser.YIELD, 0);
	};

	ZONED() {
	    return this.getToken(GQLParser.ZONED, 0);
	};

	ZONED_DATETIME() {
	    return this.getToken(GQLParser.ZONED_DATETIME, 0);
	};

	ZONED_TIME() {
	    return this.getToken(GQLParser.ZONED_TIME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterReservedWord(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitReservedWord(this);
		}
	}


}



class PreReservedWordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_preReservedWord;
    }

	AGGREGATE() {
	    return this.getToken(GQLParser.AGGREGATE, 0);
	};

	AGGREGATES() {
	    return this.getToken(GQLParser.AGGREGATES, 0);
	};

	ALTER() {
	    return this.getToken(GQLParser.ALTER, 0);
	};

	CATALOG() {
	    return this.getToken(GQLParser.CATALOG, 0);
	};

	CLEAR() {
	    return this.getToken(GQLParser.CLEAR, 0);
	};

	CLONE() {
	    return this.getToken(GQLParser.CLONE, 0);
	};

	CONSTRAINT() {
	    return this.getToken(GQLParser.CONSTRAINT, 0);
	};

	CURRENT_ROLE() {
	    return this.getToken(GQLParser.CURRENT_ROLE, 0);
	};

	DATA() {
	    return this.getToken(GQLParser.DATA, 0);
	};

	DIRECTORY() {
	    return this.getToken(GQLParser.DIRECTORY, 0);
	};

	EXACT() {
	    return this.getToken(GQLParser.EXACT, 0);
	};

	EXISTING() {
	    return this.getToken(GQLParser.EXISTING, 0);
	};

	FUNCTION() {
	    return this.getToken(GQLParser.FUNCTION, 0);
	};

	GQLSTATUS() {
	    return this.getToken(GQLParser.GQLSTATUS, 0);
	};

	GRANT() {
	    return this.getToken(GQLParser.GRANT, 0);
	};

	INSTANT() {
	    return this.getToken(GQLParser.INSTANT, 0);
	};

	LEFT() {
	    return this.getToken(GQLParser.LEFT, 0);
	};

	NOTHING() {
	    return this.getToken(GQLParser.NOTHING, 0);
	};

	NUMERIC() {
	    return this.getToken(GQLParser.NUMERIC, 0);
	};

	ON() {
	    return this.getToken(GQLParser.ON, 0);
	};

	PARTITION() {
	    return this.getToken(GQLParser.PARTITION, 0);
	};

	PROCEDURE() {
	    return this.getToken(GQLParser.PROCEDURE, 0);
	};

	PRODUCT() {
	    return this.getToken(GQLParser.PRODUCT, 0);
	};

	PROJECT() {
	    return this.getToken(GQLParser.PROJECT, 0);
	};

	QUERY() {
	    return this.getToken(GQLParser.QUERY, 0);
	};

	RECORDS() {
	    return this.getToken(GQLParser.RECORDS, 0);
	};

	REFERENCE() {
	    return this.getToken(GQLParser.REFERENCE, 0);
	};

	RENAME() {
	    return this.getToken(GQLParser.RENAME, 0);
	};

	REVOKE() {
	    return this.getToken(GQLParser.REVOKE, 0);
	};

	RIGHT() {
	    return this.getToken(GQLParser.RIGHT, 0);
	};

	SUBSTRING() {
	    return this.getToken(GQLParser.SUBSTRING, 0);
	};

	TEMPORAL() {
	    return this.getToken(GQLParser.TEMPORAL, 0);
	};

	UNIQUE() {
	    return this.getToken(GQLParser.UNIQUE, 0);
	};

	UNIT() {
	    return this.getToken(GQLParser.UNIT, 0);
	};

	VALUES() {
	    return this.getToken(GQLParser.VALUES, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterPreReservedWord(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitPreReservedWord(this);
		}
	}


}



class NonReservedWordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_nonReservedWord;
    }

	ACYCLIC() {
	    return this.getToken(GQLParser.ACYCLIC, 0);
	};

	BINDING() {
	    return this.getToken(GQLParser.BINDING, 0);
	};

	BINDINGS() {
	    return this.getToken(GQLParser.BINDINGS, 0);
	};

	CONNECTING() {
	    return this.getToken(GQLParser.CONNECTING, 0);
	};

	DESTINATION() {
	    return this.getToken(GQLParser.DESTINATION, 0);
	};

	DIFFERENT() {
	    return this.getToken(GQLParser.DIFFERENT, 0);
	};

	DIRECTED() {
	    return this.getToken(GQLParser.DIRECTED, 0);
	};

	EDGE() {
	    return this.getToken(GQLParser.EDGE, 0);
	};

	EDGES() {
	    return this.getToken(GQLParser.EDGES, 0);
	};

	ELEMENT() {
	    return this.getToken(GQLParser.ELEMENT, 0);
	};

	ELEMENTS() {
	    return this.getToken(GQLParser.ELEMENTS, 0);
	};

	FIRST() {
	    return this.getToken(GQLParser.FIRST, 0);
	};

	GRAPH() {
	    return this.getToken(GQLParser.GRAPH, 0);
	};

	GROUPS() {
	    return this.getToken(GQLParser.GROUPS, 0);
	};

	KEEP() {
	    return this.getToken(GQLParser.KEEP, 0);
	};

	LABEL() {
	    return this.getToken(GQLParser.LABEL, 0);
	};

	LABELED() {
	    return this.getToken(GQLParser.LABELED, 0);
	};

	LABELS() {
	    return this.getToken(GQLParser.LABELS, 0);
	};

	LAST() {
	    return this.getToken(GQLParser.LAST, 0);
	};

	NFC() {
	    return this.getToken(GQLParser.NFC, 0);
	};

	NFD() {
	    return this.getToken(GQLParser.NFD, 0);
	};

	NFKC() {
	    return this.getToken(GQLParser.NFKC, 0);
	};

	NFKD() {
	    return this.getToken(GQLParser.NFKD, 0);
	};

	NO() {
	    return this.getToken(GQLParser.NO, 0);
	};

	NODE() {
	    return this.getToken(GQLParser.NODE, 0);
	};

	NORMALIZED() {
	    return this.getToken(GQLParser.NORMALIZED, 0);
	};

	ONLY() {
	    return this.getToken(GQLParser.ONLY, 0);
	};

	ORDINALITY() {
	    return this.getToken(GQLParser.ORDINALITY, 0);
	};

	PROPERTY() {
	    return this.getToken(GQLParser.PROPERTY, 0);
	};

	READ() {
	    return this.getToken(GQLParser.READ, 0);
	};

	RELATIONSHIP() {
	    return this.getToken(GQLParser.RELATIONSHIP, 0);
	};

	RELATIONSHIPS() {
	    return this.getToken(GQLParser.RELATIONSHIPS, 0);
	};

	REPEATABLE() {
	    return this.getToken(GQLParser.REPEATABLE, 0);
	};

	SHORTEST() {
	    return this.getToken(GQLParser.SHORTEST, 0);
	};

	SIMPLE() {
	    return this.getToken(GQLParser.SIMPLE, 0);
	};

	SOURCE() {
	    return this.getToken(GQLParser.SOURCE, 0);
	};

	TABLE() {
	    return this.getToken(GQLParser.TABLE, 0);
	};

	TEMP() {
	    return this.getToken(GQLParser.TEMP, 0);
	};

	TIMEZONE() {
	    return this.getToken(GQLParser.TIMEZONE, 0);
	};

	TO() {
	    return this.getToken(GQLParser.TO, 0);
	};

	TRAIL() {
	    return this.getToken(GQLParser.TRAIL, 0);
	};

	TRANSACTION() {
	    return this.getToken(GQLParser.TRANSACTION, 0);
	};

	TYPE() {
	    return this.getToken(GQLParser.TYPE, 0);
	};

	UNDIRECTED() {
	    return this.getToken(GQLParser.UNDIRECTED, 0);
	};

	VERTEX() {
	    return this.getToken(GQLParser.VERTEX, 0);
	};

	WALK() {
	    return this.getToken(GQLParser.WALK, 0);
	};

	WITHOUT() {
	    return this.getToken(GQLParser.WITHOUT, 0);
	};

	WRITE() {
	    return this.getToken(GQLParser.WRITE, 0);
	};

	ZONE() {
	    return this.getToken(GQLParser.ZONE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterNonReservedWord(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitNonReservedWord(this);
		}
	}


}



class DelimiterTokenContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_delimiterToken;
    }

	GQL_SPECIAL_CHAR() {
	    return this.getToken(GQLParser.GQL_SPECIAL_CHAR, 0);
	};

	characterStringLiteral() {
	    return this.getTypedRuleContext(CharacterStringLiteralContext,0);
	};

	dateString() {
	    return this.getTypedRuleContext(DateStringContext,0);
	};

	dateTimeString() {
	    return this.getTypedRuleContext(DateTimeStringContext,0);
	};

	delimitedIdentifier() {
	    return this.getTypedRuleContext(DelimitedIdentifierContext,0);
	};

	durationString() {
	    return this.getTypedRuleContext(DurationStringContext,0);
	};

	timeString() {
	    return this.getTypedRuleContext(TimeStringContext,0);
	};

	CONCATENATION() {
	    return this.getToken(GQLParser.CONCATENATION, 0);
	};

	DOUBLE_COLON() {
	    return this.getToken(GQLParser.DOUBLE_COLON, 0);
	};

	DOUBLE_MINUS() {
	    return this.getToken(GQLParser.DOUBLE_MINUS, 0);
	};

	DOUBLE_PERIOD() {
	    return this.getToken(GQLParser.DOUBLE_PERIOD, 0);
	};

	notEquals() {
	    return this.getTypedRuleContext(NotEqualsContext,0);
	};

	lessThen() {
	    return this.getTypedRuleContext(LessThenContext,0);
	};

	graterThanOrEquals() {
	    return this.getTypedRuleContext(GraterThanOrEqualsContext,0);
	};

	lessThanOrEquals() {
	    return this.getTypedRuleContext(LessThanOrEqualsContext,0);
	};

	LEFT_ARROW() {
	    return this.getToken(GQLParser.LEFT_ARROW, 0);
	};

	LEFT_ARROW_TILDE() {
	    return this.getToken(GQLParser.LEFT_ARROW_TILDE, 0);
	};

	LEFT_ARROW_BRACKET() {
	    return this.getToken(GQLParser.LEFT_ARROW_BRACKET, 0);
	};

	LEFT_ARROW_TILDE_BRACKET() {
	    return this.getToken(GQLParser.LEFT_ARROW_TILDE_BRACKET, 0);
	};

	LEFT_MINUS_RIGHT() {
	    return this.getToken(GQLParser.LEFT_MINUS_RIGHT, 0);
	};

	LEFT_MINUS_SLASH() {
	    return this.getToken(GQLParser.LEFT_MINUS_SLASH, 0);
	};

	LEFT_TILDE_SLASH() {
	    return this.getToken(GQLParser.LEFT_TILDE_SLASH, 0);
	};

	MINUS_LEFT_BRACKET() {
	    return this.getToken(GQLParser.MINUS_LEFT_BRACKET, 0);
	};

	MINUS_SLASH() {
	    return this.getToken(GQLParser.MINUS_SLASH, 0);
	};

	RIGHT_ARROW() {
	    return this.getToken(GQLParser.RIGHT_ARROW, 0);
	};

	RIGHT_BRACKET_MINUS() {
	    return this.getToken(GQLParser.RIGHT_BRACKET_MINUS, 0);
	};

	RIGHT_BRACKET_TILDE() {
	    return this.getToken(GQLParser.RIGHT_BRACKET_TILDE, 0);
	};

	BRACKET_RIGHT_ARROW() {
	    return this.getToken(GQLParser.BRACKET_RIGHT_ARROW, 0);
	};

	BRACKET_TILDE_RIGHT_ARROW() {
	    return this.getToken(GQLParser.BRACKET_TILDE_RIGHT_ARROW, 0);
	};

	SLASH_MINUS() {
	    return this.getToken(GQLParser.SLASH_MINUS, 0);
	};

	SLASH_MINUS_RIGHT() {
	    return this.getToken(GQLParser.SLASH_MINUS_RIGHT, 0);
	};

	SLASH_TILDE() {
	    return this.getToken(GQLParser.SLASH_TILDE, 0);
	};

	SLASH_TILDE_RIGHT() {
	    return this.getToken(GQLParser.SLASH_TILDE_RIGHT, 0);
	};

	TILDE_LEFT_BRACKET() {
	    return this.getToken(GQLParser.TILDE_LEFT_BRACKET, 0);
	};

	TILDE_RIGHT_ARROW() {
	    return this.getToken(GQLParser.TILDE_RIGHT_ARROW, 0);
	};

	TILDE_SLASH() {
	    return this.getToken(GQLParser.TILDE_SLASH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterDelimiterToken(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitDelimiterToken(this);
		}
	}


}



class EdgeSynonymContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_edgeSynonym;
    }

	EDGE() {
	    return this.getToken(GQLParser.EDGE, 0);
	};

	RELATIONSHIP() {
	    return this.getToken(GQLParser.RELATIONSHIP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterEdgeSynonym(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitEdgeSynonym(this);
		}
	}


}



class EdgesSynonymContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_edgesSynonym;
    }

	EDGES() {
	    return this.getToken(GQLParser.EDGES, 0);
	};

	RELATIONSHIPS() {
	    return this.getToken(GQLParser.RELATIONSHIPS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterEdgesSynonym(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitEdgesSynonym(this);
		}
	}


}



class NodeSynonymContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_nodeSynonym;
    }

	NODE() {
	    return this.getToken(GQLParser.NODE, 0);
	};

	VERTEX() {
	    return this.getToken(GQLParser.VERTEX, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterNodeSynonym(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitNodeSynonym(this);
		}
	}


}




GQLParser.GqlProgramContext = GqlProgramContext; 
GQLParser.ActivityContext = ActivityContext; 
GQLParser.ProgramActivityContext = ProgramActivityContext; 
GQLParser.SessionActivityContext = SessionActivityContext; 
GQLParser.SessionSetCommandContext = SessionSetCommandContext; 
GQLParser.SessionSetSchemaClauseContext = SessionSetSchemaClauseContext; 
GQLParser.SessionSetGraphClauseContext = SessionSetGraphClauseContext; 
GQLParser.SessionSetTimeZoneClauseContext = SessionSetTimeZoneClauseContext; 
GQLParser.SetTimeZoneValueContext = SetTimeZoneValueContext; 
GQLParser.SessionSetParameterClauseContext = SessionSetParameterClauseContext; 
GQLParser.SessionSetGraphParameterClauseContext = SessionSetGraphParameterClauseContext; 
GQLParser.SessionSetBindingTableParameterCaluesContext = SessionSetBindingTableParameterCaluesContext; 
GQLParser.SessionSetValuesParameterClauseContext = SessionSetValuesParameterClauseContext; 
GQLParser.SessionSetParameterNameContext = SessionSetParameterNameContext; 
GQLParser.SessionResetCommandContext = SessionResetCommandContext; 
GQLParser.SessionResetArgumentsContext = SessionResetArgumentsContext; 
GQLParser.SessionCloseCommandContext = SessionCloseCommandContext; 
GQLParser.TransactionActivityContext = TransactionActivityContext; 
GQLParser.TransactionStartCommandContext = TransactionStartCommandContext; 
GQLParser.TransactionEndCommandContext = TransactionEndCommandContext; 
GQLParser.TransactionCharacteristicsContext = TransactionCharacteristicsContext; 
GQLParser.TransactionModeContext = TransactionModeContext; 
GQLParser.TransactionAccessModeContext = TransactionAccessModeContext; 
GQLParser.ImplDefinedAccessModeContext = ImplDefinedAccessModeContext; 
GQLParser.NestedProcedureSpecContext = NestedProcedureSpecContext; 
GQLParser.ProcedureSpecContext = ProcedureSpecContext; 
GQLParser.NestedDataModProcedureSpecContext = NestedDataModProcedureSpecContext; 
GQLParser.NestedQuerySpecContext = NestedQuerySpecContext; 
GQLParser.ProcedureBodyContext = ProcedureBodyContext; 
GQLParser.BindingVarDefBlockContext = BindingVarDefBlockContext; 
GQLParser.BindingVarDefContext = BindingVarDefContext; 
GQLParser.StatmentBlockContext = StatmentBlockContext; 
GQLParser.StatementContext = StatementContext; 
GQLParser.NextStatmentContext = NextStatmentContext; 
GQLParser.GraphVarDefContext = GraphVarDefContext; 
GQLParser.OptTypedGraphInitContext = OptTypedGraphInitContext; 
GQLParser.GraphInitContext = GraphInitContext; 
GQLParser.BindingTableVarDefContext = BindingTableVarDefContext; 
GQLParser.OptTypedBindingTableInitContext = OptTypedBindingTableInitContext; 
GQLParser.BindingTableInitContext = BindingTableInitContext; 
GQLParser.ValueVarDefContext = ValueVarDefContext; 
GQLParser.OptTypedValueInitContext = OptTypedValueInitContext; 
GQLParser.ValueInitContext = ValueInitContext; 
GQLParser.GraphExprContext = GraphExprContext; 
GQLParser.CurrentGraphContext = CurrentGraphContext; 
GQLParser.NestedGraphQuerySpecContext = NestedGraphQuerySpecContext; 
GQLParser.BindingTableExprContext = BindingTableExprContext; 
GQLParser.NestedBindingTableQuerySpecContext = NestedBindingTableQuerySpecContext; 
GQLParser.ObjectExprPrimaryContext = ObjectExprPrimaryContext; 
GQLParser.LinearCatalogModStatmentContext = LinearCatalogModStatmentContext; 
GQLParser.SimpleCatalogModStatmentContext = SimpleCatalogModStatmentContext; 
GQLParser.PrimitiveCatalogModStatmentContext = PrimitiveCatalogModStatmentContext; 
GQLParser.CreateSchemeStatmentContext = CreateSchemeStatmentContext; 
GQLParser.DropSchemeStatmentContext = DropSchemeStatmentContext; 
GQLParser.CreateGraphStatmentContext = CreateGraphStatmentContext; 
GQLParser.CreateOnlyGraphStatmentContext = CreateOnlyGraphStatmentContext; 
GQLParser.CreateOrReplaceGraphStatmentContext = CreateOrReplaceGraphStatmentContext; 
GQLParser.OpenGraphTypeContext = OpenGraphTypeContext; 
GQLParser.OfGraphTypeContext = OfGraphTypeContext; 
GQLParser.GraphTypeLikeGraphContext = GraphTypeLikeGraphContext; 
GQLParser.GraphSourceContext = GraphSourceContext; 
GQLParser.DropGraphStatmentContext = DropGraphStatmentContext; 
GQLParser.CreateGraphTypeStatmentContext = CreateGraphTypeStatmentContext; 
GQLParser.GraphTypeSourceContext = GraphTypeSourceContext; 
GQLParser.CopyOfGraphTypeContext = CopyOfGraphTypeContext; 
GQLParser.DropGraphTypeStatmentContext = DropGraphTypeStatmentContext; 
GQLParser.CallCatalogModProcedureStatmentContext = CallCatalogModProcedureStatmentContext; 
GQLParser.LinearDataModStatmentContext = LinearDataModStatmentContext; 
GQLParser.FocusedLinearDataModStatmentContext = FocusedLinearDataModStatmentContext; 
GQLParser.FocusedLinearDataModStatmentBodyContext = FocusedLinearDataModStatmentBodyContext; 
GQLParser.FocusedNestedDataModProcedureSpecContext = FocusedNestedDataModProcedureSpecContext; 
GQLParser.AmbientLinearDataModStatmentContext = AmbientLinearDataModStatmentContext; 
GQLParser.AmbientLinearDataModStatmentBodyContext = AmbientLinearDataModStatmentBodyContext; 
GQLParser.SimpleLinearDataAccessingStatmentContext = SimpleLinearDataAccessingStatmentContext; 
GQLParser.SimpleDataAccessingStatmentContext = SimpleDataAccessingStatmentContext; 
GQLParser.SimpleDataModStatmentContext = SimpleDataModStatmentContext; 
GQLParser.PrimitiveDataModStatmentContext = PrimitiveDataModStatmentContext; 
GQLParser.InsertStatmentContext = InsertStatmentContext; 
GQLParser.SetStatmentContext = SetStatmentContext; 
GQLParser.SetItemListContext = SetItemListContext; 
GQLParser.SetItemContext = SetItemContext; 
GQLParser.SetPropertyItemContext = SetPropertyItemContext; 
GQLParser.SetAllPropertiesItemContext = SetAllPropertiesItemContext; 
GQLParser.SetLabelItemContext = SetLabelItemContext; 
GQLParser.LabelSetSpecContext = LabelSetSpecContext; 
GQLParser.RemoveStatmentContext = RemoveStatmentContext; 
GQLParser.RemoveItemListContext = RemoveItemListContext; 
GQLParser.RemoveItemContext = RemoveItemContext; 
GQLParser.RemovePropertyItemContext = RemovePropertyItemContext; 
GQLParser.RemoveLabelItemContext = RemoveLabelItemContext; 
GQLParser.DeleteStatmentContext = DeleteStatmentContext; 
GQLParser.DeleteItemListContext = DeleteItemListContext; 
GQLParser.DeleteItemContext = DeleteItemContext; 
GQLParser.CallDataModProcedureStatmentContext = CallDataModProcedureStatmentContext; 
GQLParser.CompositeQueryStatmentContext = CompositeQueryStatmentContext; 
GQLParser.CompositeQueryExprContext = CompositeQueryExprContext; 
GQLParser.QueryConjunctionContext = QueryConjunctionContext; 
GQLParser.SetOperatorContext = SetOperatorContext; 
GQLParser.CompositeQueryPrimaryContext = CompositeQueryPrimaryContext; 
GQLParser.LinearQueryStatmentContext = LinearQueryStatmentContext; 
GQLParser.FocusedLinearQueryStatmentContext = FocusedLinearQueryStatmentContext; 
GQLParser.FocusedLinearQueryStatmentPartContext = FocusedLinearQueryStatmentPartContext; 
GQLParser.FocusedLinearQueryAndPrimitiveResultStatmentPartContext = FocusedLinearQueryAndPrimitiveResultStatmentPartContext; 
GQLParser.FocusedPrimitiveResultStatmentContext = FocusedPrimitiveResultStatmentContext; 
GQLParser.FocusedNestedQuerySpecContext = FocusedNestedQuerySpecContext; 
GQLParser.AmbientLinearQueryStatmentContext = AmbientLinearQueryStatmentContext; 
GQLParser.SimpleLinearQueryStatmentContext = SimpleLinearQueryStatmentContext; 
GQLParser.SimpleQueryStatmentContext = SimpleQueryStatmentContext; 
GQLParser.PrimitiveQueryStatmentContext = PrimitiveQueryStatmentContext; 
GQLParser.MatchStatmentContext = MatchStatmentContext; 
GQLParser.SimpleMatchStatmentContext = SimpleMatchStatmentContext; 
GQLParser.OptionalMatchStatmentContext = OptionalMatchStatmentContext; 
GQLParser.OptionalOperandContext = OptionalOperandContext; 
GQLParser.MatchStatmentBlockContext = MatchStatmentBlockContext; 
GQLParser.CallQueryStatmentContext = CallQueryStatmentContext; 
GQLParser.FilterStatmentContext = FilterStatmentContext; 
GQLParser.LetStatmentContext = LetStatmentContext; 
GQLParser.LetVarDefListContext = LetVarDefListContext; 
GQLParser.LetVarDefContext = LetVarDefContext; 
GQLParser.ForStatmentContext = ForStatmentContext; 
GQLParser.ForItemContext = ForItemContext; 
GQLParser.ForItemAliasContext = ForItemAliasContext; 
GQLParser.ForOrdinalityOrOffsetContext = ForOrdinalityOrOffsetContext; 
GQLParser.OrderByAndPageStatmentContext = OrderByAndPageStatmentContext; 
GQLParser.PrimitiveResultStatmentContext = PrimitiveResultStatmentContext; 
GQLParser.ReturnStatmentContext = ReturnStatmentContext; 
GQLParser.ReturnStatmentBodyContext = ReturnStatmentBodyContext; 
GQLParser.ReturnItemListContext = ReturnItemListContext; 
GQLParser.ReturnItemContext = ReturnItemContext; 
GQLParser.ReturnItemAliasContext = ReturnItemAliasContext; 
GQLParser.SelectStatmentContext = SelectStatmentContext; 
GQLParser.SelectItemListContext = SelectItemListContext; 
GQLParser.SelectItemContext = SelectItemContext; 
GQLParser.SelectItemAliasContext = SelectItemAliasContext; 
GQLParser.HavingClauseContext = HavingClauseContext; 
GQLParser.SelectStatmentBodyContext = SelectStatmentBodyContext; 
GQLParser.SelectGraphMatchListContext = SelectGraphMatchListContext; 
GQLParser.SelectGraphMatchContext = SelectGraphMatchContext; 
GQLParser.SelectQuerySpecContext = SelectQuerySpecContext; 
GQLParser.CallProcedureStatmentContext = CallProcedureStatmentContext; 
GQLParser.ProcedureCallContext = ProcedureCallContext; 
GQLParser.InlineProcedureCallContext = InlineProcedureCallContext; 
GQLParser.VarScopeClauseContext = VarScopeClauseContext; 
GQLParser.BindingVarRefListContext = BindingVarRefListContext; 
GQLParser.NamedProcedureCallContext = NamedProcedureCallContext; 
GQLParser.ProcedureArgListContext = ProcedureArgListContext; 
GQLParser.ProcedureArgContext = ProcedureArgContext; 
GQLParser.UseGraphClauseContext = UseGraphClauseContext; 
GQLParser.AtSchemaClauseContext = AtSchemaClauseContext; 
GQLParser.BindingVarRefContext = BindingVarRefContext; 
GQLParser.ElementVarRefContext = ElementVarRefContext; 
GQLParser.PathVarRefContext = PathVarRefContext; 
GQLParser.ParameterContext = ParameterContext; 
GQLParser.GraphPatternBindingTableContext = GraphPatternBindingTableContext; 
GQLParser.GraphPatternYieldClauseContext = GraphPatternYieldClauseContext; 
GQLParser.GraphPatternYieldItemListContext = GraphPatternYieldItemListContext; 
GQLParser.GraphPatternYieldItemContext = GraphPatternYieldItemContext; 
GQLParser.GraphPatternContext = GraphPatternContext; 
GQLParser.MatchModeContext = MatchModeContext; 
GQLParser.RepeatableElementsMatchModeContext = RepeatableElementsMatchModeContext; 
GQLParser.DifferentEdgesMatchModeContext = DifferentEdgesMatchModeContext; 
GQLParser.ElementBindingsOrElementsContext = ElementBindingsOrElementsContext; 
GQLParser.EdgeBindingsOrEdgesContext = EdgeBindingsOrEdgesContext; 
GQLParser.PathPatternListContext = PathPatternListContext; 
GQLParser.PathPatternContext = PathPatternContext; 
GQLParser.PathVarDeclarationContext = PathVarDeclarationContext; 
GQLParser.KeepClauseContext = KeepClauseContext; 
GQLParser.GraphPatternWhereClauseContext = GraphPatternWhereClauseContext; 
GQLParser.PathPatternPrefixContext = PathPatternPrefixContext; 
GQLParser.PathModePrefixContext = PathModePrefixContext; 
GQLParser.PathModeContext = PathModeContext; 
GQLParser.PathSearchPrefixContext = PathSearchPrefixContext; 
GQLParser.AllPathSearchContext = AllPathSearchContext; 
GQLParser.PathOrPathsContext = PathOrPathsContext; 
GQLParser.AnyPathSearchContext = AnyPathSearchContext; 
GQLParser.NumberOfPathsContext = NumberOfPathsContext; 
GQLParser.ShortestPathSearchContext = ShortestPathSearchContext; 
GQLParser.AllShortestPathSearchContext = AllShortestPathSearchContext; 
GQLParser.AnyShortestPathSearchContext = AnyShortestPathSearchContext; 
GQLParser.CountedShortestPathSearchContext = CountedShortestPathSearchContext; 
GQLParser.CountedShortestGroupSearchContext = CountedShortestGroupSearchContext; 
GQLParser.GroupOrGroupsContext = GroupOrGroupsContext; 
GQLParser.NumberOfGroupsContext = NumberOfGroupsContext; 
GQLParser.PathPatternExprContext = PathPatternExprContext; 
GQLParser.PathMultisetAlternationContext = PathMultisetAlternationContext; 
GQLParser.PathPatternUnionContext = PathPatternUnionContext; 
GQLParser.PathTermContext = PathTermContext; 
GQLParser.PathFactorContext = PathFactorContext; 
GQLParser.QuantifiedPathPrimaryContext = QuantifiedPathPrimaryContext; 
GQLParser.QuestionedPathPrimaryContext = QuestionedPathPrimaryContext; 
GQLParser.PathPrimaryContext = PathPrimaryContext; 
GQLParser.ElementPatternContext = ElementPatternContext; 
GQLParser.NodePatternContext = NodePatternContext; 
GQLParser.ElementPatternFillerContext = ElementPatternFillerContext; 
GQLParser.ElementVarDeclarationContext = ElementVarDeclarationContext; 
GQLParser.IsLabelExprContext = IsLabelExprContext; 
GQLParser.IsOrColonContext = IsOrColonContext; 
GQLParser.ElementPatternPredicateContext = ElementPatternPredicateContext; 
GQLParser.ElementPatternWhereClauseContext = ElementPatternWhereClauseContext; 
GQLParser.ElementPropertySpecContext = ElementPropertySpecContext; 
GQLParser.PropertyKeyValuePairListContext = PropertyKeyValuePairListContext; 
GQLParser.PropertyKeyValuePairContext = PropertyKeyValuePairContext; 
GQLParser.EdgePatternContext = EdgePatternContext; 
GQLParser.FullEdgePatternContext = FullEdgePatternContext; 
GQLParser.FullEdgePointingLeftContext = FullEdgePointingLeftContext; 
GQLParser.FullEdgeUndirectedContext = FullEdgeUndirectedContext; 
GQLParser.FullEdgePointingRightContext = FullEdgePointingRightContext; 
GQLParser.FullEdgeLeftOrUndirectedContext = FullEdgeLeftOrUndirectedContext; 
GQLParser.FullEdgeUndirectedOrRightContext = FullEdgeUndirectedOrRightContext; 
GQLParser.FullEdgeLeftOrRightContext = FullEdgeLeftOrRightContext; 
GQLParser.FullEdgeAnyDirectionContext = FullEdgeAnyDirectionContext; 
GQLParser.AbbreviatedEdgePatternContext = AbbreviatedEdgePatternContext; 
GQLParser.ParenthesizedPathPatternExprContext = ParenthesizedPathPatternExprContext; 
GQLParser.SubpathVarDeclarationContext = SubpathVarDeclarationContext; 
GQLParser.ParenthesizedPathPatternWhereClauseContext = ParenthesizedPathPatternWhereClauseContext; 
GQLParser.InsertGraphPatternContext = InsertGraphPatternContext; 
GQLParser.InsertGraphPatternListContext = InsertGraphPatternListContext; 
GQLParser.InsertPathPatternContext = InsertPathPatternContext; 
GQLParser.InsertNodePatternContext = InsertNodePatternContext; 
GQLParser.InsertEdgePatternContext = InsertEdgePatternContext; 
GQLParser.InsertEdgePointingLeftContext = InsertEdgePointingLeftContext; 
GQLParser.InsertEdgePointingRightContext = InsertEdgePointingRightContext; 
GQLParser.InsertEdgeUndirectedContext = InsertEdgeUndirectedContext; 
GQLParser.InsertElementPatternFillerContext = InsertElementPatternFillerContext; 
GQLParser.LabelAndPropertySetSpecContext = LabelAndPropertySetSpecContext; 
GQLParser.LabelExprContext = LabelExprContext; 
GQLParser.LabelTermContext = LabelTermContext; 
GQLParser.LabelFactorContext = LabelFactorContext; 
GQLParser.LabelNegationContext = LabelNegationContext; 
GQLParser.LabelPrimaryContext = LabelPrimaryContext; 
GQLParser.WildcardLabelContext = WildcardLabelContext; 
GQLParser.ParenthesizedLabelExprContext = ParenthesizedLabelExprContext; 
GQLParser.GraphPatternQuantifierContext = GraphPatternQuantifierContext; 
GQLParser.FixedQuantifierContext = FixedQuantifierContext; 
GQLParser.GeneralQuantifierContext = GeneralQuantifierContext; 
GQLParser.LowerBoundContext = LowerBoundContext; 
GQLParser.UpperBoundContext = UpperBoundContext; 
GQLParser.SimplifiedPathPatternExprContext = SimplifiedPathPatternExprContext; 
GQLParser.SimplifiedDefaultingLeftContext = SimplifiedDefaultingLeftContext; 
GQLParser.SimplifiedDefaultingUndirectedContext = SimplifiedDefaultingUndirectedContext; 
GQLParser.SimplifiedDefaultingRightContext = SimplifiedDefaultingRightContext; 
GQLParser.SimplifiedDefaultingLeftOrUndirectedContext = SimplifiedDefaultingLeftOrUndirectedContext; 
GQLParser.SimplifiedDefaultingUndirectedOrRightContext = SimplifiedDefaultingUndirectedOrRightContext; 
GQLParser.SimplifiedDefaultingLeftOrRightContext = SimplifiedDefaultingLeftOrRightContext; 
GQLParser.SimplifiedDefaultingAnyDirectionContext = SimplifiedDefaultingAnyDirectionContext; 
GQLParser.SimplifiedContentsContext = SimplifiedContentsContext; 
GQLParser.SimplifiedPathUnionContext = SimplifiedPathUnionContext; 
GQLParser.SimplifiedMultisetAlternationContext = SimplifiedMultisetAlternationContext; 
GQLParser.SimplifiedTermContext = SimplifiedTermContext; 
GQLParser.SimplifiedFactorLowContext = SimplifiedFactorLowContext; 
GQLParser.SimplifiedFactorHighContext = SimplifiedFactorHighContext; 
GQLParser.SimplifiedQuntifiedContext = SimplifiedQuntifiedContext; 
GQLParser.SimplifiedQuestionedContext = SimplifiedQuestionedContext; 
GQLParser.SimplifiedTertiaryContext = SimplifiedTertiaryContext; 
GQLParser.SimplifiedDirectionOverrideContext = SimplifiedDirectionOverrideContext; 
GQLParser.SimplifiedOverrideLeftContext = SimplifiedOverrideLeftContext; 
GQLParser.SimplifiedOverrideUndirectedContext = SimplifiedOverrideUndirectedContext; 
GQLParser.SimplifiedOverrideRightContext = SimplifiedOverrideRightContext; 
GQLParser.SimplifiedOverrideLeftOrUndirectedContext = SimplifiedOverrideLeftOrUndirectedContext; 
GQLParser.SimplifiedOverrideUndirectedOrRightContext = SimplifiedOverrideUndirectedOrRightContext; 
GQLParser.SimplifiedOverrideLeftOrRightContext = SimplifiedOverrideLeftOrRightContext; 
GQLParser.SimplifiedOverrideAnyDirectionContext = SimplifiedOverrideAnyDirectionContext; 
GQLParser.SimplifiedSecondaryContext = SimplifiedSecondaryContext; 
GQLParser.SimplifiedNegationContext = SimplifiedNegationContext; 
GQLParser.SimplifiedPrimaryContext = SimplifiedPrimaryContext; 
GQLParser.WhereClauseContext = WhereClauseContext; 
GQLParser.YieldClauseContext = YieldClauseContext; 
GQLParser.YieldItemListContext = YieldItemListContext; 
GQLParser.YieldItemContext = YieldItemContext; 
GQLParser.YieldItemNameContext = YieldItemNameContext; 
GQLParser.YieldItemAliasContext = YieldItemAliasContext; 
GQLParser.GroupByClauseContext = GroupByClauseContext; 
GQLParser.GroupingElementListContext = GroupingElementListContext; 
GQLParser.GroupingElementContext = GroupingElementContext; 
GQLParser.EmptyGroupingSetContext = EmptyGroupingSetContext; 
GQLParser.OrderByClauseContext = OrderByClauseContext; 
GQLParser.AggregateFunctionContext = AggregateFunctionContext; 
GQLParser.GeneralSetFunctionContext = GeneralSetFunctionContext; 
GQLParser.GeneralSetFunctionTypeContext = GeneralSetFunctionTypeContext; 
GQLParser.SetQuantifierContext = SetQuantifierContext; 
GQLParser.BinarySetFunctionContext = BinarySetFunctionContext; 
GQLParser.DependantValueExprContext = DependantValueExprContext; 
GQLParser.IndependentValueExprContext = IndependentValueExprContext; 
GQLParser.SortSpecListContext = SortSpecListContext; 
GQLParser.SortSpecContext = SortSpecContext; 
GQLParser.SortKeyContext = SortKeyContext; 
GQLParser.OrderingSpecContext = OrderingSpecContext; 
GQLParser.NullOrderingContext = NullOrderingContext; 
GQLParser.LimitClauseContext = LimitClauseContext; 
GQLParser.OffsetClauseContext = OffsetClauseContext; 
GQLParser.OffsetSynonymContext = OffsetSynonymContext; 
GQLParser.GraphTypeSpecContext = GraphTypeSpecContext; 
GQLParser.NestedGraphTypeSpecContext = NestedGraphTypeSpecContext; 
GQLParser.GraphTypeSpecBodyContext = GraphTypeSpecBodyContext; 
GQLParser.ElementTypeDefListContext = ElementTypeDefListContext; 
GQLParser.ElementTypeDefContext = ElementTypeDefContext; 
GQLParser.NodeTypeDefContext = NodeTypeDefContext; 
GQLParser.NodeTypePatternContext = NodeTypePatternContext; 
GQLParser.NodeTypePhraseContext = NodeTypePhraseContext; 
GQLParser.NodeTypeNameContext = NodeTypeNameContext; 
GQLParser.NodeTypeFillerContext = NodeTypeFillerContext; 
GQLParser.NodeTypeLabelSetDefContext = NodeTypeLabelSetDefContext; 
GQLParser.NodeTypePropertyTypeSetDefContext = NodeTypePropertyTypeSetDefContext; 
GQLParser.EdgeTypeDefContext = EdgeTypeDefContext; 
GQLParser.EdgeTypePatternContext = EdgeTypePatternContext; 
GQLParser.EdgeTypePhraseContext = EdgeTypePhraseContext; 
GQLParser.EdgeTypeNameContext = EdgeTypeNameContext; 
GQLParser.EdgeTypeFillerContext = EdgeTypeFillerContext; 
GQLParser.EdgeTypeLabelSetDefContext = EdgeTypeLabelSetDefContext; 
GQLParser.EdgeTypePropertyTypeSetDefContext = EdgeTypePropertyTypeSetDefContext; 
GQLParser.FullEdgeTypePatternContext = FullEdgeTypePatternContext; 
GQLParser.FullEdgeTypePatternPointingRightContext = FullEdgeTypePatternPointingRightContext; 
GQLParser.FullEdgeTypePatternPointingLeftContext = FullEdgeTypePatternPointingLeftContext; 
GQLParser.FullEdgeTypePatternUndirectedContext = FullEdgeTypePatternUndirectedContext; 
GQLParser.ArcTypePointingRightContext = ArcTypePointingRightContext; 
GQLParser.ArcTypePointingLeftContext = ArcTypePointingLeftContext; 
GQLParser.ArcTypeUndirectedContext = ArcTypeUndirectedContext; 
GQLParser.ArcTypeFillerContext = ArcTypeFillerContext; 
GQLParser.AbbreviatedEdgeTypePatternContext = AbbreviatedEdgeTypePatternContext; 
GQLParser.AbbreviatedEdgeTypePatternPointingRightContext = AbbreviatedEdgeTypePatternPointingRightContext; 
GQLParser.AbbreviatedEdgeTypePatternPointingLeftContext = AbbreviatedEdgeTypePatternPointingLeftContext; 
GQLParser.AbbreviatedEdgeTypePatternUndirectedContext = AbbreviatedEdgeTypePatternUndirectedContext; 
GQLParser.NodeTypeRefContext = NodeTypeRefContext; 
GQLParser.SourceNodeTypeRefContext = SourceNodeTypeRefContext; 
GQLParser.DestinationNodeTypeRefContext = DestinationNodeTypeRefContext; 
GQLParser.EdgeKindContext = EdgeKindContext; 
GQLParser.EndpointDefContext = EndpointDefContext; 
GQLParser.EnpointPairDefContext = EnpointPairDefContext; 
GQLParser.EndpointPairDefPointingRightContext = EndpointPairDefPointingRightContext; 
GQLParser.EndpointPairDefPointingLeftContext = EndpointPairDefPointingLeftContext; 
GQLParser.EndpointPairDefUndirectedContext = EndpointPairDefUndirectedContext; 
GQLParser.ConnectorPointingRightContext = ConnectorPointingRightContext; 
GQLParser.ConnectorPointingLeftContext = ConnectorPointingLeftContext; 
GQLParser.ConnectorUndirectedContext = ConnectorUndirectedContext; 
GQLParser.SourceNodeTypeNameContext = SourceNodeTypeNameContext; 
GQLParser.DestinationNodeTypeNameContext = DestinationNodeTypeNameContext; 
GQLParser.LabelSetDefContext = LabelSetDefContext; 
GQLParser.PropertyTypeSetDefContext = PropertyTypeSetDefContext; 
GQLParser.PropertyTypeDefListContext = PropertyTypeDefListContext; 
GQLParser.PropertyTypeDefContext = PropertyTypeDefContext; 
GQLParser.PropertyValueTypeContext = PropertyValueTypeContext; 
GQLParser.BindingTableTypeContext = BindingTableTypeContext; 
GQLParser.ValueTypeContext = ValueTypeContext; 
GQLParser.TypedContext = TypedContext; 
GQLParser.PredefinedTypeContext = PredefinedTypeContext; 
GQLParser.BooleanTypeContext = BooleanTypeContext; 
GQLParser.CharStringTypeContext = CharStringTypeContext; 
GQLParser.ByteStringTypeContext = ByteStringTypeContext; 
GQLParser.MinLengthContext = MinLengthContext; 
GQLParser.MaxLengthContext = MaxLengthContext; 
GQLParser.FixedLengthContext = FixedLengthContext; 
GQLParser.NumericTypeContext = NumericTypeContext; 
GQLParser.ExactNumericTypeContext = ExactNumericTypeContext; 
GQLParser.BinaryExactNumericTypeContext = BinaryExactNumericTypeContext; 
GQLParser.SignedBinaryExactNumericTypeContext = SignedBinaryExactNumericTypeContext; 
GQLParser.UnsignedBinaryExactNumericTypeContext = UnsignedBinaryExactNumericTypeContext; 
GQLParser.VerboseBinaryExactNumericTypeContext = VerboseBinaryExactNumericTypeContext; 
GQLParser.DecimalExactNumericTypeContext = DecimalExactNumericTypeContext; 
GQLParser.PrecisionContext = PrecisionContext; 
GQLParser.ScaleContext = ScaleContext; 
GQLParser.ApproximateNumericTypeContext = ApproximateNumericTypeContext; 
GQLParser.TemporalTypeContext = TemporalTypeContext; 
GQLParser.TemporalInstantTypeContext = TemporalInstantTypeContext; 
GQLParser.TemporalDurationTypeContext = TemporalDurationTypeContext; 
GQLParser.DateTimeTypeContext = DateTimeTypeContext; 
GQLParser.LocalDateTimeTypeContext = LocalDateTimeTypeContext; 
GQLParser.DateTypeContext = DateTypeContext; 
GQLParser.TimeTypeContext = TimeTypeContext; 
GQLParser.LocalTimeTypeContext = LocalTimeTypeContext; 
GQLParser.DurationTypeContext = DurationTypeContext; 
GQLParser.RefValueTypeContext = RefValueTypeContext; 
GQLParser.GraphRefValueTypeContext = GraphRefValueTypeContext; 
GQLParser.OpenGraphRefValueTypeContext = OpenGraphRefValueTypeContext; 
GQLParser.ClosedGraphRefValueTypeContext = ClosedGraphRefValueTypeContext; 
GQLParser.BindingTableRefValueTypeContext = BindingTableRefValueTypeContext; 
GQLParser.NodeRefValueTypeContext = NodeRefValueTypeContext; 
GQLParser.OpenNodeRefValueTypeContext = OpenNodeRefValueTypeContext; 
GQLParser.ClosedNodeRefValueTypeContext = ClosedNodeRefValueTypeContext; 
GQLParser.EdgeRefValueTypeContext = EdgeRefValueTypeContext; 
GQLParser.OpenEdgeRefValueTypeContext = OpenEdgeRefValueTypeContext; 
GQLParser.ClosedEdgeRefValueTypeContext = ClosedEdgeRefValueTypeContext; 
GQLParser.ConstructedTypeContext = ConstructedTypeContext; 
GQLParser.ListValueTypeContext = ListValueTypeContext; 
GQLParser.ListValueTypeNameContext = ListValueTypeNameContext; 
GQLParser.ListValueTypeNameSynonymContext = ListValueTypeNameSynonymContext; 
GQLParser.RecordTypeContext = RecordTypeContext; 
GQLParser.FieldTypesSpecContext = FieldTypesSpecContext; 
GQLParser.FieldTypeListContext = FieldTypeListContext; 
GQLParser.DynamicUnionTypeContext = DynamicUnionTypeContext; 
GQLParser.OpenDynamicUnionTypeContext = OpenDynamicUnionTypeContext; 
GQLParser.DynamicPropertyValueTypeContext = DynamicPropertyValueTypeContext; 
GQLParser.ClosedDynamicUnionTypeContext = ClosedDynamicUnionTypeContext; 
GQLParser.ComponentTypeListContext = ComponentTypeListContext; 
GQLParser.ComponentTypeContext = ComponentTypeContext; 
GQLParser.PathValueTypeContext = PathValueTypeContext; 
GQLParser.NotNullContext = NotNullContext; 
GQLParser.FieldTypeContext = FieldTypeContext; 
GQLParser.SchemaRefContext = SchemaRefContext; 
GQLParser.AbsoluteCatalogSchemaRefContext = AbsoluteCatalogSchemaRefContext; 
GQLParser.CatalogSchemaParentAndNameContext = CatalogSchemaParentAndNameContext; 
GQLParser.RelativeCatalogSchemaRefContext = RelativeCatalogSchemaRefContext; 
GQLParser.PredefinedSchemaRefContext = PredefinedSchemaRefContext; 
GQLParser.AbsoluteDirectoryPathContext = AbsoluteDirectoryPathContext; 
GQLParser.RelativeDirectoryPathContext = RelativeDirectoryPathContext; 
GQLParser.SimpleDirectoryPathContext = SimpleDirectoryPathContext; 
GQLParser.GraphRefContext = GraphRefContext; 
GQLParser.CatalogGraphParentAndNameContext = CatalogGraphParentAndNameContext; 
GQLParser.HomeGraphContext = HomeGraphContext; 
GQLParser.GraphTypeRefContext = GraphTypeRefContext; 
GQLParser.CatalogGraphTypeParentAndNameContext = CatalogGraphTypeParentAndNameContext; 
GQLParser.BindingTableRefContext = BindingTableRefContext; 
GQLParser.CatalogBindingTableParentAndNameContext = CatalogBindingTableParentAndNameContext; 
GQLParser.ProcedureRefContext = ProcedureRefContext; 
GQLParser.CatalogProcedureParentAndNameContext = CatalogProcedureParentAndNameContext; 
GQLParser.CatalogObjectParentRefContext = CatalogObjectParentRefContext; 
GQLParser.RefParameterContext = RefParameterContext; 
GQLParser.ExternalObjectRefContext = ExternalObjectRefContext; 
GQLParser.SearchConditionContext = SearchConditionContext; 
GQLParser.PredicateContext = PredicateContext; 
GQLParser.ComparisonPredicateContext = ComparisonPredicateContext; 
GQLParser.ComparisonPredicatePart2Context = ComparisonPredicatePart2Context; 
GQLParser.ComparisonOperatorContext = ComparisonOperatorContext; 
GQLParser.EqualsContext = EqualsContext; 
GQLParser.NotEqualsContext = NotEqualsContext; 
GQLParser.LessThenContext = LessThenContext; 
GQLParser.GreaterThanContext = GreaterThanContext; 
GQLParser.LessThanOrEqualsContext = LessThanOrEqualsContext; 
GQLParser.GraterThanOrEqualsContext = GraterThanOrEqualsContext; 
GQLParser.ComparisonPredicandContext = ComparisonPredicandContext; 
GQLParser.ExistsPredicateContext = ExistsPredicateContext; 
GQLParser.NullPredicateContext = NullPredicateContext; 
GQLParser.NullPredicatePart2Context = NullPredicatePart2Context; 
GQLParser.ValueTypePredicateContext = ValueTypePredicateContext; 
GQLParser.ValueTypePredicatePart2Context = ValueTypePredicatePart2Context; 
GQLParser.NormalizedPredicateContext = NormalizedPredicateContext; 
GQLParser.NormalizedPredicatePart2Context = NormalizedPredicatePart2Context; 
GQLParser.DirectedPredicateContext = DirectedPredicateContext; 
GQLParser.DirectedPredicatePart2Context = DirectedPredicatePart2Context; 
GQLParser.LabeledPredicateContext = LabeledPredicateContext; 
GQLParser.LabeledPredicatePart2Context = LabeledPredicatePart2Context; 
GQLParser.IsLabeledOrColonContext = IsLabeledOrColonContext; 
GQLParser.SourceOrDestinationPredicateContext = SourceOrDestinationPredicateContext; 
GQLParser.NodeRefContext = NodeRefContext; 
GQLParser.SourcePredicatePart2Context = SourcePredicatePart2Context; 
GQLParser.DestinationPredicatePart2Context = DestinationPredicatePart2Context; 
GQLParser.EdgeRefContext = EdgeRefContext; 
GQLParser.AllDifferentPredicateContext = AllDifferentPredicateContext; 
GQLParser.SamePredicateContext = SamePredicateContext; 
GQLParser.PropertyExistsPredicateContext = PropertyExistsPredicateContext; 
GQLParser.ValueSpecContext = ValueSpecContext; 
GQLParser.UnsignedValueSpecContext = UnsignedValueSpecContext; 
GQLParser.UnsignedIntSpecContext = UnsignedIntSpecContext; 
GQLParser.ParameterValueSpecContext = ParameterValueSpecContext; 
GQLParser.PredefinedParameterContext = PredefinedParameterContext; 
GQLParser.ValueExprContext = ValueExprContext; 
GQLParser.CommonValueExprContext = CommonValueExprContext; 
GQLParser.CommonValuePropertiesGroupContext = CommonValuePropertiesGroupContext; 
GQLParser.RefValueExprContext = RefValueExprContext; 
GQLParser.GraphRefValueExprContext = GraphRefValueExprContext; 
GQLParser.BindingTableRefValueExprContext = BindingTableRefValueExprContext; 
GQLParser.NodeRefValueExprContext = NodeRefValueExprContext; 
GQLParser.EdgeRefValueExprContext = EdgeRefValueExprContext; 
GQLParser.RecordValueExprContext = RecordValueExprContext; 
GQLParser.AggregatingValueExprContext = AggregatingValueExprContext; 
GQLParser.BooleanValueExprContext = BooleanValueExprContext; 
GQLParser.BooleanTermContext = BooleanTermContext; 
GQLParser.BooleanFactorContext = BooleanFactorContext; 
GQLParser.BooleanTestContext = BooleanTestContext; 
GQLParser.TruthValueContext = TruthValueContext; 
GQLParser.BooleanPrimaryContext = BooleanPrimaryContext; 
GQLParser.BooleanPredicandContext = BooleanPredicandContext; 
GQLParser.ParanthisedBooleanValueExprContext = ParanthisedBooleanValueExprContext; 
GQLParser.NumericValueExprContext = NumericValueExprContext; 
GQLParser.TermContext = TermContext; 
GQLParser.FactorContext = FactorContext; 
GQLParser.NumericPrimaryContext = NumericPrimaryContext; 
GQLParser.ValueExprPrimaryContext = ValueExprPrimaryContext; 
GQLParser.ParenthesizedValueExprContext = ParenthesizedValueExprContext; 
GQLParser.NonParenthesizedValueExprPrimaryContext = NonParenthesizedValueExprPrimaryContext; 
GQLParser.NonParenthesizedValueExprPrimarySpecialCaseContext = NonParenthesizedValueExprPrimarySpecialCaseContext; 
GQLParser.CollectionValueConstructorContext = CollectionValueConstructorContext; 
GQLParser.NumericValueFunctionContext = NumericValueFunctionContext; 
GQLParser.LengthExprContext = LengthExprContext; 
GQLParser.CharLengthExprContext = CharLengthExprContext; 
GQLParser.ByteLengthExprContext = ByteLengthExprContext; 
GQLParser.PathLengthExprContext = PathLengthExprContext; 
GQLParser.AbsoluteValueExprContext = AbsoluteValueExprContext; 
GQLParser.ModulusExprContext = ModulusExprContext; 
GQLParser.NumericValueExprDividenContext = NumericValueExprDividenContext; 
GQLParser.NumericValueExprDivisorContext = NumericValueExprDivisorContext; 
GQLParser.TrigonometricFunctionContext = TrigonometricFunctionContext; 
GQLParser.TrigonometricFunctionNameContext = TrigonometricFunctionNameContext; 
GQLParser.LogarithmFunctionContext = LogarithmFunctionContext; 
GQLParser.GeneralLogarithmFunctionContext = GeneralLogarithmFunctionContext; 
GQLParser.GeneralLogarithmBaseContext = GeneralLogarithmBaseContext; 
GQLParser.GeneralLogarithmArgumentContext = GeneralLogarithmArgumentContext; 
GQLParser.CommonLogarithmFunctionContext = CommonLogarithmFunctionContext; 
GQLParser.NaturalLogarithmFunctionContext = NaturalLogarithmFunctionContext; 
GQLParser.ExponentialFunctionContext = ExponentialFunctionContext; 
GQLParser.PowerFunctionContext = PowerFunctionContext; 
GQLParser.NumericValueExprBaseContext = NumericValueExprBaseContext; 
GQLParser.NumericValueExprExponentContext = NumericValueExprExponentContext; 
GQLParser.SquareRootFuncitonContext = SquareRootFuncitonContext; 
GQLParser.FloorFunctionContext = FloorFunctionContext; 
GQLParser.CeilingFunctionContext = CeilingFunctionContext; 
GQLParser.StringValueExprContext = StringValueExprContext; 
GQLParser.CharStringValueExprContext = CharStringValueExprContext; 
GQLParser.CharStringConcatenationContext = CharStringConcatenationContext; 
GQLParser.CharStringFactorContext = CharStringFactorContext; 
GQLParser.CharStringPrimaryContext = CharStringPrimaryContext; 
GQLParser.ByteStringValueExprContext = ByteStringValueExprContext; 
GQLParser.ByteStringFactorContext = ByteStringFactorContext; 
GQLParser.ByteStringPrimaryContext = ByteStringPrimaryContext; 
GQLParser.ByteStringConcatenationContext = ByteStringConcatenationContext; 
GQLParser.StringValueFunctionContext = StringValueFunctionContext; 
GQLParser.CharStringFunctionContext = CharStringFunctionContext; 
GQLParser.FoldFunctionContext = FoldFunctionContext; 
GQLParser.TrimFunctionContext = TrimFunctionContext; 
GQLParser.SingleCharTrimFunctionContext = SingleCharTrimFunctionContext; 
GQLParser.MultiCharTrimFunctionContext = MultiCharTrimFunctionContext; 
GQLParser.TrimOperandsContext = TrimOperandsContext; 
GQLParser.TrimSourceContext = TrimSourceContext; 
GQLParser.TrimSpecContext = TrimSpecContext; 
GQLParser.TrimCharStringContext = TrimCharStringContext; 
GQLParser.NormalizeFunctionContext = NormalizeFunctionContext; 
GQLParser.NormalFormContext = NormalFormContext; 
GQLParser.ByteStringFunctionContext = ByteStringFunctionContext; 
GQLParser.ByteStrinTrimFunctionContext = ByteStrinTrimFunctionContext; 
GQLParser.ByteStringTrimOperandsContext = ByteStringTrimOperandsContext; 
GQLParser.ByteStringTrimSourceContext = ByteStringTrimSourceContext; 
GQLParser.TrimByteStringContext = TrimByteStringContext; 
GQLParser.StringLengthContext = StringLengthContext; 
GQLParser.DateTimeValueExprContext = DateTimeValueExprContext; 
GQLParser.DateTimeTermContext = DateTimeTermContext; 
GQLParser.DateTimeFactorContext = DateTimeFactorContext; 
GQLParser.DateTimePrimaryContext = DateTimePrimaryContext; 
GQLParser.DateTimeValueFunctionContext = DateTimeValueFunctionContext; 
GQLParser.DateFunctionContext = DateFunctionContext; 
GQLParser.TimeFunctionContext = TimeFunctionContext; 
GQLParser.LocalTimeFunctionContext = LocalTimeFunctionContext; 
GQLParser.DateTimeFunctionContext = DateTimeFunctionContext; 
GQLParser.LocalDatetimeFunctionContext = LocalDatetimeFunctionContext; 
GQLParser.DateFunctionParametersContext = DateFunctionParametersContext; 
GQLParser.TimeFunctionParametersContext = TimeFunctionParametersContext; 
GQLParser.DateTimeFunctionParametersContext = DateTimeFunctionParametersContext; 
GQLParser.DurationValueExprContext = DurationValueExprContext; 
GQLParser.DateTimeSubtractionContext = DateTimeSubtractionContext; 
GQLParser.DateTimeSubtractionParametersContext = DateTimeSubtractionParametersContext; 
GQLParser.DurationTermContext = DurationTermContext; 
GQLParser.DurationFactorContext = DurationFactorContext; 
GQLParser.DurationPrimaryContext = DurationPrimaryContext; 
GQLParser.DurationValueExpr1Context = DurationValueExpr1Context; 
GQLParser.DurationTerm1Context = DurationTerm1Context; 
GQLParser.DurationTerm2Context = DurationTerm2Context; 
GQLParser.DateTimeValueExpr1Context = DateTimeValueExpr1Context; 
GQLParser.DateTimeValueExpr2Context = DateTimeValueExpr2Context; 
GQLParser.DurationValueFunctionContext = DurationValueFunctionContext; 
GQLParser.DurationFunctionContext = DurationFunctionContext; 
GQLParser.DurationFunctionParametersContext = DurationFunctionParametersContext; 
GQLParser.DurationAbsoluteValueFunctionContext = DurationAbsoluteValueFunctionContext; 
GQLParser.ListValueExprContext = ListValueExprContext; 
GQLParser.ListConcatenationContext = ListConcatenationContext; 
GQLParser.ListPrimaryContext = ListPrimaryContext; 
GQLParser.ListValueFunctionContext = ListValueFunctionContext; 
GQLParser.TrimListFunctionContext = TrimListFunctionContext; 
GQLParser.ElementsFunctionContext = ElementsFunctionContext; 
GQLParser.ListValueConstructorContext = ListValueConstructorContext; 
GQLParser.ListValueConstructorByEnumerationContext = ListValueConstructorByEnumerationContext; 
GQLParser.ListElementListContext = ListElementListContext; 
GQLParser.ListElementContext = ListElementContext; 
GQLParser.RecordValueConstructorContext = RecordValueConstructorContext; 
GQLParser.FieldsSpecContext = FieldsSpecContext; 
GQLParser.FieldListContext = FieldListContext; 
GQLParser.FieldContext = FieldContext; 
GQLParser.PathValueExprContext = PathValueExprContext; 
GQLParser.PathValueConcatenationContext = PathValueConcatenationContext; 
GQLParser.PathValuePrimaryContext = PathValuePrimaryContext; 
GQLParser.PathValueConstructorContext = PathValueConstructorContext; 
GQLParser.PathValueConstructorByEnumerationContext = PathValueConstructorByEnumerationContext; 
GQLParser.PathElementListContext = PathElementListContext; 
GQLParser.PathElementListStartContext = PathElementListStartContext; 
GQLParser.PathElementListStepContext = PathElementListStepContext; 
GQLParser.PropertyRefContext = PropertyRefContext; 
GQLParser.PropertySourceContext = PropertySourceContext; 
GQLParser.ValueQueryExprContext = ValueQueryExprContext; 
GQLParser.CaseExprContext = CaseExprContext; 
GQLParser.CaseAbbreviationContext = CaseAbbreviationContext; 
GQLParser.CaseSpecificationContext = CaseSpecificationContext; 
GQLParser.SimpleCaseContext = SimpleCaseContext; 
GQLParser.SearchedCaseContext = SearchedCaseContext; 
GQLParser.SimpleWhenClauseContext = SimpleWhenClauseContext; 
GQLParser.SearchedWhenClauseContext = SearchedWhenClauseContext; 
GQLParser.ElseClauseContext = ElseClauseContext; 
GQLParser.CaseOperandContext = CaseOperandContext; 
GQLParser.WhenOperandListContext = WhenOperandListContext; 
GQLParser.WhenOperandContext = WhenOperandContext; 
GQLParser.ResultContext = ResultContext; 
GQLParser.ResultExprContext = ResultExprContext; 
GQLParser.CastSpecContext = CastSpecContext; 
GQLParser.CastOperandContext = CastOperandContext; 
GQLParser.CastTargetContext = CastTargetContext; 
GQLParser.ElementIdFunctionContext = ElementIdFunctionContext; 
GQLParser.LetValueExprContext = LetValueExprContext; 
GQLParser.LiteralContext = LiteralContext; 
GQLParser.GeneralLiteralContext = GeneralLiteralContext; 
GQLParser.PredefinedTypeLiteralContext = PredefinedTypeLiteralContext; 
GQLParser.UnsignedLiteralContext = UnsignedLiteralContext; 
GQLParser.BooleanLiteralContext = BooleanLiteralContext; 
GQLParser.CharacterStringLiteralContext = CharacterStringLiteralContext; 
GQLParser.UnbrokenCharacterStringLiteralContext = UnbrokenCharacterStringLiteralContext; 
GQLParser.SingleQuotedCharacterSequenceContext = SingleQuotedCharacterSequenceContext; 
GQLParser.DoubleQuotedCharacterSequenceContext = DoubleQuotedCharacterSequenceContext; 
GQLParser.AccentQuotedCharacterSequenceContext = AccentQuotedCharacterSequenceContext; 
GQLParser.NoEscapeContext = NoEscapeContext; 
GQLParser.UnbrokenSingleQuotedCharacterSequenceContext = UnbrokenSingleQuotedCharacterSequenceContext; 
GQLParser.UnbrokenDoubleQuotedCharacterSequenceContext = UnbrokenDoubleQuotedCharacterSequenceContext; 
GQLParser.UnbrokenAccentQuotedCharacterSequenceContext = UnbrokenAccentQuotedCharacterSequenceContext; 
GQLParser.TemporalLiteralContext = TemporalLiteralContext; 
GQLParser.DateLiteralContext = DateLiteralContext; 
GQLParser.TimeLiteralContext = TimeLiteralContext; 
GQLParser.DateTimeLiteralContext = DateTimeLiteralContext; 
GQLParser.DateStringContext = DateStringContext; 
GQLParser.TimeStringContext = TimeStringContext; 
GQLParser.DateTimeStringContext = DateTimeStringContext; 
GQLParser.SqlDateTimeLiteralContext = SqlDateTimeLiteralContext; 
GQLParser.DurationLiteralContext = DurationLiteralContext; 
GQLParser.DurationStringContext = DurationStringContext; 
GQLParser.SqlIntervalLiteralContext = SqlIntervalLiteralContext; 
GQLParser.SqlIntervalTypeContext = SqlIntervalTypeContext; 
GQLParser.NullLiteralContext = NullLiteralContext; 
GQLParser.ListLiteralContext = ListLiteralContext; 
GQLParser.RecordLiteralContext = RecordLiteralContext; 
GQLParser.ObjectNameContext = ObjectNameContext; 
GQLParser.ObjectNameOrBindingVarContext = ObjectNameOrBindingVarContext; 
GQLParser.DirectoryNameContext = DirectoryNameContext; 
GQLParser.SchemaNameContext = SchemaNameContext; 
GQLParser.GraphNameContext = GraphNameContext; 
GQLParser.DelimitedGraphNameContext = DelimitedGraphNameContext; 
GQLParser.GraphTypeNameContext = GraphTypeNameContext; 
GQLParser.ElementTypeNameContext = ElementTypeNameContext; 
GQLParser.BindingTableNameContext = BindingTableNameContext; 
GQLParser.DelimitedBindingTableNameContext = DelimitedBindingTableNameContext; 
GQLParser.ProcedureNameContext = ProcedureNameContext; 
GQLParser.LabelNameContext = LabelNameContext; 
GQLParser.PropertyNameContext = PropertyNameContext; 
GQLParser.FieldNameContext = FieldNameContext; 
GQLParser.ParameterNameContext = ParameterNameContext; 
GQLParser.VarContext = VarContext; 
GQLParser.GraphVarContext = GraphVarContext; 
GQLParser.GraphPatternVarContext = GraphPatternVarContext; 
GQLParser.PathOrSubpathVarContext = PathOrSubpathVarContext; 
GQLParser.ElementVarContext = ElementVarContext; 
GQLParser.PathVarContext = PathVarContext; 
GQLParser.SubpathVarContext = SubpathVarContext; 
GQLParser.BindingTableVarContext = BindingTableVarContext; 
GQLParser.ValueVarContext = ValueVarContext; 
GQLParser.BindingVarContext = BindingVarContext; 
GQLParser.TokenContext = TokenContext; 
GQLParser.NonDelimiterTokenContext = NonDelimiterTokenContext; 
GQLParser.IdentifierContext = IdentifierContext; 
GQLParser.SeparatedIdentifierContext = SeparatedIdentifierContext; 
GQLParser.NonDelimitedIdentifierContext = NonDelimitedIdentifierContext; 
GQLParser.DelimitedIdentifierContext = DelimitedIdentifierContext; 
GQLParser.KeyWordContext = KeyWordContext; 
GQLParser.ReservedWordContext = ReservedWordContext; 
GQLParser.PreReservedWordContext = PreReservedWordContext; 
GQLParser.NonReservedWordContext = NonReservedWordContext; 
GQLParser.DelimiterTokenContext = DelimiterTokenContext; 
GQLParser.EdgeSynonymContext = EdgeSynonymContext; 
GQLParser.EdgesSynonymContext = EdgesSynonymContext; 
GQLParser.NodeSynonymContext = NodeSynonymContext; 
